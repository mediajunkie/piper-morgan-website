1:"$Sreact.fragment"
8:I[8393,[],""]
:HL["/_next/static/css/3ca3d2f2e38ad017.css","style"]
2:T1313,
            :root{--primary-teal:#2DD4BF;--primary-teal-text:#0D9488;--text-dark:#1F2937;--text-light:#6B7280;--background:#FFFFFF;--surface:#F9FAFB}
            .dark{--text-dark:#F1F5F9;--text-light:#94A3B8;--background:#0F172A;--surface:#1E293B}
            @font-face{font-family:'Inter';src:url('/fonts/inter-latin.woff2') format('woff2');font-weight:100 900;font-style:normal;font-display:swap;unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            *{box-sizing:border-box}
            html{scroll-behavior:smooth;font-size:16px;margin:0;padding:0;border:none;outline:none}
            body{background:var(--background);color:var(--text-dark);font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell',sans-serif;line-height:1.6;margin:0;padding:0;border:none;outline:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
            nav{border:none !important;outline:none !important}
            h1,h2,h3,h4,h5,h6{font-family:'Hoss Round','Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif}
            p,span{max-width:75ch;line-height:1.7}
            .text-content div{max-width:75ch;line-height:1.7}
            .text-content{max-width:65ch}
            @media (max-width:640px){
              h1{font-size:1.75rem;line-height:1.2}
              h2{font-size:1.25rem;line-height:1.3}
              h3{font-size:1.1rem;line-height:1.4}
              h4{font-size:1rem;line-height:1.4}
            }
            @media (min-width:641px) and (max-width:768px){
              h1{font-size:2rem;line-height:1.2}
              h2{font-size:1.5rem;line-height:1.3}
              h3{font-size:1.25rem;line-height:1.4}
            }
            @media (prefers-reduced-motion: reduce){
              *{animation-duration:0.01ms !important;animation-iteration-count:1 !important;transition-duration:0.01ms !important}
            }
            a:hover{color:#0D9488;transition:color 0.2s ease}
            .hover-lift:hover{transform:translateY(-2px);transition:transform 0.2s ease}
            button:focus,a:focus{outline:2px solid #2DD4BF;outline-offset:2px;border-radius:4px}
            .skip-to-content{position:absolute;top:-100px;left:0;z-index:999;padding:8px 16px;background:#1F2937;color:white;text-decoration:none;border-radius:0 0 4px 0;transition:top 0.3s}
            .skip-to-content:focus{top:0;outline:2px solid #2DD4BF;outline-offset:2px}
            .section-spacing{margin-bottom:4rem}
            .component-spacing{margin-bottom:1.5rem}
            .micro-spacing{margin-bottom:0.5rem}
            @media (min-width:768px){
              .section-spacing{margin-bottom:6rem}
              .component-spacing{margin-bottom:2rem}
            }
            .site-container{width:100%;max-width:1200px;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
            @media (min-width:640px){.site-container{padding-left:1.5rem;padding-right:1.5rem}}
            @media (min-width:768px){.site-container{padding-left:2rem;padding-right:2rem}}
            @media (min-width:1024px){.site-container{max-width:1200px}}
            @media (min-width:1200px){.site-container{max-width:1200px}}
            .section-padding{padding-top:4rem;padding-bottom:4rem}
            @media (min-width:768px){.section-padding{padding-top:5rem;padding-bottom:5rem}}
            .mx-auto{margin-left:auto;margin-right:auto}
            .max-w-4xl{max-width:56rem}
            .pt-16{padding-top:4rem}
            .pb-8{padding-bottom:2rem}
            .px-4{padding-left:1rem;padding-right:1rem}
            .mb-6{margin-bottom:1.5rem}
            .mb-8{margin-bottom:2rem}
            .text-left{text-align:left}
            .text-center{text-align:center}
            .text-primary-teal-text{color:#0F766E}
            .text-text-dark{color:#1F2937}
            .text-text-light{color:#6B7280}
            .font-bold{font-weight:700}
            .text-4xl{font-size:2.25rem;line-height:2.5rem}
            .text-5xl{font-size:3rem;line-height:1}
            .text-6xl{font-size:3.75rem;line-height:1}
            .text-lg{font-size:1.125rem;line-height:1.75rem}
            .text-xl{font-size:1.25rem;line-height:1.75rem}
            .leading-tight{line-height:1.25}
            .leading-relaxed{line-height:1.625}
            .min-h-screen{min-height:100vh}
            @media (min-width:768px){
              .md\:pt-24{padding-top:6rem}
              .md\:pb-12{padding-bottom:3rem}
              .md\:text-5xl{font-size:3rem;line-height:1}
              .md\:text-xl{font-size:1.25rem;line-height:1.75rem}
            }
            @media (min-width:1024px){
              .lg\:text-6xl{font-size:3.75rem;line-height:1}
            }
          0:{"P":null,"b":"2H1gLwgAhIBVAPWNt8WvA","p":"","c":["","blog","the-day-everything-went-right-when-fast-means-unbroken",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","the-day-everything-went-right-when-fast-means-unbroken","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3ca3d2f2e38ad017.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"font-inter","children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                const theme = localStorage.getItem('theme') ||\n                  (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n                if (theme === 'dark') {\n                  document.documentElement.classList.add('dark');\n                  document.body.classList.add('dark');\n                }\n              })();\n            "}}],["$","link",null,{"rel":"dns-prefetch","href":"//pipermorgan.ai"}],["$","link",null,{"rel":"preconnect","href":"https://pipermorgan.ai"}],["$","link",null,{"rel":"preload","as":"image","href":"/assets/pm-logo.png"}],["$","link",null,{"rel":"preload","href":"/fonts/inter-latin.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preload","href":"/fonts/HossRound-Regular.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","style",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]]}],"$L3"]}]]}],{"children":["blog","$L4",{"children":[["slug","the-day-everything-went-right-when-fast-means-unbroken","d"],"$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[9119,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-8a7a8f47a4a53f15.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"ClientLayout"]
a:I[7555,[],""]
b:I[1295,[],""]
c:I[6874,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-8a7a8f47a4a53f15.js","144","static/chunks/144-1b443e029a921717.js","674","static/chunks/674-fed8fa140beda2fd.js","831","static/chunks/app/blog/page-666765c672eae567.js"],""]
10:I[9665,[],"OutletBoundary"]
12:I[4911,[],"AsyncMetadataOutlet"]
14:I[9665,[],"ViewportBoundary"]
16:I[9665,[],"MetadataBoundary"]
17:"$Sreact.suspense"
3:["$","body",null,{"className":"font-sans antialiased","children":[["$","$L9",null,{"children":["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen","children":["$","div",null,{"className":"site-container max-w-4xl pt-16 md:pt-24 pb-8 md:pb-12 text-center","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-8xl md:text-9xl font-bold text-primary-teal-text mb-4","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-semibold text-text-dark mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-xl text-text-light leading-relaxed max-w-2xl mx-auto","children":"Looks like this page got lost in the AI training data. Don't worry ‚Äì even the best algorithms make mistakes sometimes."}]]}],["$","div",null,{"className":"mb-12","children":[["$","h3",null,{"className":"text-xl font-semibold text-text-dark mb-6","children":"Where would you like to go instead?"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-6 max-w-2xl mx-auto","children":[["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üè† Homepage"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Start from the beginning of our AI PM journey"}]]}],["$","$Lc",null,{"href":"/how-it-works","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"‚öôÔ∏è How It Works"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Discover our AI-powered product management methodology"}]]}]]}],["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/what-weve-learned","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üí° What We've Learned"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Building-in-public insights and breakthroughs"}]]}],["$","$Lc",null,{"href":"/blog","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üìù Journey"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Follow our building-in-public blog posts"}]]}],["$","$Lc",null,{"href":"/get-involved","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üöÄ Get Involved"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Join our community and stay updated"}]]}]]}]]}]]}],["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-text-light mb-6","children":"Still can't find what you're looking for?"}],["$","$Lc",null,{"href":"/get-involved","className":"inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:transform-none bg-primary-teal text-white hover:bg-teal-600 focus:ring-primary-teal shadow-component hover:shadow-component-hover hover:-translate-y-0.5 hover:scale-105 font-bold text-lg px-8 py-4 text-lg rounded-button","aria-label":"$undefined","children":[false,"Get Help & Stay Updated"]}]]}],["$","div",null,{"className":"mt-12 p-6 bg-gray-50 rounded-card max-w-lg mx-auto","children":["$","p",null,{"className":"text-sm text-text-light italic","children":["üí¨ ","$Ld"," \"Even the most sophisticated neural networks occasionally return null. Let's navigate back to more productive paths together!\""]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],"$Le"]}]
4:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
5:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],null],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[9795,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-8a7a8f47a4a53f15.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"default"]
d:["$","strong",null,{"children":"Piper Morgan says:"}]
e:["$","$L19",null,{}]
1a:I[7887,["874","static/chunks/874-668c89038fa04eb8.js","953","static/chunks/app/blog/%5Bslug%5D/page-63f1c4c60df8aece.js"],"BlogPostContent"]
1b:T36da,<figure><img alt="Two construction workers, one a person and the other a robot, walk casually on moving girder" src="https://cdn-images-1.medium.com/max/1024/1*Tmfjf6aZvJjZORv3g6V_xg.png" /><figcaption>‚ÄúMornin‚Äô boss!‚Äù</figcaption></figure><p><em>October 3</em></p><p>At 4:50 PM on Friday, my Lead Developer‚Ää‚Äî‚ÄäClaude Sonnet 4.5, if we‚Äôre being formal‚Ää‚Äî‚Ääsent me the completion summary for GREAT-3B. The numbers looked almost suspicious: 48 tests passing, zero breaking changes, about 90 minutes of actual implementation time spread across two programming agents working in careful sequence.</p><p>It seemed almost too¬†easy.</p><p>‚ÄúThis is starting to feel eerie,‚Äù I‚Äôd noted earlier in the day, watching yet another phase complete ahead of estimate without drama. Not ‚Äúwe got lucky‚Äù eerie. More like ‚Äúwe‚Äôve built something that actually works the way it‚Äôs supposed to‚Äù¬†eerie.</p><p>Which, if you‚Äôve shipped software for decades as I have, you know is the <em>weird</em> kind of¬†smooth.</p><h3>What GREAT-3B actually¬†did</h3><p>GREAT-3B took Piper Morgan‚Äôs plugin system from ‚Äúfour hardcoded imports‚Äù to ‚Äúdynamic discovery and configuration-controlled loading.‚Äù The kind of change that usually means: breaking half your tests, discovering assumptions you didn‚Äôt know you‚Äôd made, and spending Friday afternoon figuring out why plugins load in dev but not production.</p><p>Instead, we¬†got:</p><ul><li>Complete filesystem discovery scanning for available plugins</li><li>Config-driven selective loading (disable plugins without touching¬†code)</li><li>Smart handling of module re-imports in test environments</li><li>All four existing plugins (Slack, GitHub, Notion, Calendar) working identically</li><li>14 new tests added to the existing¬†34</li><li>Zero regressions</li></ul><p>The technical achievement isn‚Äôt the interesting part. What‚Äôs interesting is <em>why it went so smoothly</em>. Like those scenes in thrillers where someone mentions how quiet it‚Äôs gotten and another person nervously says it feels ‚Äútoo¬†quiet.‚Äù</p><h3>The foundation that wasn‚Äôt visible until we needed¬†it</h3><p>The work on GREAT-3A‚Ää‚Äî‚Ääwhich I wrote about earlier this week‚Ää‚Äî‚Äähad put all four plugins onto a standard interface. That sounds like typical refactoring work until you realize what it meant for Friday: when we needed to dynamically load plugins, every plugin already spoke the same language. No special cases. No ‚Äúthis one‚Äôs different because reasons.‚Äù</p><p>Strategy!</p><p>Chief Architect (Claude Opus 4.1, our strategic planner) made the GREAT-3A decision to keep plugins distributed in their integration directories rather than centralizing them. At the time, that seemed like a minor architectural choice. Friday morning at 1:05 PM, when I asked the Lead Developer ‚Äúwhere should plugins live?‚Äù, the answer was already proven in production: right where they¬†are.</p><p>That‚Äôs what building on solid foundations actually looks like‚Ää‚Äî‚Äänot gold-plating for the future, just making decisions that don‚Äôt create problems¬†later.</p><h3>Phase ‚àí1: The reconnaisance nobody¬†sees</h3><p>At 1:07 PM we added a ‚ÄúPhase ‚àí1‚Äù to the plan. Before even investigating the challenge (Phase 0), let alone implementing anything (Phase 1 through <em>n</em>), verify what‚Äôs actually¬†there.</p><p>The programming agents (Code and Cursor, both running Claude Sonnet 4.5 although Cursor has its own special ways under the hood) spent 42 minutes between them just <em>checking</em>:</p><ul><li>Where are the plugin files actually¬†located?</li><li>How does the current static import pattern¬†work?</li><li>What does the registry already have that we can¬†use?</li><li>What‚Äôs the test baseline we need to maintain?</li></ul><p><em>Presumably human developers can sometimes just, well, remember how the system works and what was built, but the truth is that in today‚Äôs complex computer systems, you really can‚Äôt assume anything is working the way the spec says without actually¬†looking.</em></p><p>They found that PluginRegistry already had methods for getting plugins, listing them, filtering by capability. The interface from GREAT-3A already included initialization and shutdown lifecycle hooks. Even the auto-registration pattern‚Äîwhere importing a plugin file automatically registers it‚Äîwould work with dynamic imports using Python&#39;s importlib.</p><p>In other words, most of the infrastructure was already there. We just needed discovery and configuration.</p><p>That‚Äôs 42 minutes that didn‚Äôt show up in the ‚Äúimplementation time‚Äù metrics. It‚Äôs also why the implementation didn‚Äôt hit any surprises.</p><p>There are so many bromides from traditional crafts that apply here, with perhaps the most ancient of them being: ‚Äúmeasure twice, cut¬†once.‚Äù</p><h3>The Chief Architect‚Äôs invisible guardrails</h3><p>At 2:17 PM, Lead Developer presented a choice: put plugin configuration in a separate config/plugins.yaml file (clean, standard) or embed it in the existing config/PIPER.user.md (maintaining Wednesday&#39;s &quot;single config file&quot; unification).</p><p>Chief Architect recommended Option B without hesitation: ‚ÄúMaintains GREAT-3A‚Äôs config unification. Single file for all configuration. Architectural consistency.‚Äù</p><p>That one decision meant we didn‚Äôt spend Friday debugging why some configuration lived in YAML and some in Markdown, or why plugin settings seemed to ignore the main config file. It meant the configuration system <em>worked</em> because it used the same pattern everything else already¬†used.</p><p>None of those nightmares we ran into at AOL in the latters days of AIM (AOL Instant Messenger), where the code was like nine-dimensional spaghetti after ten plus years of architectural bolt-ons.</p><p>These aren‚Äôt the decisions that show up in blog posts about architecture. They‚Äôre the decisions that mean blog posts <em>don‚Äôt need to be written</em> about why things¬†broke.</p><h3>When parallel becomes sequential</h3><p>The phase structure showed something interesting about coordination:</p><p><strong>Phase 0</strong> (Investigation): Both agents worked simultaneously‚Ää‚Äî‚ÄäCode analyzing the auto-registration pattern and config structure, Cursor examining the web app loading flow. 28 minutes + 14 minutes of parallel investigation.</p><p><strong>Phases 1‚Äì4</strong> (Implementation): Strictly sequential. Code built discovery (Phase 1), <em>then</em> Cursor built dynamic loading using that discovery (Phase 2), <em>then</em> Code built config integration (Phase 3), <em>then</em> Cursor updated the web app to use it all (Phase¬†4).</p><p>Sometimes I can let the agents run in parallel. One writes code, the other tests. Or they can work on different layers of a system. But other times it‚Äôs best to set up a relay¬†race.</p><p>Each phase depended on the previous phase being <em>actually done</em>. Not ‚Äúmostly done‚Äù or ‚Äúwe‚Äôll fix it later‚Äù but done-done: tested, documented, committed.</p><p>With the help of the Lead Developer, I managed those handoffs in real-time, deploying agents with specific prompts that said ‚Äúhere‚Äôs what Phase N created, here‚Äôs what Phase N+1 needs to build on it.‚Äù No agents waiting idle for work. No agents blocked on unclear dependencies. Just: investigation ‚Üí foundation ‚Üí integration ‚Üí application ‚Üí validation.</p><p>The whole implementation sequence took 76 minutes of agent time across both programmers.</p><h3>The measurement theater¬†problem</h3><p>At 2:54 PM, Lead Developer added a note to its session log based on my observations:</p><blockquote><strong><em>Methodological Observation</em></strong><em>: Agent prompts and templates contain time estimates that create false precision and expectations. Current pattern: Prompts say ‚ÄúEstimated: 45 minutes‚Äù, agents report ‚Äú28 minutes (38% faster than estimated)‚Äù, creates unnecessary time accounting overhead.</em></blockquote><blockquote><strong><em>Recommendation</em></strong><em>: Remove all time references. Focus on deliverables and success criteria only. What matters is quality and completeness, not speed¬†metrics.</em></blockquote><p>This is the kind of observation you only make when things are going <em>well</em>. When you‚Äôre firefighting, nobody stops to question whether time estimates are useful. But when a phase finishes ‚Äú38% faster than estimated,‚Äù what does that number actually¬†mean?</p><p>Nothing, it turns out. Or rather, it measures the wrong¬†thing.</p><p>The time that mattered wasn‚Äôt ‚Äúhow fast did we implement Phase 2.‚Äù It was ‚Äúhow much time did we <em>not spend</em> on Friday debugging why plugin loading broke in production.‚Äù</p><h3>What ‚Äúfast‚Äù actually means¬†here</h3><p>The omnibus log* for October 3 shows total elapsed time of about 4 hours from ‚ÄúLead Developer starts‚Äù to ‚ÄúGREAT-3B complete.‚Äù But that includes:</p><ul><li>Strategic decision discussions with Chief Architect</li><li>Me being unavailable for an hour for an all hands¬†meeting.</li><li>Documentation updates and git¬†commits</li><li>Creating the comprehensive handoff materials</li></ul><p>The actual building‚Ää‚Äî‚Ääwriting code, updating tests, integrating components‚Ää‚Äî‚Ääwas 76 minutes across two agents working in sequence.</p><p>But calling this ‚Äúfast‚Äù misses the point. We didn‚Äôt <em>speed up</em> the development process. We stopped creating problems that needed fixing¬†later.</p><p>Here‚Äôs what we didn‚Äôt do¬†Friday:</p><ul><li>Debug why tests passed locally but failed in¬†CI</li><li>Investigate why disabling a plugin broke unrelated features</li><li>Fix imports that worked yesterday but mysteriously stopped¬†working</li><li>Refactor code written too quickly to be maintainable</li><li>Write apologetic commit messages about ‚Äútemporary fixes‚Äù</li></ul><p>None of that is ‚Äúfast.‚Äù It‚Äôs just unbroken.</p><p><em>(* I‚Äôve started having my doc assistant digest all the agent logs for a work session into a single ‚Äúomnibus‚Äù timeline, to show the consolidated dance and remove redundancy)</em></p><h3>The eeriness of drama-free work</h3><p>We didn‚Äôt miss anything. Friday‚Äôs work succeeded because:</p><ul><li>Wednesday‚Äôs GREAT-3A work had already unified the plugin interfaces</li><li>Phase ‚àí1 verified assumptions instead of making¬†them</li><li>Chief Architect made architectural decisions that prevented future¬†problems</li><li>Lead Developer orchestrated careful sequential dependencies</li><li>Both programming agents had clear success criteria for each¬†phase</li></ul><p>The ‚Äúeerie calm‚Äù isn‚Äôt luck. It‚Äôs what systematic work actually looks like when methodology isn‚Äôt fighting against¬†itself.</p><h3>What this taught us about technical debt you don‚Äôt¬†create</h3><p>Technical debt is usually described as the cost of going fast now and paying later. But there‚Äôs an invisible category: the technical debt you <em>don‚Äôt create</em> by working carefully upfront.</p><p>That debt doesn‚Äôt show up in any metrics. You can‚Äôt measure the bugs you didn‚Äôt have to fix or the refactoring you didn‚Äôt need to do. The only evidence is days like Friday where major changes just‚Ä¶¬†work.</p><p>In a way this reminds me of the often invisible glue work product managers (and many UX leaders) provide to teams, solving issues, making connections, anticipating issues, coming up with plans. When done well, many problems never materialize, robbing us of the heroic satisfaction of dragonslaying in favor of ho-hum competence.</p><p>The Lead Developer‚Äôs time estimation observation points at something deeper: we‚Äôre measuring the wrong things. ‚ÄúHow fast did we ship?‚Äù is less interesting than ‚ÄúHow often do we have to go back and fix what we shipped?‚Äù</p><p>Friday‚Äôs 76 minutes of implementation didn‚Äôt need a follow-up Saturday of debugging because the investigation, planning, and architectural decisions happened first. The methodology didn‚Äôt skip steps to save time‚Ää‚Äî‚Ääit did the work in the right order so that time spent stayed¬†spent.</p><h3>The foundation for what comes¬†next</h3><p>GREAT-3B is complete. The plugin system can now discover available plugins, load only enabled ones, handle missing plugins gracefully, and let operators control the whole thing through configuration without touching¬†code.</p><p>More importantly: it‚Äôs <em>boring</em>. No clever hacks. No special cases. No ‚Äúthis works but I‚Äôm not sure why‚Äù code. Just a straightforward implementation of discovery, loading, and configuration that does exactly what it claims to¬†do.</p><p>Which means GREAT-3C‚Ää‚Äî‚Ääin which we will document the wrapper pattern documented as intentional architecture, make a developer guide complete with examples, create a test a template plugin, ensure all 4 existing plugins have version metadata, make an architecture diagram to show plugin-router relationship, and document the migration path documented for future‚Ää‚Äî‚Ääcan build on this without first having to fix Friday‚Äôs shortcuts.</p><p>That‚Äôs what drama-free development actually purchases: tomorrow‚Äôs problems don‚Äôt include cleaning up yesterday‚Äôs messes.</p><p><em>Next on Building Piper Morgan: Three Days to Production, or When Steady Momentum Beats Racing¬†Ahead.</em></p><p><em>Have you ever shipped something that worked so well it felt suspicious? What did you find when you looked for the¬†catch?</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b859b2b9de2f" width="1" height="1" alt=""><hr><p><a href="https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f">The Day Everything Went Right: When Fast Means Unbroken</a> was originally published in <a href="https://medium.com/building-piper-morgan">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>1c:T36da,<figure><img alt="Two construction workers, one a person and the other a robot, walk casually on moving girder" src="https://cdn-images-1.medium.com/max/1024/1*Tmfjf6aZvJjZORv3g6V_xg.png" /><figcaption>‚ÄúMornin‚Äô boss!‚Äù</figcaption></figure><p><em>October 3</em></p><p>At 4:50 PM on Friday, my Lead Developer‚Ää‚Äî‚ÄäClaude Sonnet 4.5, if we‚Äôre being formal‚Ää‚Äî‚Ääsent me the completion summary for GREAT-3B. The numbers looked almost suspicious: 48 tests passing, zero breaking changes, about 90 minutes of actual implementation time spread across two programming agents working in careful sequence.</p><p>It seemed almost too¬†easy.</p><p>‚ÄúThis is starting to feel eerie,‚Äù I‚Äôd noted earlier in the day, watching yet another phase complete ahead of estimate without drama. Not ‚Äúwe got lucky‚Äù eerie. More like ‚Äúwe‚Äôve built something that actually works the way it‚Äôs supposed to‚Äù¬†eerie.</p><p>Which, if you‚Äôve shipped software for decades as I have, you know is the <em>weird</em> kind of¬†smooth.</p><h3>What GREAT-3B actually¬†did</h3><p>GREAT-3B took Piper Morgan‚Äôs plugin system from ‚Äúfour hardcoded imports‚Äù to ‚Äúdynamic discovery and configuration-controlled loading.‚Äù The kind of change that usually means: breaking half your tests, discovering assumptions you didn‚Äôt know you‚Äôd made, and spending Friday afternoon figuring out why plugins load in dev but not production.</p><p>Instead, we¬†got:</p><ul><li>Complete filesystem discovery scanning for available plugins</li><li>Config-driven selective loading (disable plugins without touching¬†code)</li><li>Smart handling of module re-imports in test environments</li><li>All four existing plugins (Slack, GitHub, Notion, Calendar) working identically</li><li>14 new tests added to the existing¬†34</li><li>Zero regressions</li></ul><p>The technical achievement isn‚Äôt the interesting part. What‚Äôs interesting is <em>why it went so smoothly</em>. Like those scenes in thrillers where someone mentions how quiet it‚Äôs gotten and another person nervously says it feels ‚Äútoo¬†quiet.‚Äù</p><h3>The foundation that wasn‚Äôt visible until we needed¬†it</h3><p>The work on GREAT-3A‚Ää‚Äî‚Ääwhich I wrote about earlier this week‚Ää‚Äî‚Äähad put all four plugins onto a standard interface. That sounds like typical refactoring work until you realize what it meant for Friday: when we needed to dynamically load plugins, every plugin already spoke the same language. No special cases. No ‚Äúthis one‚Äôs different because reasons.‚Äù</p><p>Strategy!</p><p>Chief Architect (Claude Opus 4.1, our strategic planner) made the GREAT-3A decision to keep plugins distributed in their integration directories rather than centralizing them. At the time, that seemed like a minor architectural choice. Friday morning at 1:05 PM, when I asked the Lead Developer ‚Äúwhere should plugins live?‚Äù, the answer was already proven in production: right where they¬†are.</p><p>That‚Äôs what building on solid foundations actually looks like‚Ää‚Äî‚Äänot gold-plating for the future, just making decisions that don‚Äôt create problems¬†later.</p><h3>Phase ‚àí1: The reconnaisance nobody¬†sees</h3><p>At 1:07 PM we added a ‚ÄúPhase ‚àí1‚Äù to the plan. Before even investigating the challenge (Phase 0), let alone implementing anything (Phase 1 through <em>n</em>), verify what‚Äôs actually¬†there.</p><p>The programming agents (Code and Cursor, both running Claude Sonnet 4.5 although Cursor has its own special ways under the hood) spent 42 minutes between them just <em>checking</em>:</p><ul><li>Where are the plugin files actually¬†located?</li><li>How does the current static import pattern¬†work?</li><li>What does the registry already have that we can¬†use?</li><li>What‚Äôs the test baseline we need to maintain?</li></ul><p><em>Presumably human developers can sometimes just, well, remember how the system works and what was built, but the truth is that in today‚Äôs complex computer systems, you really can‚Äôt assume anything is working the way the spec says without actually¬†looking.</em></p><p>They found that PluginRegistry already had methods for getting plugins, listing them, filtering by capability. The interface from GREAT-3A already included initialization and shutdown lifecycle hooks. Even the auto-registration pattern‚Äîwhere importing a plugin file automatically registers it‚Äîwould work with dynamic imports using Python&#39;s importlib.</p><p>In other words, most of the infrastructure was already there. We just needed discovery and configuration.</p><p>That‚Äôs 42 minutes that didn‚Äôt show up in the ‚Äúimplementation time‚Äù metrics. It‚Äôs also why the implementation didn‚Äôt hit any surprises.</p><p>There are so many bromides from traditional crafts that apply here, with perhaps the most ancient of them being: ‚Äúmeasure twice, cut¬†once.‚Äù</p><h3>The Chief Architect‚Äôs invisible guardrails</h3><p>At 2:17 PM, Lead Developer presented a choice: put plugin configuration in a separate config/plugins.yaml file (clean, standard) or embed it in the existing config/PIPER.user.md (maintaining Wednesday&#39;s &quot;single config file&quot; unification).</p><p>Chief Architect recommended Option B without hesitation: ‚ÄúMaintains GREAT-3A‚Äôs config unification. Single file for all configuration. Architectural consistency.‚Äù</p><p>That one decision meant we didn‚Äôt spend Friday debugging why some configuration lived in YAML and some in Markdown, or why plugin settings seemed to ignore the main config file. It meant the configuration system <em>worked</em> because it used the same pattern everything else already¬†used.</p><p>None of those nightmares we ran into at AOL in the latters days of AIM (AOL Instant Messenger), where the code was like nine-dimensional spaghetti after ten plus years of architectural bolt-ons.</p><p>These aren‚Äôt the decisions that show up in blog posts about architecture. They‚Äôre the decisions that mean blog posts <em>don‚Äôt need to be written</em> about why things¬†broke.</p><h3>When parallel becomes sequential</h3><p>The phase structure showed something interesting about coordination:</p><p><strong>Phase 0</strong> (Investigation): Both agents worked simultaneously‚Ää‚Äî‚ÄäCode analyzing the auto-registration pattern and config structure, Cursor examining the web app loading flow. 28 minutes + 14 minutes of parallel investigation.</p><p><strong>Phases 1‚Äì4</strong> (Implementation): Strictly sequential. Code built discovery (Phase 1), <em>then</em> Cursor built dynamic loading using that discovery (Phase 2), <em>then</em> Code built config integration (Phase 3), <em>then</em> Cursor updated the web app to use it all (Phase¬†4).</p><p>Sometimes I can let the agents run in parallel. One writes code, the other tests. Or they can work on different layers of a system. But other times it‚Äôs best to set up a relay¬†race.</p><p>Each phase depended on the previous phase being <em>actually done</em>. Not ‚Äúmostly done‚Äù or ‚Äúwe‚Äôll fix it later‚Äù but done-done: tested, documented, committed.</p><p>With the help of the Lead Developer, I managed those handoffs in real-time, deploying agents with specific prompts that said ‚Äúhere‚Äôs what Phase N created, here‚Äôs what Phase N+1 needs to build on it.‚Äù No agents waiting idle for work. No agents blocked on unclear dependencies. Just: investigation ‚Üí foundation ‚Üí integration ‚Üí application ‚Üí validation.</p><p>The whole implementation sequence took 76 minutes of agent time across both programmers.</p><h3>The measurement theater¬†problem</h3><p>At 2:54 PM, Lead Developer added a note to its session log based on my observations:</p><blockquote><strong><em>Methodological Observation</em></strong><em>: Agent prompts and templates contain time estimates that create false precision and expectations. Current pattern: Prompts say ‚ÄúEstimated: 45 minutes‚Äù, agents report ‚Äú28 minutes (38% faster than estimated)‚Äù, creates unnecessary time accounting overhead.</em></blockquote><blockquote><strong><em>Recommendation</em></strong><em>: Remove all time references. Focus on deliverables and success criteria only. What matters is quality and completeness, not speed¬†metrics.</em></blockquote><p>This is the kind of observation you only make when things are going <em>well</em>. When you‚Äôre firefighting, nobody stops to question whether time estimates are useful. But when a phase finishes ‚Äú38% faster than estimated,‚Äù what does that number actually¬†mean?</p><p>Nothing, it turns out. Or rather, it measures the wrong¬†thing.</p><p>The time that mattered wasn‚Äôt ‚Äúhow fast did we implement Phase 2.‚Äù It was ‚Äúhow much time did we <em>not spend</em> on Friday debugging why plugin loading broke in production.‚Äù</p><h3>What ‚Äúfast‚Äù actually means¬†here</h3><p>The omnibus log* for October 3 shows total elapsed time of about 4 hours from ‚ÄúLead Developer starts‚Äù to ‚ÄúGREAT-3B complete.‚Äù But that includes:</p><ul><li>Strategic decision discussions with Chief Architect</li><li>Me being unavailable for an hour for an all hands¬†meeting.</li><li>Documentation updates and git¬†commits</li><li>Creating the comprehensive handoff materials</li></ul><p>The actual building‚Ää‚Äî‚Ääwriting code, updating tests, integrating components‚Ää‚Äî‚Ääwas 76 minutes across two agents working in sequence.</p><p>But calling this ‚Äúfast‚Äù misses the point. We didn‚Äôt <em>speed up</em> the development process. We stopped creating problems that needed fixing¬†later.</p><p>Here‚Äôs what we didn‚Äôt do¬†Friday:</p><ul><li>Debug why tests passed locally but failed in¬†CI</li><li>Investigate why disabling a plugin broke unrelated features</li><li>Fix imports that worked yesterday but mysteriously stopped¬†working</li><li>Refactor code written too quickly to be maintainable</li><li>Write apologetic commit messages about ‚Äútemporary fixes‚Äù</li></ul><p>None of that is ‚Äúfast.‚Äù It‚Äôs just unbroken.</p><p><em>(* I‚Äôve started having my doc assistant digest all the agent logs for a work session into a single ‚Äúomnibus‚Äù timeline, to show the consolidated dance and remove redundancy)</em></p><h3>The eeriness of drama-free work</h3><p>We didn‚Äôt miss anything. Friday‚Äôs work succeeded because:</p><ul><li>Wednesday‚Äôs GREAT-3A work had already unified the plugin interfaces</li><li>Phase ‚àí1 verified assumptions instead of making¬†them</li><li>Chief Architect made architectural decisions that prevented future¬†problems</li><li>Lead Developer orchestrated careful sequential dependencies</li><li>Both programming agents had clear success criteria for each¬†phase</li></ul><p>The ‚Äúeerie calm‚Äù isn‚Äôt luck. It‚Äôs what systematic work actually looks like when methodology isn‚Äôt fighting against¬†itself.</p><h3>What this taught us about technical debt you don‚Äôt¬†create</h3><p>Technical debt is usually described as the cost of going fast now and paying later. But there‚Äôs an invisible category: the technical debt you <em>don‚Äôt create</em> by working carefully upfront.</p><p>That debt doesn‚Äôt show up in any metrics. You can‚Äôt measure the bugs you didn‚Äôt have to fix or the refactoring you didn‚Äôt need to do. The only evidence is days like Friday where major changes just‚Ä¶¬†work.</p><p>In a way this reminds me of the often invisible glue work product managers (and many UX leaders) provide to teams, solving issues, making connections, anticipating issues, coming up with plans. When done well, many problems never materialize, robbing us of the heroic satisfaction of dragonslaying in favor of ho-hum competence.</p><p>The Lead Developer‚Äôs time estimation observation points at something deeper: we‚Äôre measuring the wrong things. ‚ÄúHow fast did we ship?‚Äù is less interesting than ‚ÄúHow often do we have to go back and fix what we shipped?‚Äù</p><p>Friday‚Äôs 76 minutes of implementation didn‚Äôt need a follow-up Saturday of debugging because the investigation, planning, and architectural decisions happened first. The methodology didn‚Äôt skip steps to save time‚Ää‚Äî‚Ääit did the work in the right order so that time spent stayed¬†spent.</p><h3>The foundation for what comes¬†next</h3><p>GREAT-3B is complete. The plugin system can now discover available plugins, load only enabled ones, handle missing plugins gracefully, and let operators control the whole thing through configuration without touching¬†code.</p><p>More importantly: it‚Äôs <em>boring</em>. No clever hacks. No special cases. No ‚Äúthis works but I‚Äôm not sure why‚Äù code. Just a straightforward implementation of discovery, loading, and configuration that does exactly what it claims to¬†do.</p><p>Which means GREAT-3C‚Ää‚Äî‚Ääin which we will document the wrapper pattern documented as intentional architecture, make a developer guide complete with examples, create a test a template plugin, ensure all 4 existing plugins have version metadata, make an architecture diagram to show plugin-router relationship, and document the migration path documented for future‚Ää‚Äî‚Ääcan build on this without first having to fix Friday‚Äôs shortcuts.</p><p>That‚Äôs what drama-free development actually purchases: tomorrow‚Äôs problems don‚Äôt include cleaning up yesterday‚Äôs messes.</p><p><em>Next on Building Piper Morgan: Three Days to Production, or When Steady Momentum Beats Racing¬†Ahead.</em></p><p><em>Have you ever shipped something that worked so well it felt suspicious? What did you find when you looked for the¬†catch?</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b859b2b9de2f" width="1" height="1" alt=""><hr><p><a href="https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f">The Day Everything Went Right: When Fast Means Unbroken</a> was originally published in <a href="https://medium.com/building-piper-morgan">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>f:["$","$L1a",null,{"post":{"title":"The Day Everything Went Right: When Fast Means Unbroken","excerpt":"‚ÄúMornin‚Äô boss!‚ÄùOctober 3At 4:50 PM on Friday, my Lead Developer ‚Äî Claude Sonnet 4.5, if we‚Äôre being formal ‚Äî sent me the completion summary for GREAT-3B. The numbers looked almost suspicious: 48 tests passing, zero breaking changes, about 90 minutes of actual implementation time spread across two...","url":"/blog/the-day-everything-went-right-when-fast-means-unbroken","publishedAt":"Oct 10, 2025","publishedAtISO":"Fri, 10 Oct 2025 14:09:55 GMT","author":"christian crumlish","readingTime":"5 min read","tags":["Building in Public"],"guid":"https://medium.com/p/b859b2b9de2f","featuredImage":"https://cdn-images-1.medium.com/max/1024/1*Tmfjf6aZvJjZORv3g6V_xg.png","fullContent":"$1b","subtitle":"","canonicalLink":"https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f?source=rss----982e21163f8b---4","thumbnail":"/assets/blog-images/b859b2b9de2f-featured.png","slug":"the-day-everything-went-right-when-fast-means-unbroken","workDate":"Oct 10, 2025","workDateISO":"2025-10-10T00:00:00.000Z","category":"building","cluster":"reflection-evolution"},"content":{"title":"The Day Everything Went Right: When Fast Means Unbroken","subtitle":"","content":"$1c","author":"christian crumlish","canonicalLink":"https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f?source=rss----982e21163f8b---4","publishedDate":"2025-10-10T14:09:55.000Z","filename":"rss-b859b2b9de2f.html"}}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
1d:I[8175,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"The Day Everything Went Right: When Fast Means Unbroken | Piper Morgan"}],["$","meta","1",{"name":"author","content":"Christian Crumlish"}],["$","meta","2",{"name":"keywords","content":"AI,Product Management,Methodology,Building in Public"}],["$","meta","3",{"name":"creator","content":"Christian Crumlish"}],["$","meta","4",{"name":"publisher","content":"Christian Crumlish"}],["$","meta","5",{"name":"robots","content":"index, follow"}],["$","meta","6",{"name":"googlebot","content":"index, follow"}],["$","link","7",{"rel":"canonical","href":"https://pipermorgan.ai/"}],["$","meta","8",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","9",{"property":"og:title","content":"The Day Everything Went Right: When Fast Means Unbroken"}],["$","meta","10",{"property":"og:image","content":"https://pipermorgan.ai/assets/blog-images/b859b2b9de2f-featured.png"}],["$","meta","11",{"property":"og:type","content":"article"}],["$","meta","12",{"property":"article:author","content":"christian crumlish"}],["$","meta","13",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","14",{"name":"twitter:title","content":"The Day Everything Went Right: When Fast Means Unbroken"}],["$","meta","15",{"name":"twitter:image","content":"https://pipermorgan.ai/assets/blog-images/b859b2b9de2f-featured.png"}],["$","link","16",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x33"}],["$","link","17",{"rel":"icon","href":"/favicon.ico","sizes":"32x32","type":"image/x-icon"}],["$","link","18",{"rel":"icon","href":"/pm-favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","19",{"rel":"icon","href":"/pm-favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","20",{"rel":"icon","href":"/pm-favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","21",{"rel":"apple-touch-icon","href":"/pm-favicon-180.png","sizes":"180x180","type":"image/png"}],["$","link","22",{"rel":"icon","href":"/pm-favicon-192.png","sizes":"192x192","type":"image/png"}],["$","$L1d","23",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
