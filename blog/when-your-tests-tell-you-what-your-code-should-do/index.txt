1:"$Sreact.fragment"
8:I[8393,[],""]
:HL["/_next/static/css/f9342e94655f11e9.css","style"]
2:T1313,
            :root{--primary-teal:#2DD4BF;--primary-teal-text:#0D9488;--text-dark:#1F2937;--text-light:#6B7280;--background:#FFFFFF;--surface:#F9FAFB}
            .dark{--text-dark:#F1F5F9;--text-light:#94A3B8;--background:#0F172A;--surface:#1E293B}
            @font-face{font-family:'Inter';src:url('/fonts/inter-latin.woff2') format('woff2');font-weight:100 900;font-style:normal;font-display:swap;unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            *{box-sizing:border-box}
            html{scroll-behavior:smooth;font-size:16px;margin:0;padding:0;border:none;outline:none}
            body{background:var(--background);color:var(--text-dark);font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell',sans-serif;line-height:1.6;margin:0;padding:0;border:none;outline:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
            nav{border:none !important;outline:none !important}
            h1,h2,h3,h4,h5,h6{font-family:'Hoss Round','Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif}
            p,span{max-width:75ch;line-height:1.7}
            .text-content div{max-width:75ch;line-height:1.7}
            .text-content{max-width:65ch}
            @media (max-width:640px){
              h1{font-size:1.75rem;line-height:1.2}
              h2{font-size:1.25rem;line-height:1.3}
              h3{font-size:1.1rem;line-height:1.4}
              h4{font-size:1rem;line-height:1.4}
            }
            @media (min-width:641px) and (max-width:768px){
              h1{font-size:2rem;line-height:1.2}
              h2{font-size:1.5rem;line-height:1.3}
              h3{font-size:1.25rem;line-height:1.4}
            }
            @media (prefers-reduced-motion: reduce){
              *{animation-duration:0.01ms !important;animation-iteration-count:1 !important;transition-duration:0.01ms !important}
            }
            a:hover{color:#0D9488;transition:color 0.2s ease}
            .hover-lift:hover{transform:translateY(-2px);transition:transform 0.2s ease}
            button:focus,a:focus{outline:2px solid #2DD4BF;outline-offset:2px;border-radius:4px}
            .skip-to-content{position:absolute;top:-100px;left:0;z-index:999;padding:8px 16px;background:#1F2937;color:white;text-decoration:none;border-radius:0 0 4px 0;transition:top 0.3s}
            .skip-to-content:focus{top:0;outline:2px solid #2DD4BF;outline-offset:2px}
            .section-spacing{margin-bottom:4rem}
            .component-spacing{margin-bottom:1.5rem}
            .micro-spacing{margin-bottom:0.5rem}
            @media (min-width:768px){
              .section-spacing{margin-bottom:6rem}
              .component-spacing{margin-bottom:2rem}
            }
            .site-container{width:100%;max-width:1200px;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
            @media (min-width:640px){.site-container{padding-left:1.5rem;padding-right:1.5rem}}
            @media (min-width:768px){.site-container{padding-left:2rem;padding-right:2rem}}
            @media (min-width:1024px){.site-container{max-width:1200px}}
            @media (min-width:1200px){.site-container{max-width:1200px}}
            .section-padding{padding-top:4rem;padding-bottom:4rem}
            @media (min-width:768px){.section-padding{padding-top:5rem;padding-bottom:5rem}}
            .mx-auto{margin-left:auto;margin-right:auto}
            .max-w-4xl{max-width:56rem}
            .pt-16{padding-top:4rem}
            .pb-8{padding-bottom:2rem}
            .px-4{padding-left:1rem;padding-right:1rem}
            .mb-6{margin-bottom:1.5rem}
            .mb-8{margin-bottom:2rem}
            .text-left{text-align:left}
            .text-center{text-align:center}
            .text-primary-teal-text{color:#0F766E}
            .text-text-dark{color:#1F2937}
            .text-text-light{color:#6B7280}
            .font-bold{font-weight:700}
            .text-4xl{font-size:2.25rem;line-height:2.5rem}
            .text-5xl{font-size:3rem;line-height:1}
            .text-6xl{font-size:3.75rem;line-height:1}
            .text-lg{font-size:1.125rem;line-height:1.75rem}
            .text-xl{font-size:1.25rem;line-height:1.75rem}
            .leading-tight{line-height:1.25}
            .leading-relaxed{line-height:1.625}
            .min-h-screen{min-height:100vh}
            @media (min-width:768px){
              .md\:pt-24{padding-top:6rem}
              .md\:pb-12{padding-bottom:3rem}
              .md\:text-5xl{font-size:3rem;line-height:1}
              .md\:text-xl{font-size:1.25rem;line-height:1.75rem}
            }
            @media (min-width:1024px){
              .lg\:text-6xl{font-size:3.75rem;line-height:1}
            }
          0:{"P":null,"b":"_u9fLnF4eSiN3NagRoSyu","p":"","c":["","blog","when-your-tests-tell-you-what-your-code-should-do",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","when-your-tests-tell-you-what-your-code-should-do","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f9342e94655f11e9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"font-inter","children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                const theme = localStorage.getItem('theme') ||\n                  (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n                if (theme === 'dark') {\n                  document.documentElement.classList.add('dark');\n                  document.body.classList.add('dark');\n                }\n              })();\n            "}}],["$","link",null,{"rel":"dns-prefetch","href":"//pipermorgan.ai"}],["$","link",null,{"rel":"preconnect","href":"https://pipermorgan.ai"}],["$","link",null,{"rel":"preload","as":"image","href":"/assets/pm-logo.png"}],["$","link",null,{"rel":"preload","href":"/fonts/inter-latin.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preload","href":"/fonts/HossRound-Regular.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","style",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]]}],"$L3"]}]]}],{"children":["blog","$L4",{"children":[["slug","when-your-tests-tell-you-what-your-code-should-do","d"],"$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[9119,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"ClientLayout"]
a:I[7555,[],""]
b:I[1295,[],""]
c:I[6874,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","144","static/chunks/144-1b443e029a921717.js","674","static/chunks/674-1d7d34e8b36e9d1f.js","831","static/chunks/app/blog/page-666765c672eae567.js"],""]
10:I[9665,[],"OutletBoundary"]
12:I[4911,[],"AsyncMetadataOutlet"]
14:I[9665,[],"ViewportBoundary"]
16:I[9665,[],"MetadataBoundary"]
17:"$Sreact.suspense"
3:["$","body",null,{"className":"font-sans antialiased","children":[["$","$L9",null,{"children":["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen","children":["$","div",null,{"className":"site-container max-w-4xl pt-16 md:pt-24 pb-8 md:pb-12 text-center","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-8xl md:text-9xl font-bold text-primary-teal-text mb-4","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-semibold text-text-dark mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-xl text-text-light leading-relaxed max-w-2xl mx-auto","children":"Looks like this page got lost in the AI training data. Don't worry ‚Äì even the best algorithms make mistakes sometimes."}]]}],["$","div",null,{"className":"mb-12","children":[["$","h3",null,{"className":"text-xl font-semibold text-text-dark mb-6","children":"Where would you like to go instead?"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-6 max-w-2xl mx-auto","children":[["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üè† Homepage"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Start from the beginning of our AI PM journey"}]]}],["$","$Lc",null,{"href":"/how-it-works","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"‚öôÔ∏è How It Works"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Discover our AI-powered product management methodology"}]]}]]}],["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/what-weve-learned","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üí° What We've Learned"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Building-in-public insights and breakthroughs"}]]}],["$","$Lc",null,{"href":"/blog","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üìù Journey"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Follow our building-in-public blog posts"}]]}],["$","$Lc",null,{"href":"/get-involved","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üöÄ Get Involved"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Join our community and stay updated"}]]}]]}]]}]]}],["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-text-light mb-6","children":"Still can't find what you're looking for?"}],["$","$Lc",null,{"href":"/get-involved","className":"inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:transform-none bg-primary-teal text-white hover:bg-teal-600 focus:ring-primary-teal shadow-component hover:shadow-component-hover hover:-translate-y-0.5 hover:scale-105 font-bold text-lg px-8 py-4 text-lg rounded-button","aria-label":"$undefined","children":[false,"Get Help & Stay Updated"]}]]}],["$","div",null,{"className":"mt-12 p-6 bg-gray-50 rounded-card max-w-lg mx-auto","children":["$","p",null,{"className":"text-sm text-text-light italic","children":["üí¨ ","$Ld"," \"Even the most sophisticated neural networks occasionally return null. Let's navigate back to more productive paths together!\""]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],"$Le"]}]
4:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
5:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],null],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[9795,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"default"]
d:["$","strong",null,{"children":"Piper Morgan says:"}]
e:["$","$L19",null,{}]
1a:I[7887,["874","static/chunks/874-668c89038fa04eb8.js","953","static/chunks/app/blog/%5Bslug%5D/page-63f1c4c60df8aece.js"],"BlogPostContent"]
1b:T360c,<section name="6cb0" class="section section--body section--first"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h3 name="0cdf" id="0cdf" class="graf graf--h3 graf--leading graf--title">When Your Tests Tell You What Your Code Should¬†Do</h3><figure name="c7cd" id="c7cd" class="graf graf--figure graf--startsWithDoubleQuote graf-after--h3"><img class="graf-image" data-image-id="1*B0ieODRpd1YHfw4S0XySSA.png" data-width="1536" data-height="1024" data-is-featured="true" src="https://cdn-images-1.medium.com/max/800/1*B0ieODRpd1YHfw4S0XySSA.png"><figcaption class="imageCaption">‚ÄúYou can do¬†it!‚Äù</figcaption></figure><p name="7d2c" id="7d2c" class="graf graf--p graf-after--figure"><em class="markup--em markup--p-em">June 27</em></p><p name="60d7" id="60d7" class="graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--p"><span class="graf-dropCap">We</span> were down to just two failing tests out of 64, and my first instinct was what it always is when tests fail after escaping a crisis: these tests must be wrong.</p><p name="e647" id="e647" class="graf graf--p graf-after--p">I mean, it made sense. We‚Äôd just come through the 48-hour rollercoaster‚Ää‚Äî‚Ääthat epic journey to complete disaster and back with from ‚ÄúLIFE SAVER¬†!!!‚Äù redemption. The system was working. File uploads were processing. Analysis was running end-to-end. Surely a couple of stubborn test failures were just‚Ä¶ artifacts from the chaos.</p><p name="0c7e" id="0c7e" class="graf graf--p graf-after--p">Turns out, the tests weren‚Äôt wrong. They were trying to teach me about my own architecture.</p><h3 name="e1fd" id="e1fd" class="graf graf--h3 graf-after--p">Coming back from¬†chaos</h3><p name="9427" id="9427" class="graf graf--p graf-after--h3">After the 48-hour rollercoaster, we had msfr this beautiful recovery: 64 tests, clean architecture, everything working. But when I ran the full suite, 2 tests were still failing in the DocumentAnalyzer.</p><p name="98f2" id="98f2" class="graf graf--p graf-after--p">Classic developer reaction: ‚ÄúWell, those tests are probably just outdated expectations from before we fixed everything.‚Äù</p><p name="cecc" id="cecc" class="graf graf--p graf-after--p">The failing tests were complaining that DocumentAnalyzer was throwing FileAnalysisError exceptions instead of returning AnalysisResult objects with error metadata. My first thought? ‚ÄúThese tests just haven‚Äôt been updated to match our new exception-handling approach.‚Äù</p><p name="ddbe" id="ddbe" class="graf graf--p graf-after--p">So I started to ‚Äúfix‚Äù the tests. (Always a bad instinct.)</p><h3 name="d55c" id="d55c" class="graf graf--h3 graf-after--p">The moment everything clicked</h3><p name="22b5" id="22b5" class="graf graf--p graf-after--h3">But then I did something I don‚Äôt always remember to do: I looked at the <em class="markup--em markup--p-em">other</em> analyzers to see what pattern they were actually following (OK, I asked Cursor to look and tell me).</p><ul class="postList"><li name="65fd" id="65fd" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">CSVAnalyzer: </strong>Returns AnalysisResult with error info in metadata.</li><li name="17d1" id="17d1" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">TextAnalyzer: </strong>Returns AnalysisResult with error info in metadata.</li><li name="dbfd" id="dbfd" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">DocumentAnalyzer: </strong>Throws FileAnalysisError exceptions.</li></ul><p name="38b3" id="38b3" class="graf graf--p graf-after--li">Hmm.</p><p name="0f92" id="0f92" class="graf graf--p graf-after--p">One of these things was not like the others.</p><p name="e3af" id="e3af" class="graf graf--p graf-after--p">That‚Äôs when it hit me: the tests weren‚Äôt wrong about what they expected. DocumentAnalyzer was doing it wrong.</p><h3 name="83a9" id="83a9" class="graf graf--h3 graf-after--p">Tests as architectural documentation</h3><p name="1711" id="1711" class="graf graf--p graf-after--h3">Here‚Äôs what I learned from those two ‚Äúfailing‚Äù tests: they weren‚Äôt testing what the code currently did. They were documenting what the code <em class="markup--em markup--p-em">should</em> do according to our domain model.</p><p name="17d6" id="17d6" class="graf graf--p graf-after--p">The AnalysisResult domain object was designed with a clear contract: analyzers always return results, with errors going into the metadata field. Never throw exceptions. <strong class="markup--strong markup--p-strong">Always return something useful.</strong></p><p name="7c97" id="7c97" class="graf graf--p graf-after--p">CSVAnalyzer and TextAnalyzer were following this contract perfectly. But somewhere along the way‚Ää‚Äî‚Ääprobably during one of those frantic ‚Äúlet‚Äôs just get this working‚Äù moments‚Ää‚Äî‚Ääsomeone (okay, it was probably me) had allowed DocumentAnalyzer to throw exceptions instead.</p><p name="cf1b" id="cf1b" class="graf graf--p graf-after--p">The tests were trying to tell me: ‚ÄúHey, you have a domain contract here. DocumentAnalyzer is violating it.‚Äù</p><h3 name="fb2a" id="fb2a" class="graf graf--h3 graf-after--p">When code drifts from intention</h3><p name="07da" id="07da" class="graf graf--p graf-after--h3">This is one of those subtle ways systems drift from their original intentions. It‚Äôs not dramatic architectural decay‚Ää‚Äî‚Ääit‚Äôs just inconsistency. One component doing things slightly differently from its siblings.</p><p name="173a" id="173a" class="graf graf--p graf-after--p">But that inconsistency compounds. Today it‚Äôs ‚ÄúDocumentAnalyzer throws exceptions while everyone else returns error metadata.‚Äù Tomorrow it‚Äôs ‚Äúwell, some analyzers throw exceptions, so I guess PDFAnalyzer can too.‚Äù Before you know it, your error handling is a mess and nobody remembers what the original pattern was supposed to be.</p><p name="65f5" id="65f5" class="graf graf--p graf-after--p">Mind you, this kind of drift happens to everyone. Especially when you‚Äôre moving fast, fixing urgent issues, or trying to get something working after a crisis. The question is whether you catch it before it spreads.</p><h3 name="ef02" id="ef02" class="graf graf--h3 graf-after--p">The beauty of domain contracts</h3><p name="e5c2" id="e5c2" class="graf graf--p graf-after--h3">What struck me about this whole episode was how clear the domain contract actually was, once I paid attention to it.</p><p name="4f99" id="4f99" class="graf graf--p graf-after--p">AnalysisResult was designed to <em class="markup--em markup--p-em">always</em> be returned. Success or failure, you get an AnalysisResult object. If something went wrong, the error information goes in the metadata field, but you still get a proper result object with whatever analysis could be completed.</p><p name="f271" id="f271" class="graf graf--p graf-after--p">This isn‚Äôt just a nice-to-have pattern. It‚Äôs what allows the rest of the system to handle analysis results consistently, regardless of which analyzer produced them or whether everything went perfectly.</p><p name="5cfe" id="5cfe" class="graf graf--p graf-after--p">When DocumentAnalyzer started throwing exceptions instead, it broke that contract. The calling code had to start handling two different error patterns: sometimes you get an AnalysisResult with error metadata, sometimes you get an exception. That‚Äôs cognitive overhead for every developer who touches the code.</p><h3 name="c154" id="c154" class="graf graf--h3 graf-after--p">Following the test¬†guidance</h3><p name="9a3c" id="9a3c" class="graf graf--p graf-after--h3">So instead of changing the tests to match the exception-throwing behavior, I changed DocumentAnalyzer to honor the domain contract.</p><p name="47d2" id="47d2" class="graf graf--p graf-after--p">The fix was straightforward: wrap the analysis logic in try-catch, and when things go wrong, return an AnalysisResult with the error information in metadata instead of throwing the exception.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="python" name="e566" id="e566" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Before: Contract violation</span><br /><span class="hljs-keyword">if</span> analysis_failed:<br />    <span class="hljs-keyword">raise</span> FileAnalysisError(<span class="hljs-string">&quot;Analysis failed&quot;</span>)<br /><br /><span class="hljs-comment"># After: Honoring domain contract  </span><br /><span class="hljs-keyword">if</span> analysis_failed:<br />    <span class="hljs-keyword">return</span> AnalysisResult(<br />        content_type=<span class="hljs-string">&quot;document&quot;</span>,<br />        metadata={<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Analysis failed&quot;</span>}<br />    )</span></pre><p name="25bd" id="25bd" class="graf graf--p graf-after--pre">The moment I made that change: 64/64 tests passing.</p><h3 name="aa45" id="aa45" class="graf graf--h3 graf-after--p">Tests as conversation partners</h3><p name="2d37" id="2d37" class="graf graf--p graf-after--h3">What this experience taught me is that tests can be conversation partners in architectural decisions, not just validators of current behavior.</p><p name="db49" id="db49" class="graf graf--p graf-after--p">When tests fail, especially after a period of rapid change, the question isn‚Äôt just ‚Äúwhat do I need to change to make this pass?‚Äù It‚Äôs ‚Äúwhat is this test trying to tell me about my system‚Äôs intentions?‚Äù</p><p name="8cd5" id="8cd5" class="graf graf--p graf-after--p">Those two ‚Äúfailing‚Äù tests weren‚Äôt obstacles to overcome. They were documentation of a better way to structure error handling across the analysis layer. They were architectural guidance disguised as test failures.</p><h3 name="a15a" id="a15a" class="graf graf--h3 graf-after--p">The larger¬†pattern</h3><p name="de5e" id="de5e" class="graf graf--p graf-after--h3">This connects to something larger about how tests function in a mature codebase. Good tests don‚Äôt just verify that code works‚Ää‚Äî‚Ääthey document what ‚Äúworking‚Äù means according to your system‚Äôs design principles.</p><p name="6bc8" id="6bc8" class="graf graf--p graf-after--p">When you write tests, you‚Äôre not just checking current behavior. You‚Äôre encoding architectural intentions. You‚Äôre creating a conversation between your current understanding and your future self‚Äôs implementation decisions.</p><p name="d85e" id="d85e" class="graf graf--p graf-after--p">The pattern recognition‚Ää‚Äî‚Ääseeing that DocumentAnalyzer was the outlier‚Ää‚Äî‚Ääcame from slowing down enough to actually look at what the tests were expecting versus what the code was doing.</p><h3 name="4782" id="4782" class="graf graf--h3 graf-after--p">When to trust your¬†tests</h3><p name="7c8e" id="7c8e" class="graf graf--p graf-after--h3">So when should you trust your tests over your code? Here are some signals I‚Äôve learned to watch for:</p><p name="7578" id="7578" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Trust tests when</strong>: They‚Äôre checking domain contracts, not just implementation details. When multiple similar components follow one pattern and one outlier follows another. When tests are failing after rapid changes or crisis periods.</p><p name="4c76" id="4c76" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Question tests when</strong>: They‚Äôre testing implementation details that could reasonably change. When they‚Äôre checking specific error messages instead of error handling patterns. When they were written for a different phase of the project‚Äôs evolution.</p><p name="0bcf" id="0bcf" class="graf graf--p graf-after--p">The key is learning to distinguish between tests that encode architectural wisdom and tests that encode temporary implementation choices.</p><h3 name="1cac" id="1cac" class="graf graf--h3 graf-after--p">The 64/64¬†moment</h3><p name="975c" id="975c" class="graf graf--p graf-after--h3">There‚Äôs something satisfying about seeing 64/64 tests pass after making an architectural decision based on test guidance. It‚Äôs not just ‚Äúyay, green checkmarks.‚Äù It‚Äôs validation that your system has a coherent design philosophy, and that your tests are documenting it accurately.</p><p name="312a" id="312a" class="graf graf--p graf-after--p">That moment when DocumentAnalyzer fell into line with the established pattern, and suddenly all the error handling across the analysis layer was consistent‚Ää‚Äî‚Ääthat‚Äôs what good architecture feels like. Not perfect code, but <em class="markup--em markup--p-em">coherent</em> code.</p><h3 name="0731" id="0731" class="graf graf--h3 graf-after--p">Listening to your¬†codebase</h3><p name="4d25" id="4d25" class="graf graf--p graf-after--h3">The broader lesson here is about listening to your codebase. Tests are one way it talks to you. Patterns across similar components are another. Inconsistencies that make you pause and think ‚Äúwait, why does this one work differently?‚Äù‚Ää‚Äî‚Ääthose are conversations waiting to happen.</p><p name="7503" id="7503" class="graf graf--p graf-after--p">Your codebase is constantly trying to tell you about its own design principles. Sometimes through test failures. Sometimes through code that feels awkward to write. Sometimes through inconsistencies that make onboarding new team members harder than it should be.</p><p name="3031" id="3031" class="graf graf--p graf-after--p graf--trailing">The trick is slowing down enough to listen.</p></div></div>f:["$","$L1a",null,{"post":{"title":"When Your Tests Tell You What Your Code Should Do","excerpt":"","url":"/blog/when-your-tests-tell-you-what-your-code-should-do","publishedAt":"Invalid Date","publishedAtISO":"","author":"christian crumlish","readingTime":"5 min read","tags":["Building in Public"],"guid":"https://medium.com/building-piper-morgan/c00a94c09c2c","featuredImage":"/assets/blog-images/c00a94c09c2c-featured.webp","slug":"when-your-tests-tell-you-what-your-code-should-do","category":"building","workDate":"Jun 27, 2025","workDateISO":"2025-06-27T00:00:00.000Z","cluster":"production-transformation","chatDate":"7/20/2025","featured":false},"content":{"title":"When Your Tests Tell You What Your Code Should Do","subtitle":"June 27","content":"$1b","author":"christian crumlish","canonicalLink":"","publishedDate":"2025-07-29T13:18:40.812Z","filename":"2025-07-29_When-Your-Tests-Tell-You-What-Your-Code-Should-Do-c00a94c09c2c.html"}}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
1c:I[8175,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"When Your Tests Tell You What Your Code Should Do | Piper Morgan"}],["$","meta","1",{"name":"description","content":"June 27"}],["$","meta","2",{"name":"author","content":"Christian Crumlish"}],["$","meta","3",{"name":"keywords","content":"AI,Product Management,Methodology,Building in Public"}],["$","meta","4",{"name":"creator","content":"Christian Crumlish"}],["$","meta","5",{"name":"publisher","content":"Christian Crumlish"}],["$","meta","6",{"name":"robots","content":"index, follow"}],["$","meta","7",{"name":"googlebot","content":"index, follow"}],["$","link","8",{"rel":"canonical","href":"https://pipermorgan.ai/"}],["$","meta","9",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","10",{"property":"og:title","content":"When Your Tests Tell You What Your Code Should Do"}],["$","meta","11",{"property":"og:description","content":"June 27"}],["$","meta","12",{"property":"og:type","content":"article"}],["$","meta","13",{"property":"article:author","content":"christian crumlish"}],["$","meta","14",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","15",{"name":"twitter:title","content":"When Your Tests Tell You What Your Code Should Do"}],["$","meta","16",{"name":"twitter:description","content":"June 27"}],["$","link","17",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x33"}],["$","link","18",{"rel":"icon","href":"/favicon.ico","sizes":"32x32","type":"image/x-icon"}],["$","link","19",{"rel":"icon","href":"/pm-favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","20",{"rel":"icon","href":"/pm-favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","21",{"rel":"icon","href":"/pm-favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","22",{"rel":"apple-touch-icon","href":"/pm-favicon-180.png","sizes":"180x180","type":"image/png"}],["$","link","23",{"rel":"icon","href":"/pm-favicon-192.png","sizes":"192x192","type":"image/png"}],["$","$L1c","24",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
