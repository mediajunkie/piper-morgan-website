1:"$Sreact.fragment"
8:I[8393,[],""]
:HL["/_next/static/css/f9342e94655f11e9.css","style"]
2:T1313,
            :root{--primary-teal:#2DD4BF;--primary-teal-text:#0D9488;--text-dark:#1F2937;--text-light:#6B7280;--background:#FFFFFF;--surface:#F9FAFB}
            .dark{--text-dark:#F1F5F9;--text-light:#94A3B8;--background:#0F172A;--surface:#1E293B}
            @font-face{font-family:'Inter';src:url('/fonts/inter-latin.woff2') format('woff2');font-weight:100 900;font-style:normal;font-display:swap;unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            *{box-sizing:border-box}
            html{scroll-behavior:smooth;font-size:16px;margin:0;padding:0;border:none;outline:none}
            body{background:var(--background);color:var(--text-dark);font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell',sans-serif;line-height:1.6;margin:0;padding:0;border:none;outline:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
            nav{border:none !important;outline:none !important}
            h1,h2,h3,h4,h5,h6{font-family:'Hoss Round','Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif}
            p,span{max-width:75ch;line-height:1.7}
            .text-content div{max-width:75ch;line-height:1.7}
            .text-content{max-width:65ch}
            @media (max-width:640px){
              h1{font-size:1.75rem;line-height:1.2}
              h2{font-size:1.25rem;line-height:1.3}
              h3{font-size:1.1rem;line-height:1.4}
              h4{font-size:1rem;line-height:1.4}
            }
            @media (min-width:641px) and (max-width:768px){
              h1{font-size:2rem;line-height:1.2}
              h2{font-size:1.5rem;line-height:1.3}
              h3{font-size:1.25rem;line-height:1.4}
            }
            @media (prefers-reduced-motion: reduce){
              *{animation-duration:0.01ms !important;animation-iteration-count:1 !important;transition-duration:0.01ms !important}
            }
            a:hover{color:#0D9488;transition:color 0.2s ease}
            .hover-lift:hover{transform:translateY(-2px);transition:transform 0.2s ease}
            button:focus,a:focus{outline:2px solid #2DD4BF;outline-offset:2px;border-radius:4px}
            .skip-to-content{position:absolute;top:-100px;left:0;z-index:999;padding:8px 16px;background:#1F2937;color:white;text-decoration:none;border-radius:0 0 4px 0;transition:top 0.3s}
            .skip-to-content:focus{top:0;outline:2px solid #2DD4BF;outline-offset:2px}
            .section-spacing{margin-bottom:4rem}
            .component-spacing{margin-bottom:1.5rem}
            .micro-spacing{margin-bottom:0.5rem}
            @media (min-width:768px){
              .section-spacing{margin-bottom:6rem}
              .component-spacing{margin-bottom:2rem}
            }
            .site-container{width:100%;max-width:1200px;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
            @media (min-width:640px){.site-container{padding-left:1.5rem;padding-right:1.5rem}}
            @media (min-width:768px){.site-container{padding-left:2rem;padding-right:2rem}}
            @media (min-width:1024px){.site-container{max-width:1200px}}
            @media (min-width:1200px){.site-container{max-width:1200px}}
            .section-padding{padding-top:4rem;padding-bottom:4rem}
            @media (min-width:768px){.section-padding{padding-top:5rem;padding-bottom:5rem}}
            .mx-auto{margin-left:auto;margin-right:auto}
            .max-w-4xl{max-width:56rem}
            .pt-16{padding-top:4rem}
            .pb-8{padding-bottom:2rem}
            .px-4{padding-left:1rem;padding-right:1rem}
            .mb-6{margin-bottom:1.5rem}
            .mb-8{margin-bottom:2rem}
            .text-left{text-align:left}
            .text-center{text-align:center}
            .text-primary-teal-text{color:#0F766E}
            .text-text-dark{color:#1F2937}
            .text-text-light{color:#6B7280}
            .font-bold{font-weight:700}
            .text-4xl{font-size:2.25rem;line-height:2.5rem}
            .text-5xl{font-size:3rem;line-height:1}
            .text-6xl{font-size:3.75rem;line-height:1}
            .text-lg{font-size:1.125rem;line-height:1.75rem}
            .text-xl{font-size:1.25rem;line-height:1.75rem}
            .leading-tight{line-height:1.25}
            .leading-relaxed{line-height:1.625}
            .min-h-screen{min-height:100vh}
            @media (min-width:768px){
              .md\:pt-24{padding-top:6rem}
              .md\:pb-12{padding-bottom:3rem}
              .md\:text-5xl{font-size:3rem;line-height:1}
              .md\:text-xl{font-size:1.25rem;line-height:1.75rem}
            }
            @media (min-width:1024px){
              .lg\:text-6xl{font-size:3.75rem;line-height:1}
            }
          0:{"P":null,"b":"gAx4lSeW_bwWqXKeLfwHO","p":"","c":["","blog","the-great-refactor-six-weeks-in-eighteen-days",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","the-great-refactor-six-weeks-in-eighteen-days","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f9342e94655f11e9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"font-inter","children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                const theme = localStorage.getItem('theme') ||\n                  (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n                if (theme === 'dark') {\n                  document.documentElement.classList.add('dark');\n                  document.body.classList.add('dark');\n                }\n              })();\n            "}}],["$","link",null,{"rel":"dns-prefetch","href":"//pipermorgan.ai"}],["$","link",null,{"rel":"preconnect","href":"https://pipermorgan.ai"}],["$","link",null,{"rel":"preload","as":"image","href":"/assets/pm-logo.png"}],["$","link",null,{"rel":"preload","href":"/fonts/inter-latin.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preload","href":"/fonts/HossRound-Regular.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","style",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]]}],"$L3"]}]]}],{"children":["blog","$L4",{"children":[["slug","the-great-refactor-six-weeks-in-eighteen-days","d"],"$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[9119,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"ClientLayout"]
a:I[7555,[],""]
b:I[1295,[],""]
c:I[6874,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","144","static/chunks/144-1b443e029a921717.js","674","static/chunks/674-0150c45438449857.js","831","static/chunks/app/blog/page-666765c672eae567.js"],""]
10:I[9665,[],"OutletBoundary"]
12:I[4911,[],"AsyncMetadataOutlet"]
14:I[9665,[],"ViewportBoundary"]
16:I[9665,[],"MetadataBoundary"]
17:"$Sreact.suspense"
3:["$","body",null,{"className":"font-sans antialiased","children":[["$","$L9",null,{"children":["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen","children":["$","div",null,{"className":"site-container max-w-4xl pt-16 md:pt-24 pb-8 md:pb-12 text-center","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-8xl md:text-9xl font-bold text-primary-teal-text mb-4","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-semibold text-text-dark mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-xl text-text-light leading-relaxed max-w-2xl mx-auto","children":"Looks like this page got lost in the AI training data. Don't worry ‚Äì even the best algorithms make mistakes sometimes."}]]}],["$","div",null,{"className":"mb-12","children":[["$","h3",null,{"className":"text-xl font-semibold text-text-dark mb-6","children":"Where would you like to go instead?"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-6 max-w-2xl mx-auto","children":[["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üè† Homepage"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Start from the beginning of our AI PM journey"}]]}],["$","$Lc",null,{"href":"/how-it-works","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"‚öôÔ∏è How It Works"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Discover our AI-powered product management methodology"}]]}]]}],["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/what-weve-learned","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üí° What We've Learned"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Building-in-public insights and breakthroughs"}]]}],["$","$Lc",null,{"href":"/blog","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üìù Journey"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Follow our building-in-public blog posts"}]]}],["$","$Lc",null,{"href":"/get-involved","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üöÄ Get Involved"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Join our community and stay updated"}]]}]]}]]}]]}],["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-text-light mb-6","children":"Still can't find what you're looking for?"}],["$","$Lc",null,{"href":"/get-involved","className":"inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:transform-none bg-primary-teal text-white hover:bg-teal-600 focus:ring-primary-teal shadow-component hover:shadow-component-hover hover:-translate-y-0.5 hover:scale-105 font-bold text-lg px-8 py-4 text-lg rounded-button","aria-label":"$undefined","children":[false,"Get Help & Stay Updated"]}]]}],["$","div",null,{"className":"mt-12 p-6 bg-gray-50 rounded-card max-w-lg mx-auto","children":["$","p",null,{"className":"text-sm text-text-light italic","children":["üí¨ ","$Ld"," \"Even the most sophisticated neural networks occasionally return null. Let's navigate back to more productive paths together!\""]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],"$Le"]}]
4:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
5:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],null],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[9795,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"default"]
d:["$","strong",null,{"children":"Piper Morgan says:"}]
e:["$","$L19",null,{}]
1a:I[7887,["874","static/chunks/874-668c89038fa04eb8.js","953","static/chunks/app/blog/%5Bslug%5D/page-63f1c4c60df8aece.js"],"BlogPostContent"]
1b:T42b3,<figure><img alt="A robot wins a race with a humna chering and other robots looking on" src="https://cdn-images-1.medium.com/max/1024/1*efz27rk4UzbkTNLYUaMcgg.png" /><figcaption>‚ÄúYou did¬†it!‚Äù</figcaption></figure><p><em>October 7,¬†2025</em></p><p>Tuesday morning at 7:04 AM, my Chief Architect began planning GREAT-4F‚Ää‚Äî‚Ääthe final piece of intent classification. Improve classifier accuracy to 95%+, document the canonical handler pattern, establish quality gates protecting everything we‚Äôd¬†built.</p><p>One epic remaining after that: GREAT-5, the validation suite that would lock in all achievements from GREAT-1 through¬†GREAT-4.</p><p>By 6:52 PM, both were complete.</p><p>At 7:01 PM, Chief Architect confirmed: ‚ÄúCORE-GREAT ready to close‚Ää‚Äî‚Ääall 5 GREAT epics complete.‚Äù</p><p>September 20 to October 7. Eighteen days. Five major epics estimated at six weeks or more. Production-ready foundation with 142+ tests, 100% passing, comprehensive quality gates operational.</p><p>The pause the precipitated this effort came from one of my lowest points on this project, my I sincerely wondered if this had all been a fascinating waste of my time. Now less than three weeks later I feel more confident than ever that I‚Äôm building something real.</p><p>This is the story of how Tuesday brought another milestone for what four months of systematic work had built toward. Not through heroic effort, but through discovering that most of the work had already been done‚Ää‚Äî‚Ääit just needed the final 5% found, fixed, and validated.</p><h3>The two-minute ADR</h3><p>At 7:51 AM, Code agent deployed to create ADR-039: Canonical Handler Pattern documentation. Estimated time: 20‚Äì30 minutes. Actual time: 2 minutes. Why do they pad these estimates? They know they write fast,¬†right?</p><p>The ADR wasn‚Äôt shorter or lower quality than expected. It was comprehensive: 399 lines documenting the dual-path architecture, explaining when to use canonical handlers versus workflow orchestration, including performance metrics from GREAT-4E, providing troubleshooting guidance.</p><p>What made it fast wasn‚Äôt the agent writing faster. It was the specification being¬†clearer.</p><p>The gameplan didn‚Äôt say ‚Äúwrite an ADR about canonical handlers.‚Äù It¬†said:</p><blockquote><em>Document the dual-path architecture: WHAT (two routing paths exist), WHY (performance vs capability trade-offs), WHEN (which path for which requests), HOW (decision criteria), PERFORMANCE (actual metrics from GREAT-4E benchmarks).</em></blockquote><p>Clear specifications enable speed. When the agent knows exactly what ‚Äúdone‚Äù looks like, implementation becomes straightforward.</p><p>This pattern repeated throughout Tuesday.</p><p>Phase 1 (QUERY fallback patterns): estimated 30‚Äì40 minutes, actual 14 minutes. GREAT-5 Phase 3 (integration tests): estimated 45‚Äì60 minutes, actual 15¬†minutes.</p><p>Not because work was skipped. Because foundations were solid and requirements were¬†clear.</p><h3>The missing definitions</h3><p>At 9:40 AM, Cursor completed Phase 2 of GREAT-4F: enhancing the LLM classifier prompts.</p><p>The discovery was almost embarrassing in its simplicity.</p><p>The classifier prompt didn‚Äôt include definitions for the five canonical categories. This feels like the kind of shortcut/oversight that plagued our coding process for most of the first few¬†months.</p><p>The categories existed. The handlers worked. The routing was correct. The tests all passed. But the LLM classifier‚Ää‚Äî‚Ääthe system that decides which category a natural language query belongs to‚Ää‚Äî‚Äähad never been told what the canonical categories actually¬†were.</p><p>When someone said ‚ÄúWhat day is it?‚Äù the classifier would¬†see:</p><ul><li>Available categories: QUERY, CREATE, UPDATE, SEARCH, EXECUTION, ANALYSIS, SYNTHESIS, STRATEGY, LEARNING, GUIDANCE, UNKNOWN</li><li>Query: ‚ÄúWhat day is¬†it?‚Äù</li><li>Decision: Probably QUERY (default when¬†unsure)</li></ul><p>TEMPORAL didn‚Äôt appear in the options because the prompt never mentioned it¬†existed.</p><p>The fix: Add five lines defining canonical categories in the classifier prompt.</p><p>The impact: +11 to 15 percentage points accuracy improvement.</p><p>PRIORITY went from 85‚Äì95% accuracy to 100% (perfect classification). TEMPORAL jumped to 96.7%. STATUS to 96.7%. All three exceeding the 95%¬†target.</p><p>It‚Äôs a weird feeling to be both annoyed that something so simple was skipped and hiding in plain site as well as relieved and satisfied after fixing¬†it.</p><p>This is the flip side of the ‚Äú75% pattern.‚Äù Sometimes you discover infrastructure is better than expected. Sometimes you discover a simple fix dramatically improves things. But both require actually¬†looking.</p><p>The categories worked in isolation. Unit tests passed. Integration tests with canonical queries worked because those tests bypassed the LLM classifier entirely‚Ää‚Äî‚Ääthey called handlers directly.</p><p>The gap only appeared when testing the full flow: natural language ‚Üí LLM classification ‚Üí canonical handler¬†routing.</p><p>Comprehensive testing reveals assumptions. And sometimes those assumptions are ‚Äúsurely someone told the classifier what these categories mean.‚Äù</p><h3>The permissive test anti-pattern</h3><p>Throughout Tuesday morning, a pattern kept appearing in the test¬†suite:</p><pre># Permissive (accepts both success and failure):<br>assert response.status_code in [200, 404]<br><br># Strict (requires success):<br>assert response.status_code == 200</pre><p>The permissive version accepts both ‚Äúworking correctly‚Äù (200) and ‚Äúendpoint doesn‚Äôt exist‚Äù (404) as valid test passes. When I saw that I was like ‚Äúwait, wat?‚Äù How is ‚Äúendpoint doesn‚Äôt exist‚Äù a success state? Because a reply was returned? Come¬†on!</p><p>GREAT-5 Phase 1 systematically eliminated this pattern. Twelve permissive assertions replaced with strict requirements. The immediate result: tests started¬†failing.</p><p>Good!</p><p>The failures revealed:</p><ul><li><strong>IntentService initialization errors</strong>: Test fixtures weren‚Äôt properly setting up the¬†service</li><li><strong>Two cache endpoint bugs</strong>: AttributeError exceptions in production code</li><li><strong>Health endpoint protection gaps</strong>: Tests accepting failures that would break monitoring</li></ul><p>None of these were caught by permissive tests because permissive tests don‚Äôt catch problems‚Ää‚Äî‚Ääthey hide them. Seriously, who writes permissive tests anyhow? Who trained the LLMs to do¬†that?</p><p>The philosophy difference:</p><ul><li><strong>‚ÄúMake tests pass‚Äù</strong>: Write tests that accept current behavior, even if¬†broken</li><li><strong>‚ÄúMake code work‚Äù</strong>: Write strict tests that force code to meet requirements</li></ul><p>Permissive tests create false confidence. Everything appears to work because tests pass. But the tests are lying‚Ää‚Äî‚Ääthey pass whether code works or¬†not.</p><p>By end of Phase 1, all permissive patterns were eliminated. Tests now enforce actual requirements. Which meant Phase 1 also had to fix the code that failed strict tests‚Ää‚Äî‚Ääincluding two production bugs that had been lurking undetected.</p><p>This is the unglamorous side of quality work. It‚Äôs not adding features. It‚Äôs making tests honest about what they validate.</p><h3>Quality gates as compound¬†momentum</h3><p>GREAT-5‚Äôs goal was establishing additional quality gates protecting all GREAT-1 through GREAT-4 achievements. The existing gates¬†were:</p><ul><li>Intent classification tests</li><li>Performance regression detection</li><li>Coverage enforcement (80%+)</li><li>Bypass detection</li><li>Contract validation</li></ul><p>To this we were now¬†adding:</p><ol><li><strong>Zero-tolerance regression suite</strong>: Critical infrastructure must work, no exceptions</li><li><strong>Integration test coverage</strong>: All 13 intent categories validated end-to-end</li><li><strong>Performance benchmarks</strong>: Lock in 602K req/sec baseline from¬†GREAT-4E</li><li><strong>CI/CD pipeline verification</strong>: 2.5-minute runtime with fail-fast design</li></ol><p>The interesting discovery: most of these already¬†existed.</p><p>CI/CD pipeline? Already excellent, needed zero changes. Performance benchmarks? GREAT-4E had validated them, just needed test suite integration. Load testing? Cache validation tests already proved efficiency.</p><p>What remained¬†was:</p><ul><li>Enhancing regression tests with strict assertions</li><li>Creating comprehensive integration tests</li><li>Fixing the bugs strict tests¬†revealed</li><li>Documenting what quality gates exist and¬†why</li></ul><p>GREAT-5 took 1.8 hours (109 minutes of actual work). Not because the work was small, but because foundations were already¬†solid.</p><p>This is compound momentum visible: each previous epic made this one easier. GREAT-4E‚Äôs performance validation became GREAT-5‚Äôs benchmark baseline. GREAT-3‚Äôs plugin architecture became GREAT-5‚Äôs integration test framework. GREAT-2‚Äôs spatial intelligence became GREAT-5‚Äôs multi-interface validation.</p><p>Nothing built in isolation. Everything building on everything else.</p><h3>The completion moment</h3><p>At 1:15 PM, Chief Architect declared GREAT-4 complete.</p><p>All six sub-epics (4A through 4F) finished. Intent classification system production-ready:</p><ul><li>13/13 categories fully implemented</li><li>95%+ accuracy for core categories</li><li>142+ query variants¬†tested</li><li>Zero timeout errors through graceful¬†fallback</li><li>Sub-millisecond canonical response¬†time</li><li>84.6% cache hit rate with 7.6√ó¬†speedup</li></ul><p>By 6:52 PM, GREAT-5 was complete as¬†well:</p><ul><li>37 tests in comprehensive quality gate¬†suite</li><li>Zero-tolerance regression protection</li><li>Performance baseline locked at 602K¬†req/sec</li><li>All 13 intent categories validated through all interfaces</li><li>CI/CD pipeline verified operational</li></ul><p>Completing an entire fifth epic after finishing the last several issues in the previous epic seems like a leap, but GREAT-5 is about locking down the work of the earlier epics, and it benefited greatly from all the cleanup work that preceded¬†it.</p><p>At 7:01 PM, Chief Architect closed CORE-GREAT: ‚ÄúAll 5 GREAT epics complete.‚Äù</p><p>The timeline:</p><ul><li><strong>GREAT-1</strong> (Orchestration Core): September 20‚Äì27</li><li><strong>GREAT-2</strong> (Integration Cleanup): September 28‚Ää‚Äî‚ÄäOctober¬†1</li><li><strong>GREAT-3</strong> (Plugin Architecture): October¬†2‚Äì4</li><li><strong>GREAT-4</strong> (Intent Universal): October¬†5‚Äì7</li><li><strong>GREAT-5</strong> (Quality Gates): October¬†7</li></ul><p>Total: 18 days from start to production-ready foundation. When the Chief Architect scoped this at six to seven weeks I was hoping (and to be honest, expecting) that it would not take quite that long, but this far exceeded my expectations.</p><h3>What six weeks in eighteen days¬†means</h3><p>I‚Äôm not really talking about working faster and definitely not about cutting corners. This is about systematic work revealing that foundations were stronger than expected.</p><p>The pattern across all five¬†epics:</p><p><strong>Phase ‚àí1 verification</strong> consistently found infrastructure better than assumed. Two-layer caching already operational. Spatial intelligence already integrated. Plugin patterns already proven. Each epic started further along than the gameplan estimated.</p><p><strong>The 75% pattern</strong> appeared repeatedly. Categories implemented, patterns missing. Handlers exist, definitions missing. Tests passing, strictness missing. The missing 25% wasn‚Äôt architecture‚Ää‚Äî‚Ääit was enumeration, documentation, and validation.</p><p><strong>Compound momentum</strong> made each epic faster. GREAT-1‚Äôs orchestration patterns became GREAT-4‚Äôs intent routing. GREAT-2‚Äôs integration cleanup became GREAT-3‚Äôs plugin foundation. GREAT-3‚Äôs plugin architecture became GREAT-4‚Äôs category handlers.</p><p><strong>Autonomous agent work</strong> accelerated when patterns were clear. The 2-minute ADR. The 14-minute QUERY fallback. The 15-minute integration test suite. Not because agents write faster, but because specifications were clearer and foundations were¬†proven.</p><p><strong>Independent validation</strong> caught what automated testing missed. The 69% thinking it‚Äôs 100% moment. The missing classifier definitions. The permissive test anti-pattern. Systematic verification refusing to accept ‚Äúappears complete‚Äù without proving ‚Äúactually complete.‚Äù</p><p>None of these are silver bullets. Each requires the others to¬†work.</p><ul><li><strong>Clear specifications without solid foundations</strong>: agents build the wrong thing¬†quickly</li><li><strong>Solid foundations without verification</strong>: incomplete work ships thinking it‚Äôs¬†complete</li><li><strong>Verification without clear quality standards</strong>: you catch problems but don‚Äôt know what ‚Äúgood‚Äù looks¬†like.</li></ul><p>The methodology is the integration of all these pieces. And it took four months of development to get here‚Ää‚Äî‚Ääthis isn‚Äôt where we started, it‚Äôs what we built¬†toward.</p><h3>The calm of completion</h3><p>Tuesday evening feels different from Monday evening, which felt different from Sunday¬†evening.</p><p>Sunday: Exhilaration of pattern coverage jumping 24% ‚Üí 92% in fifteen¬†minutes.</p><p>Monday: Relief that autonomous agent work validated correctly and scope gaps were¬†caught.</p><p>Tuesday: Calm. Centered. Relaxed!</p><p>Not the calm before something. The calm of arriving. The foundation work is complete. The refactoring is done. The quality gates are operational. The tests all¬†pass.</p><p>What comes next is building on this foundation, not replacing it.</p><p>We made issues for some of the items we postponed as somewhat out of scope: MVP-ERROR-STANDARDS will standardize error handling. CORE-TEST-CACHE will fix a minor test environment issue. CORE-INTENT-ENHANCE will optimize IDENTITY and GUIDANCE accuracy when it becomes important.</p><p>But none of those are GREAT epics. They‚Äôre incremental improvements to a foundation that‚Äôs already solid. This isn‚Äôt the end. It isn‚Äôt even the beginning of the end, to coin a phrase, but it might be the end of the beginning.</p><p>The Great Refactor is complete. Five epics, eighteen days, production-ready foundation. Achieved without heroic effort or accepting technical debt or cutting corners to ship¬†faster.</p><p>Through systematic work discovering that the infrastructure was better than we thought, enumerating what remained, and validating that it all held together.</p><p>The methodology working exactly as designed.</p><p>Which is, for the third time this week, far more satisfying than dramatic¬†rescues.</p><h3>What this¬†enables</h3><p>With GREAT-1 through GREAT-5 complete, Piper Morgan now¬†has:</p><p><strong>Orchestration</strong>: Workflow factory coordinating all complex operations</p><p><strong>Integration</strong>: Clean plugin architecture for all external¬†services</p><p><strong>Classification</strong>: Universal intent system routing all natural¬†language</p><p><strong>Performance</strong>: Sub-millisecond canonical handlers, 602K req/sec sustained</p><p><strong>Quality</strong>: Comprehensive gates protecting all critical¬†paths</p><p>The foundation enables alpha release to real users. Multi-user support operational. Spatial intelligence providing context-appropriate responses. Quality gates preventing regression. Performance validated under¬†load.</p><p>Everything that comes next builds on this. Not replacing it, not refactoring it again, not discovering it was wrong. Just building the features that this foundation enables.</p><p>That‚Äôs what eighteen days of systematic work delivered. Not just working software, but a foundation trustworthy enough to build on without constantly looking over your shoulder wondering if it‚Äôll collapse.</p><p>The calm of completion is knowing the foundation holds.</p><p><em>Next on Building Piper Morgan: The Calm After the Storm‚Ää‚Äî‚ÄäWhen Victory Means Stopping to Plan, as we resist the temptation to immediately sprint toward Alpha and instead take time to properly assess our position and chart the sustainable path¬†forward.</em></p><p><em>Have you completed a major milestone faster than expected? Did you immediately charge forward, or did you pause to reassess? What would you do differently?</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dbf652a9a5bd" width="1" height="1" alt=""><hr><p><a href="https://medium.com/building-piper-morgan/the-great-refactor-six-weeks-in-eighteen-days-dbf652a9a5bd">The Great Refactor: Six Weeks in Eighteen Days</a> was originally published in <a href="https://medium.com/building-piper-morgan">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>1c:T42b3,<figure><img alt="A robot wins a race with a humna chering and other robots looking on" src="https://cdn-images-1.medium.com/max/1024/1*efz27rk4UzbkTNLYUaMcgg.png" /><figcaption>‚ÄúYou did¬†it!‚Äù</figcaption></figure><p><em>October 7,¬†2025</em></p><p>Tuesday morning at 7:04 AM, my Chief Architect began planning GREAT-4F‚Ää‚Äî‚Ääthe final piece of intent classification. Improve classifier accuracy to 95%+, document the canonical handler pattern, establish quality gates protecting everything we‚Äôd¬†built.</p><p>One epic remaining after that: GREAT-5, the validation suite that would lock in all achievements from GREAT-1 through¬†GREAT-4.</p><p>By 6:52 PM, both were complete.</p><p>At 7:01 PM, Chief Architect confirmed: ‚ÄúCORE-GREAT ready to close‚Ää‚Äî‚Ääall 5 GREAT epics complete.‚Äù</p><p>September 20 to October 7. Eighteen days. Five major epics estimated at six weeks or more. Production-ready foundation with 142+ tests, 100% passing, comprehensive quality gates operational.</p><p>The pause the precipitated this effort came from one of my lowest points on this project, my I sincerely wondered if this had all been a fascinating waste of my time. Now less than three weeks later I feel more confident than ever that I‚Äôm building something real.</p><p>This is the story of how Tuesday brought another milestone for what four months of systematic work had built toward. Not through heroic effort, but through discovering that most of the work had already been done‚Ää‚Äî‚Ääit just needed the final 5% found, fixed, and validated.</p><h3>The two-minute ADR</h3><p>At 7:51 AM, Code agent deployed to create ADR-039: Canonical Handler Pattern documentation. Estimated time: 20‚Äì30 minutes. Actual time: 2 minutes. Why do they pad these estimates? They know they write fast,¬†right?</p><p>The ADR wasn‚Äôt shorter or lower quality than expected. It was comprehensive: 399 lines documenting the dual-path architecture, explaining when to use canonical handlers versus workflow orchestration, including performance metrics from GREAT-4E, providing troubleshooting guidance.</p><p>What made it fast wasn‚Äôt the agent writing faster. It was the specification being¬†clearer.</p><p>The gameplan didn‚Äôt say ‚Äúwrite an ADR about canonical handlers.‚Äù It¬†said:</p><blockquote><em>Document the dual-path architecture: WHAT (two routing paths exist), WHY (performance vs capability trade-offs), WHEN (which path for which requests), HOW (decision criteria), PERFORMANCE (actual metrics from GREAT-4E benchmarks).</em></blockquote><p>Clear specifications enable speed. When the agent knows exactly what ‚Äúdone‚Äù looks like, implementation becomes straightforward.</p><p>This pattern repeated throughout Tuesday.</p><p>Phase 1 (QUERY fallback patterns): estimated 30‚Äì40 minutes, actual 14 minutes. GREAT-5 Phase 3 (integration tests): estimated 45‚Äì60 minutes, actual 15¬†minutes.</p><p>Not because work was skipped. Because foundations were solid and requirements were¬†clear.</p><h3>The missing definitions</h3><p>At 9:40 AM, Cursor completed Phase 2 of GREAT-4F: enhancing the LLM classifier prompts.</p><p>The discovery was almost embarrassing in its simplicity.</p><p>The classifier prompt didn‚Äôt include definitions for the five canonical categories. This feels like the kind of shortcut/oversight that plagued our coding process for most of the first few¬†months.</p><p>The categories existed. The handlers worked. The routing was correct. The tests all passed. But the LLM classifier‚Ää‚Äî‚Ääthe system that decides which category a natural language query belongs to‚Ää‚Äî‚Äähad never been told what the canonical categories actually¬†were.</p><p>When someone said ‚ÄúWhat day is it?‚Äù the classifier would¬†see:</p><ul><li>Available categories: QUERY, CREATE, UPDATE, SEARCH, EXECUTION, ANALYSIS, SYNTHESIS, STRATEGY, LEARNING, GUIDANCE, UNKNOWN</li><li>Query: ‚ÄúWhat day is¬†it?‚Äù</li><li>Decision: Probably QUERY (default when¬†unsure)</li></ul><p>TEMPORAL didn‚Äôt appear in the options because the prompt never mentioned it¬†existed.</p><p>The fix: Add five lines defining canonical categories in the classifier prompt.</p><p>The impact: +11 to 15 percentage points accuracy improvement.</p><p>PRIORITY went from 85‚Äì95% accuracy to 100% (perfect classification). TEMPORAL jumped to 96.7%. STATUS to 96.7%. All three exceeding the 95%¬†target.</p><p>It‚Äôs a weird feeling to be both annoyed that something so simple was skipped and hiding in plain site as well as relieved and satisfied after fixing¬†it.</p><p>This is the flip side of the ‚Äú75% pattern.‚Äù Sometimes you discover infrastructure is better than expected. Sometimes you discover a simple fix dramatically improves things. But both require actually¬†looking.</p><p>The categories worked in isolation. Unit tests passed. Integration tests with canonical queries worked because those tests bypassed the LLM classifier entirely‚Ää‚Äî‚Ääthey called handlers directly.</p><p>The gap only appeared when testing the full flow: natural language ‚Üí LLM classification ‚Üí canonical handler¬†routing.</p><p>Comprehensive testing reveals assumptions. And sometimes those assumptions are ‚Äúsurely someone told the classifier what these categories mean.‚Äù</p><h3>The permissive test anti-pattern</h3><p>Throughout Tuesday morning, a pattern kept appearing in the test¬†suite:</p><pre># Permissive (accepts both success and failure):<br>assert response.status_code in [200, 404]<br><br># Strict (requires success):<br>assert response.status_code == 200</pre><p>The permissive version accepts both ‚Äúworking correctly‚Äù (200) and ‚Äúendpoint doesn‚Äôt exist‚Äù (404) as valid test passes. When I saw that I was like ‚Äúwait, wat?‚Äù How is ‚Äúendpoint doesn‚Äôt exist‚Äù a success state? Because a reply was returned? Come¬†on!</p><p>GREAT-5 Phase 1 systematically eliminated this pattern. Twelve permissive assertions replaced with strict requirements. The immediate result: tests started¬†failing.</p><p>Good!</p><p>The failures revealed:</p><ul><li><strong>IntentService initialization errors</strong>: Test fixtures weren‚Äôt properly setting up the¬†service</li><li><strong>Two cache endpoint bugs</strong>: AttributeError exceptions in production code</li><li><strong>Health endpoint protection gaps</strong>: Tests accepting failures that would break monitoring</li></ul><p>None of these were caught by permissive tests because permissive tests don‚Äôt catch problems‚Ää‚Äî‚Ääthey hide them. Seriously, who writes permissive tests anyhow? Who trained the LLMs to do¬†that?</p><p>The philosophy difference:</p><ul><li><strong>‚ÄúMake tests pass‚Äù</strong>: Write tests that accept current behavior, even if¬†broken</li><li><strong>‚ÄúMake code work‚Äù</strong>: Write strict tests that force code to meet requirements</li></ul><p>Permissive tests create false confidence. Everything appears to work because tests pass. But the tests are lying‚Ää‚Äî‚Ääthey pass whether code works or¬†not.</p><p>By end of Phase 1, all permissive patterns were eliminated. Tests now enforce actual requirements. Which meant Phase 1 also had to fix the code that failed strict tests‚Ää‚Äî‚Ääincluding two production bugs that had been lurking undetected.</p><p>This is the unglamorous side of quality work. It‚Äôs not adding features. It‚Äôs making tests honest about what they validate.</p><h3>Quality gates as compound¬†momentum</h3><p>GREAT-5‚Äôs goal was establishing additional quality gates protecting all GREAT-1 through GREAT-4 achievements. The existing gates¬†were:</p><ul><li>Intent classification tests</li><li>Performance regression detection</li><li>Coverage enforcement (80%+)</li><li>Bypass detection</li><li>Contract validation</li></ul><p>To this we were now¬†adding:</p><ol><li><strong>Zero-tolerance regression suite</strong>: Critical infrastructure must work, no exceptions</li><li><strong>Integration test coverage</strong>: All 13 intent categories validated end-to-end</li><li><strong>Performance benchmarks</strong>: Lock in 602K req/sec baseline from¬†GREAT-4E</li><li><strong>CI/CD pipeline verification</strong>: 2.5-minute runtime with fail-fast design</li></ol><p>The interesting discovery: most of these already¬†existed.</p><p>CI/CD pipeline? Already excellent, needed zero changes. Performance benchmarks? GREAT-4E had validated them, just needed test suite integration. Load testing? Cache validation tests already proved efficiency.</p><p>What remained¬†was:</p><ul><li>Enhancing regression tests with strict assertions</li><li>Creating comprehensive integration tests</li><li>Fixing the bugs strict tests¬†revealed</li><li>Documenting what quality gates exist and¬†why</li></ul><p>GREAT-5 took 1.8 hours (109 minutes of actual work). Not because the work was small, but because foundations were already¬†solid.</p><p>This is compound momentum visible: each previous epic made this one easier. GREAT-4E‚Äôs performance validation became GREAT-5‚Äôs benchmark baseline. GREAT-3‚Äôs plugin architecture became GREAT-5‚Äôs integration test framework. GREAT-2‚Äôs spatial intelligence became GREAT-5‚Äôs multi-interface validation.</p><p>Nothing built in isolation. Everything building on everything else.</p><h3>The completion moment</h3><p>At 1:15 PM, Chief Architect declared GREAT-4 complete.</p><p>All six sub-epics (4A through 4F) finished. Intent classification system production-ready:</p><ul><li>13/13 categories fully implemented</li><li>95%+ accuracy for core categories</li><li>142+ query variants¬†tested</li><li>Zero timeout errors through graceful¬†fallback</li><li>Sub-millisecond canonical response¬†time</li><li>84.6% cache hit rate with 7.6√ó¬†speedup</li></ul><p>By 6:52 PM, GREAT-5 was complete as¬†well:</p><ul><li>37 tests in comprehensive quality gate¬†suite</li><li>Zero-tolerance regression protection</li><li>Performance baseline locked at 602K¬†req/sec</li><li>All 13 intent categories validated through all interfaces</li><li>CI/CD pipeline verified operational</li></ul><p>Completing an entire fifth epic after finishing the last several issues in the previous epic seems like a leap, but GREAT-5 is about locking down the work of the earlier epics, and it benefited greatly from all the cleanup work that preceded¬†it.</p><p>At 7:01 PM, Chief Architect closed CORE-GREAT: ‚ÄúAll 5 GREAT epics complete.‚Äù</p><p>The timeline:</p><ul><li><strong>GREAT-1</strong> (Orchestration Core): September 20‚Äì27</li><li><strong>GREAT-2</strong> (Integration Cleanup): September 28‚Ää‚Äî‚ÄäOctober¬†1</li><li><strong>GREAT-3</strong> (Plugin Architecture): October¬†2‚Äì4</li><li><strong>GREAT-4</strong> (Intent Universal): October¬†5‚Äì7</li><li><strong>GREAT-5</strong> (Quality Gates): October¬†7</li></ul><p>Total: 18 days from start to production-ready foundation. When the Chief Architect scoped this at six to seven weeks I was hoping (and to be honest, expecting) that it would not take quite that long, but this far exceeded my expectations.</p><h3>What six weeks in eighteen days¬†means</h3><p>I‚Äôm not really talking about working faster and definitely not about cutting corners. This is about systematic work revealing that foundations were stronger than expected.</p><p>The pattern across all five¬†epics:</p><p><strong>Phase ‚àí1 verification</strong> consistently found infrastructure better than assumed. Two-layer caching already operational. Spatial intelligence already integrated. Plugin patterns already proven. Each epic started further along than the gameplan estimated.</p><p><strong>The 75% pattern</strong> appeared repeatedly. Categories implemented, patterns missing. Handlers exist, definitions missing. Tests passing, strictness missing. The missing 25% wasn‚Äôt architecture‚Ää‚Äî‚Ääit was enumeration, documentation, and validation.</p><p><strong>Compound momentum</strong> made each epic faster. GREAT-1‚Äôs orchestration patterns became GREAT-4‚Äôs intent routing. GREAT-2‚Äôs integration cleanup became GREAT-3‚Äôs plugin foundation. GREAT-3‚Äôs plugin architecture became GREAT-4‚Äôs category handlers.</p><p><strong>Autonomous agent work</strong> accelerated when patterns were clear. The 2-minute ADR. The 14-minute QUERY fallback. The 15-minute integration test suite. Not because agents write faster, but because specifications were clearer and foundations were¬†proven.</p><p><strong>Independent validation</strong> caught what automated testing missed. The 69% thinking it‚Äôs 100% moment. The missing classifier definitions. The permissive test anti-pattern. Systematic verification refusing to accept ‚Äúappears complete‚Äù without proving ‚Äúactually complete.‚Äù</p><p>None of these are silver bullets. Each requires the others to¬†work.</p><ul><li><strong>Clear specifications without solid foundations</strong>: agents build the wrong thing¬†quickly</li><li><strong>Solid foundations without verification</strong>: incomplete work ships thinking it‚Äôs¬†complete</li><li><strong>Verification without clear quality standards</strong>: you catch problems but don‚Äôt know what ‚Äúgood‚Äù looks¬†like.</li></ul><p>The methodology is the integration of all these pieces. And it took four months of development to get here‚Ää‚Äî‚Ääthis isn‚Äôt where we started, it‚Äôs what we built¬†toward.</p><h3>The calm of completion</h3><p>Tuesday evening feels different from Monday evening, which felt different from Sunday¬†evening.</p><p>Sunday: Exhilaration of pattern coverage jumping 24% ‚Üí 92% in fifteen¬†minutes.</p><p>Monday: Relief that autonomous agent work validated correctly and scope gaps were¬†caught.</p><p>Tuesday: Calm. Centered. Relaxed!</p><p>Not the calm before something. The calm of arriving. The foundation work is complete. The refactoring is done. The quality gates are operational. The tests all¬†pass.</p><p>What comes next is building on this foundation, not replacing it.</p><p>We made issues for some of the items we postponed as somewhat out of scope: MVP-ERROR-STANDARDS will standardize error handling. CORE-TEST-CACHE will fix a minor test environment issue. CORE-INTENT-ENHANCE will optimize IDENTITY and GUIDANCE accuracy when it becomes important.</p><p>But none of those are GREAT epics. They‚Äôre incremental improvements to a foundation that‚Äôs already solid. This isn‚Äôt the end. It isn‚Äôt even the beginning of the end, to coin a phrase, but it might be the end of the beginning.</p><p>The Great Refactor is complete. Five epics, eighteen days, production-ready foundation. Achieved without heroic effort or accepting technical debt or cutting corners to ship¬†faster.</p><p>Through systematic work discovering that the infrastructure was better than we thought, enumerating what remained, and validating that it all held together.</p><p>The methodology working exactly as designed.</p><p>Which is, for the third time this week, far more satisfying than dramatic¬†rescues.</p><h3>What this¬†enables</h3><p>With GREAT-1 through GREAT-5 complete, Piper Morgan now¬†has:</p><p><strong>Orchestration</strong>: Workflow factory coordinating all complex operations</p><p><strong>Integration</strong>: Clean plugin architecture for all external¬†services</p><p><strong>Classification</strong>: Universal intent system routing all natural¬†language</p><p><strong>Performance</strong>: Sub-millisecond canonical handlers, 602K req/sec sustained</p><p><strong>Quality</strong>: Comprehensive gates protecting all critical¬†paths</p><p>The foundation enables alpha release to real users. Multi-user support operational. Spatial intelligence providing context-appropriate responses. Quality gates preventing regression. Performance validated under¬†load.</p><p>Everything that comes next builds on this. Not replacing it, not refactoring it again, not discovering it was wrong. Just building the features that this foundation enables.</p><p>That‚Äôs what eighteen days of systematic work delivered. Not just working software, but a foundation trustworthy enough to build on without constantly looking over your shoulder wondering if it‚Äôll collapse.</p><p>The calm of completion is knowing the foundation holds.</p><p><em>Next on Building Piper Morgan: The Calm After the Storm‚Ää‚Äî‚ÄäWhen Victory Means Stopping to Plan, as we resist the temptation to immediately sprint toward Alpha and instead take time to properly assess our position and chart the sustainable path¬†forward.</em></p><p><em>Have you completed a major milestone faster than expected? Did you immediately charge forward, or did you pause to reassess? What would you do differently?</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dbf652a9a5bd" width="1" height="1" alt=""><hr><p><a href="https://medium.com/building-piper-morgan/the-great-refactor-six-weeks-in-eighteen-days-dbf652a9a5bd">The Great Refactor: Six Weeks in Eighteen Days</a> was originally published in <a href="https://medium.com/building-piper-morgan">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>f:["$","$L1a",null,{"post":{"title":"The Great Refactor: Six Weeks in Eighteen Days","excerpt":"‚ÄúYou did it!‚ÄùOctober 7, 2025Tuesday morning at 7:04 AM, my Chief Architect began planning GREAT-4F ‚Äî the final piece of intent classification. Improve classifier accuracy to 95%+, document the canonical handler pattern, establish quality gates protecting everything we‚Äôd built.One epic remaining a...","url":"/blog/the-great-refactor-six-weeks-in-eighteen-days","publishedAt":"Oct 14, 2025","publishedAtISO":"Tue, 14 Oct 2025 12:27:16 GMT","author":"christian crumlish","readingTime":"5 min read","tags":["Building in Public"],"guid":"https://medium.com/p/dbf652a9a5bd","featuredImage":"https://cdn-images-1.medium.com/max/1024/1*efz27rk4UzbkTNLYUaMcgg.png","fullContent":"$1b","subtitle":"","canonicalLink":"https://medium.com/building-piper-morgan/the-great-refactor-six-weeks-in-eighteen-days-dbf652a9a5bd?source=rss----982e21163f8b---4","thumbnail":null,"slug":"the-great-refactor-six-weeks-in-eighteen-days","chatDate":"10/4/2025","category":"","workDate":"Oct 7, 2025","workDateISO":"2025-10-07T00:00:00.000Z","featured":false},"content":{"title":"The Great Refactor: Six Weeks in Eighteen Days","subtitle":"","content":"$1c","author":"christian crumlish","canonicalLink":"https://medium.com/building-piper-morgan/the-great-refactor-six-weeks-in-eighteen-days-dbf652a9a5bd?source=rss----982e21163f8b---4","filename":"rss-dbf652a9a5bd.html"}}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
1d:I[8175,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"The Great Refactor: Six Weeks in Eighteen Days | Piper Morgan"}],["$","meta","1",{"name":"author","content":"Christian Crumlish"}],["$","meta","2",{"name":"keywords","content":"AI,Product Management,Methodology,Building in Public"}],["$","meta","3",{"name":"creator","content":"Christian Crumlish"}],["$","meta","4",{"name":"publisher","content":"Christian Crumlish"}],["$","meta","5",{"name":"robots","content":"index, follow"}],["$","meta","6",{"name":"googlebot","content":"index, follow"}],["$","link","7",{"rel":"canonical","href":"https://pipermorgan.ai/"}],["$","meta","8",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","9",{"property":"og:title","content":"The Great Refactor: Six Weeks in Eighteen Days"}],["$","meta","10",{"property":"og:type","content":"article"}],["$","meta","11",{"property":"article:author","content":"christian crumlish"}],["$","meta","12",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","13",{"name":"twitter:title","content":"The Great Refactor: Six Weeks in Eighteen Days"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x33"}],["$","link","15",{"rel":"icon","href":"/favicon.ico","sizes":"32x32","type":"image/x-icon"}],["$","link","16",{"rel":"icon","href":"/pm-favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","17",{"rel":"icon","href":"/pm-favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","18",{"rel":"icon","href":"/pm-favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","19",{"rel":"apple-touch-icon","href":"/pm-favicon-180.png","sizes":"180x180","type":"image/png"}],["$","link","20",{"rel":"icon","href":"/pm-favicon-192.png","sizes":"192x192","type":"image/png"}],["$","$L1d","21",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
