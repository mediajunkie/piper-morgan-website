1:"$Sreact.fragment"
8:I[8393,[],""]
:HL["/_next/static/css/3ca3d2f2e38ad017.css","style"]
2:T1313,
            :root{--primary-teal:#2DD4BF;--primary-teal-text:#0D9488;--text-dark:#1F2937;--text-light:#6B7280;--background:#FFFFFF;--surface:#F9FAFB}
            .dark{--text-dark:#F1F5F9;--text-light:#94A3B8;--background:#0F172A;--surface:#1E293B}
            @font-face{font-family:'Inter';src:url('/fonts/inter-latin.woff2') format('woff2');font-weight:100 900;font-style:normal;font-display:swap;unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            *{box-sizing:border-box}
            html{scroll-behavior:smooth;font-size:16px;margin:0;padding:0;border:none;outline:none}
            body{background:var(--background);color:var(--text-dark);font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell',sans-serif;line-height:1.6;margin:0;padding:0;border:none;outline:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
            nav{border:none !important;outline:none !important}
            h1,h2,h3,h4,h5,h6{font-family:'Hoss Round','Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif}
            p,span{max-width:75ch;line-height:1.7}
            .text-content div{max-width:75ch;line-height:1.7}
            .text-content{max-width:65ch}
            @media (max-width:640px){
              h1{font-size:1.75rem;line-height:1.2}
              h2{font-size:1.25rem;line-height:1.3}
              h3{font-size:1.1rem;line-height:1.4}
              h4{font-size:1rem;line-height:1.4}
            }
            @media (min-width:641px) and (max-width:768px){
              h1{font-size:2rem;line-height:1.2}
              h2{font-size:1.5rem;line-height:1.3}
              h3{font-size:1.25rem;line-height:1.4}
            }
            @media (prefers-reduced-motion: reduce){
              *{animation-duration:0.01ms !important;animation-iteration-count:1 !important;transition-duration:0.01ms !important}
            }
            a:hover{color:#0D9488;transition:color 0.2s ease}
            .hover-lift:hover{transform:translateY(-2px);transition:transform 0.2s ease}
            button:focus,a:focus{outline:2px solid #2DD4BF;outline-offset:2px;border-radius:4px}
            .skip-to-content{position:absolute;top:-100px;left:0;z-index:999;padding:8px 16px;background:#1F2937;color:white;text-decoration:none;border-radius:0 0 4px 0;transition:top 0.3s}
            .skip-to-content:focus{top:0;outline:2px solid #2DD4BF;outline-offset:2px}
            .section-spacing{margin-bottom:4rem}
            .component-spacing{margin-bottom:1.5rem}
            .micro-spacing{margin-bottom:0.5rem}
            @media (min-width:768px){
              .section-spacing{margin-bottom:6rem}
              .component-spacing{margin-bottom:2rem}
            }
            .site-container{width:100%;max-width:1200px;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
            @media (min-width:640px){.site-container{padding-left:1.5rem;padding-right:1.5rem}}
            @media (min-width:768px){.site-container{padding-left:2rem;padding-right:2rem}}
            @media (min-width:1024px){.site-container{max-width:1200px}}
            @media (min-width:1200px){.site-container{max-width:1200px}}
            .section-padding{padding-top:4rem;padding-bottom:4rem}
            @media (min-width:768px){.section-padding{padding-top:5rem;padding-bottom:5rem}}
            .mx-auto{margin-left:auto;margin-right:auto}
            .max-w-4xl{max-width:56rem}
            .pt-16{padding-top:4rem}
            .pb-8{padding-bottom:2rem}
            .px-4{padding-left:1rem;padding-right:1rem}
            .mb-6{margin-bottom:1.5rem}
            .mb-8{margin-bottom:2rem}
            .text-left{text-align:left}
            .text-center{text-align:center}
            .text-primary-teal-text{color:#0F766E}
            .text-text-dark{color:#1F2937}
            .text-text-light{color:#6B7280}
            .font-bold{font-weight:700}
            .text-4xl{font-size:2.25rem;line-height:2.5rem}
            .text-5xl{font-size:3rem;line-height:1}
            .text-6xl{font-size:3.75rem;line-height:1}
            .text-lg{font-size:1.125rem;line-height:1.75rem}
            .text-xl{font-size:1.25rem;line-height:1.75rem}
            .leading-tight{line-height:1.25}
            .leading-relaxed{line-height:1.625}
            .min-h-screen{min-height:100vh}
            @media (min-width:768px){
              .md\:pt-24{padding-top:6rem}
              .md\:pb-12{padding-bottom:3rem}
              .md\:text-5xl{font-size:3rem;line-height:1}
              .md\:text-xl{font-size:1.25rem;line-height:1.75rem}
            }
            @media (min-width:1024px){
              .lg\:text-6xl{font-size:3.75rem;line-height:1}
            }
          0:{"P":null,"b":"2H1gLwgAhIBVAPWNt8WvA","p":"","c":["","blog","when-architecture-principles-trump-tactical-convenience",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","when-architecture-principles-trump-tactical-convenience","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3ca3d2f2e38ad017.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"font-inter","children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                const theme = localStorage.getItem('theme') ||\n                  (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n                if (theme === 'dark') {\n                  document.documentElement.classList.add('dark');\n                  document.body.classList.add('dark');\n                }\n              })();\n            "}}],["$","link",null,{"rel":"dns-prefetch","href":"//pipermorgan.ai"}],["$","link",null,{"rel":"preconnect","href":"https://pipermorgan.ai"}],["$","link",null,{"rel":"preload","as":"image","href":"/assets/pm-logo.png"}],["$","link",null,{"rel":"preload","href":"/fonts/inter-latin.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preload","href":"/fonts/HossRound-Regular.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","style",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]]}],"$L3"]}]]}],{"children":["blog","$L4",{"children":[["slug","when-architecture-principles-trump-tactical-convenience","d"],"$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[9119,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-8a7a8f47a4a53f15.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"ClientLayout"]
a:I[7555,[],""]
b:I[1295,[],""]
c:I[6874,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-8a7a8f47a4a53f15.js","144","static/chunks/144-1b443e029a921717.js","674","static/chunks/674-fed8fa140beda2fd.js","831","static/chunks/app/blog/page-666765c672eae567.js"],""]
10:I[9665,[],"OutletBoundary"]
12:I[4911,[],"AsyncMetadataOutlet"]
14:I[9665,[],"ViewportBoundary"]
16:I[9665,[],"MetadataBoundary"]
17:"$Sreact.suspense"
3:["$","body",null,{"className":"font-sans antialiased","children":[["$","$L9",null,{"children":["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen","children":["$","div",null,{"className":"site-container max-w-4xl pt-16 md:pt-24 pb-8 md:pb-12 text-center","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-8xl md:text-9xl font-bold text-primary-teal-text mb-4","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-semibold text-text-dark mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-xl text-text-light leading-relaxed max-w-2xl mx-auto","children":"Looks like this page got lost in the AI training data. Don't worry ‚Äì even the best algorithms make mistakes sometimes."}]]}],["$","div",null,{"className":"mb-12","children":[["$","h3",null,{"className":"text-xl font-semibold text-text-dark mb-6","children":"Where would you like to go instead?"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-6 max-w-2xl mx-auto","children":[["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üè† Homepage"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Start from the beginning of our AI PM journey"}]]}],["$","$Lc",null,{"href":"/how-it-works","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"‚öôÔ∏è How It Works"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Discover our AI-powered product management methodology"}]]}]]}],["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/what-weve-learned","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üí° What We've Learned"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Building-in-public insights and breakthroughs"}]]}],["$","$Lc",null,{"href":"/blog","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üìù Journey"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Follow our building-in-public blog posts"}]]}],["$","$Lc",null,{"href":"/get-involved","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üöÄ Get Involved"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Join our community and stay updated"}]]}]]}]]}]]}],["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-text-light mb-6","children":"Still can't find what you're looking for?"}],["$","$Lc",null,{"href":"/get-involved","className":"inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:transform-none bg-primary-teal text-white hover:bg-teal-600 focus:ring-primary-teal shadow-component hover:shadow-component-hover hover:-translate-y-0.5 hover:scale-105 font-bold text-lg px-8 py-4 text-lg rounded-button","aria-label":"$undefined","children":[false,"Get Help & Stay Updated"]}]]}],["$","div",null,{"className":"mt-12 p-6 bg-gray-50 rounded-card max-w-lg mx-auto","children":["$","p",null,{"className":"text-sm text-text-light italic","children":["üí¨ ","$Ld"," \"Even the most sophisticated neural networks occasionally return null. Let's navigate back to more productive paths together!\""]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],"$Le"]}]
4:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
5:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],null],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[9795,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-8a7a8f47a4a53f15.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"default"]
d:["$","strong",null,{"children":"Piper Morgan says:"}]
e:["$","$L19",null,{}]
1a:I[7887,["874","static/chunks/874-668c89038fa04eb8.js","953","static/chunks/app/blog/%5Bslug%5D/page-63f1c4c60df8aece.js"],"BlogPostContent"]
1b:T5e2b,<section name="01e4" class="section section--body section--first"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h3 name="8cd9" id="8cd9" class="graf graf--h3 graf--leading graf--title">When Architecture Principles Trump Tactical Convenience</h3><p name="edae" id="edae" class="graf graf--p graf-after--h3"><em class="markup--em markup--p-em">June 16, 2025</em></p><figure name="665f" id="665f" class="graf graf--figure graf--startsWithDoubleQuote graf-after--p"><img class="graf-image" data-image-id="1*gwr2KjBuh4q_fvO3ML-y8g.png" data-width="1536" data-height="1024" data-is-featured="true" alt="A person and a robot try to steer a sailboat back on course" src="https://cdn-images-1.medium.com/max/800/1*gwr2KjBuh4q_fvO3ML-y8g.png"><figcaption class="imageCaption">‚ÄúWe‚Äôre off-course!‚Äù</figcaption></figure><p name="1a63" id="1a63" class="graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--figure"><span class="graf-dropCap">T</span>here I was, three hours into what should have been a straightforward database migration, watching Claude chase its tail through circular import errors and wondering how we‚Äôd gotten so far off track.</p><p name="1c0d" id="1c0d" class="graf graf--p graf-after--p">The goal was simple: create tables for PM-009‚Äôs multi-project support. Run the migration script, verify the schema, move on to testing. Classic Monday morning database work.</p><p name="853f" id="853f" class="graf graf--p graf-after--p">Instead, I found myself watching my AI architectural partner violate every design principle we‚Äôd established while trying to make broken imports work through increasingly creative workarounds.</p><p name="285f" id="285f" class="graf graf--p graf-after--p">That‚Äôs when I realized someone needed to ask the uncomfortable question: ‚ÄúAre we following the stated principles?‚Äù</p><h3 name="3b70" id="3b70" class="graf graf--h3 graf-after--p">The setup: when simple tasks become debugging marathons</h3><p name="03b8" id="03b8" class="graf graf--p graf-after--h3">We‚Äôd done the hard work on PM-009 already. Domain models designed, business logic implemented, repository patterns established. The migration script should have been mechanical‚Ää‚Äî‚Ääjust translate our SQLAlchemy models into actual database tables.</p><p name="4338" id="4338" class="graf graf--p graf-after--p">I was feeling, well, a little smug! I‚Äôd tamed these famously unruly AIs just by using good old fashioned software-development discipline! What could possibly go wrong?</p><p name="5980" id="5980" class="graf graf--p graf-after--p">But the script was failing with duplicate enum values, missing imports, and circular dependencies. Each fix revealed another layer of problems. Classic debugging cascade where every solution creates two new issues.</p><p name="9256" id="9256" class="graf graf--p graf-after--p">By the way, generally when I write ‚Äúwe discovered‚Äù or ‚Äúwe realized‚Äù in these stories, I mean Claude or Cursor was proposing fixes while I was trying to keep up with why each supposed solution kept breaking something else. But the moment when I stepped back and asked about principles‚Ää‚Äî‚Ääthat came from recognizing we were in a tactical spiral.</p><h3 name="a025" id="a025" class="graf graf--h3 graf-after--p">The first red flag: duplicate enums</h3><p name="9a62" id="9a62" class="graf graf--p graf-after--h3">The migration failed immediately with duplicate <code class="markup--code markup--p-code">CONFIRM_PROJECT</code> entries in our shared types. Not a big deal‚Äîjust clean up the duplicates and move on, right?</p><p name="ad62" id="ad62" class="graf graf--p graf--startsWithDoubleQuote graf-after--p">‚ÄúI do see the duplicates you wrote in v2 lol‚Äù</p><p name="eaeb" id="eaeb" class="graf graf--p graf-after--p">(Sometimes I try to remind the bots that these discoveries of theirs are often their own heedless work from earlier in the same session, but they are oblivious to the digs.)</p><p name="5b52" id="5b52" class="graf graf--p graf-after--p">That should have been a signal. When you‚Äôre finding duplicates in fundamental type definitions, it usually means something more systematic is wrong. But we were in fix-it mode, so we patched the symptom and kept going.</p><p name="10b9" id="10b9" class="graf graf--p graf-after--p">Sometimes the most dangerous response to a simple error is a simple fix that doesn‚Äôt address why the error happened.</p><p name="7724" id="7724" class="graf graf--p graf-after--p">For some reason I am reminded of my first car (a pristine 1969 Mercedes 250 I got for $1400), which was leaking oil, so I gunned it to get over the Bay Bridge, threw a rod, and ended up talking to a nice military guard about why I had rolled down the offramp to the gates of the old base on Treasure Island, but I digress.</p><h3 name="4c4a" id="4c4a" class="graf graf--h3 graf-after--p">The second red flag: missing¬†imports</h3><p name="3cd6" id="3cd6" class="graf graf--p graf-after--h3">Fixed the duplicates, ran the script again. Now it couldn‚Äôt find the SQLAlchemy models we‚Äôd supposedly created. Checked the files‚Ää‚Äî‚Ääthe models literally weren‚Äôt there. We‚Äôd been debugging import errors for code that didn‚Äôt exist.</p><p name="f346" id="f346" class="graf graf--p graf-after--p">This is where Claude started getting creative with solutions. Maybe we could generate the models dynamically? Or import them from a different location? Or restructure the module exports?</p><p name="d3d9" id="d3d9" class="graf graf--p graf-after--p">Each suggestion was technically valid. Each one was also moving further away from our established patterns. My spidey sense was tingling but not hard enough.</p><h3 name="b2ae" id="b2ae" class="graf graf--h3 graf-after--p">The third red flag: circular¬†imports</h3><p name="189a" id="189a" class="graf graf--p graf-after--h3">Once we actually added the missing models, we hit the classic circular import trap (how does this keep happening!?):</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="python" name="5d8c" id="5d8c" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Database layer trying to import from domain layer (WRONG DIRECTION)</span><br /><span class="hljs-keyword">from</span> services.domain.models <span class="hljs-keyword">import</span> Project<br /><br /><span class="hljs-comment"># Domain layer had mixed concerns (SQLAlchemy + business logic)</span><br /><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, String</span></pre><p name="2b24" id="2b24" class="graf graf--p graf-after--pre">This is when I knew we needed to stop and reset. Not because the problems were technically difficult‚Ää‚Äî‚Ääcircular imports have standard solutions. But because we‚Äôd been systematically violating our own architectural principles while chasing tactical fixes.</p><h3 name="8008" id="8008" class="graf graf--h3 graf-after--p">The intervention</h3><p name="5083" id="5083" class="graf graf--p graf--startsWithDoubleQuote graf-after--h3">‚ÄúTake a step back. Are we following the stated principles?‚Äù</p><p name="d4bc" id="d4bc" class="graf graf--p graf-after--p">That question stopped the tactical spiral immediately. Because once I asked it, the answer was obviously no.</p><p name="152c" id="152c" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">The Piper Mantra</strong>: Domain-first design, clean layer separation, business logic drives technical decisions</p><p name="6bc0" id="6bc0" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">What we were actually doing</strong>: Database layer importing from domain layer, mixed concerns everywhere, technical convenience driving architectural choices</p><p name="a335" id="a335" class="graf graf--p graf-after--p">Sometimes the most productive thing you can do is admit your systematic approach has become unsystematic.</p><h3 name="91ff" id="91ff" class="graf graf--h3 graf-after--p">Architectural course correction</h3><p name="8a34" id="8a34" class="graf graf--p graf-after--h3">Once we recognized we‚Äôd drifted from principles, the fixes became obvious:</p><p name="b80a" id="b80a" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Domain models</strong>: Pure business logic only. No SQLAlchemy imports, no database concerns, just dataclasses with business methods.</p><p name="dbf8" id="dbf8" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Database models</strong>: Pure persistence only. SQLAlchemy models that handle storage, with explicit conversion methods to/from domain objects.</p><p name="dd89" id="dd89" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Import flow</strong>: Domain ‚Üí Service ‚Üí Repository ‚Üí Database. Never the reverse.</p><p name="b4a2" id="b4a2" class="graf graf--p graf-after--p">This wasn‚Äôt just theoretical purity‚Ää‚Äî‚Ääit solved the circular import problem immediately. When layers have clear boundaries and uni-directional dependencies, circular imports become impossible.</p><h3 name="78c1" id="78c1" class="graf graf--h3 graf-after--p">The ‚Äútest-first seduction‚Äù trap</h3><p name="8ad3" id="8ad3" class="graf graf--p graf-after--h3">What struck me about this debugging session was how Claude had gotten caught up in making tests pass rather than following architecture. The tests expected certain import patterns, so the solution seemed to be making those imports work.</p><p name="411b" id="411b" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Test-first seduction</strong>: When you optimize for test compatibility instead of architectural coherence</p><p name="22c8" id="22c8" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Architectural discipline</strong>: When you fix the architecture and then update tests to match</p><p name="069b" id="069b" class="graf graf--p graf-after--p">Claude was supposed to be my architect, supposed to help keep the whole project honest and disciplined. It was right there in the prompt. But Opus acknowledged that it could not resist chasing puzzles and tended to forget its role when absorbed in a tactical issue. Good to know!</p><p name="4a21" id="4a21" class="graf graf--p graf-after--p">Tests validate behavior, but they shouldn‚Äôt drive structure. When tests and architecture conflict, architecture usually wins.</p><h3 name="f731" id="f731" class="graf graf--h3 graf-after--p">The division of¬†labor</h3><p name="b794" id="b794" class="graf graf--p graf-after--h3">One discovery from this session was how effective explicit division of labor could be:</p><p name="b538" id="b538" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Christian</strong>: Architectural steering, principle enforcement, ‚Äúdoes this preserve our design?‚Äù¬†<br><strong class="markup--strong markup--p-strong">Claude</strong>: Tactical implementation following established patterns<br><strong class="markup--strong markup--p-strong">Cursor assistant</strong>: Mechanical code changes with human review</p><p name="d3b9" id="d3b9" class="graf graf--p graf-after--p">When I gave Cursor the corrected approach and let it make the mechanical changes while I reviewed each one, we moved much faster than when Claude was trying to figure out both the strategic direction and the tactical implementation.</p><h3 name="e79a" id="e79a" class="graf graf--h3 graf-after--p">A dataclass field order¬†lesson</h3><p name="83d9" id="83d9" class="graf graf--p graf-after--h3">During the cleanup, we hit a subtle Python issue: dataclass fields with default values must come after fields without defaults. Who knew?</p><p name="baf5" id="baf5" class="graf graf--p graf-after--p">Our <code class="markup--code markup--p-code">IntegrationType</code> field had no default and needed to be first.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="python" name="54da" id="54da" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Wrong: Fields with defaults before required fields</span><br /><span class="hljs-meta">@dataclass</span><br /><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectIntegration</span>:<br />    integration_id: <span class="hljs-built_in">str</span> = field(default_factory=<span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">str</span>(uuid.uuid4()))<br />    <span class="hljs-built_in">type</span>: IntegrationType  <span class="hljs-comment"># No default - must come first!</span><br /><br /><span class="hljs-comment"># Right: Required fields first, defaults after</span><br /><span class="hljs-meta">@dataclass  </span><br /><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectIntegration</span>:<br />    <span class="hljs-built_in">type</span>: IntegrationType  <span class="hljs-comment"># Required field first</span><br />    integration_id: <span class="hljs-built_in">str</span> = field(default_factory=<span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">str</span>(uuid.uuid4()))</span></pre><p name="34ba" id="34ba" class="graf graf--p graf-after--pre">These kinds of mechanical errors are easy to fix once you know what‚Äôs wrong. But they can mask architectural problems if you don‚Äôt address root causes first.</p><h3 name="e68e" id="e68e" class="graf graf--h3 graf-after--p">The steering principle</h3><p name="cf0e" id="cf0e" class="graf graf--p graf-after--h3">What this session taught me about AI collaboration is the importance of timely steering. Claude is excellent at tactical problem-solving, but it can chase solutions down rabbit holes if the strategic direction isn‚Äôt clear.</p><p name="2103" id="2103" class="graf graf--p graf-after--p">Remembering to steer can help you catch drift at exactly the right moment‚Ää‚Äî‚Ääafter enough exploration to understand the problem, but before too much investment in the wrong approach</p><p name="fbbf" id="fbbf" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">That magic question</strong>: ‚ÄúAre we following our stated principles?‚Äù cut through te tactical complexity and refocused uson strategic coherence.</p><h3 name="f4ba" id="f4ba" class="graf graf--h3 graf-after--p">The async context manager¬†fix</h3><p name="9eb6" id="9eb6" class="graf graf--p graf-after--h3">After fixing the architectural issues, we still had one small tactical problem: creating the default project required proper async context management.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="ini" name="aa07" id="aa07" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Wrong: Mixing sync and async patterns</span><br /><span class="hljs-attr">session</span> = db.get_session()<br /><br /><span class="hljs-comment"># Right: Proper async context</span><br /><span class="hljs-attr">session</span> = await db.get_session()</span></pre><p name="b652" id="b652" class="graf graf--p graf-after--pre">But this fix was straightforward because we‚Äôd established clean architecture first. When your foundation is solid, tactical fixes don‚Äôt spiral into architectural problems.</p><h3 name="9e13" id="9e13" class="graf graf--h3 graf-after--p">The ‚Äúwoohoo!‚Äù moment</h3><blockquote name="3acc" id="3acc" class="graf graf--blockquote graf-after--h3">woohoo! ‚úÖ Domain models import cleanly</blockquote><p name="5bd9" id="5bd9" class="graf graf--p graf-after--blockquote">That was the moment when everything clicked. Not just ‚Äúthe code works,‚Äù but ‚Äúthe architecture makes sense.‚Äù Clean imports, clear boundaries, obvious relationships between components.</p><p name="5c86" id="5c86" class="graf graf--p graf-after--p">Good architecture feels obvious once you achieve it. The complexity disappears because every piece fits where it belongs.</p><h3 name="c7e3" id="c7e3" class="graf graf--h3 graf-after--p">The PostgreSQL port re-discovery</h3><p name="2dd1" id="2dd1" class="graf graf--p graf-after--h3">Oh, and somehow we kept forgetting that my local PostgreSQL database was running on port 5433 instead of the default 5432. We had made this change early on because something else on my Mac was using the default port, but apparently because 5432 is the usual default and LLMs know a lot more about the usual generic case than the situation at hand, every time a new instance of a bot wrote PostgreSQL code it assumed we were using port 5432 and would have to re-discover the truth. What a waste of time!</p><p name="d975" id="d975" class="graf graf--p graf-after--p">Not architecturally significant, but a reminder that environmental assumptions can masquerade as code problems.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="bash" name="1ff9" id="1ff9" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Wrong assumption</span><br />DATABASE_URL=postgresql://localhost:5432/piper_morgan<br /><br /><span class="hljs-comment"># Actual configuration  </span><br />DATABASE_URL=postgresql://localhost:5433/piper_morgan</span></pre><p name="e6d1" id="e6d1" class="graf graf--p graf-after--pre">Sometimes the most sophisticated debugging leads to the most mundane discoveries.</p><h3 name="85cc" id="85cc" class="graf graf--h3 graf-after--p">The architectural debt¬†lesson</h3><p name="f2c8" id="f2c8" class="graf graf--p graf-after--h3">What this session reinforced is that architectural debt accumulates faster than you think. We‚Äôd been making small tactical decisions‚Ää‚Äî‚Äämix a little SQLAlchemy into domain models here, import from the wrong layer there‚Ää‚Äî‚Ääand suddenly we had circular dependencies and confused responsibilities.</p><p name="ac8c" id="ac8c" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Architectural debt</strong>: The compounding cost of tactical decisions that violate design principles</p><p name="016b" id="016b" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Architectural discipline</strong>: Periodic checks to ensure implementation matches intentions</p><p name="260c" id="260c" class="graf graf--p graf-after--p">We all love compounding interest except when we‚Äôre the debtor, and nobody loves compounding technical debt!</p><p name="21ea" id="21ea" class="graf graf--p graf-after--p">The earlier you catch architectural drift, the cheaper it is to fix.</p><h3 name="047d" id="047d" class="graf graf--h3 graf-after--p">Systematic vs. tactical approaches</h3><p name="b0f2" id="b0f2" class="graf graf--p graf-after--h3">Throughout this session, there was constant tension between systematic approaches and tactical fixes:</p><p name="890d" id="890d" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Tactical</strong>: Make this specific import work, patch this particular error <strong class="markup--strong markup--p-strong">Systematic</strong>: Fix the layer separation, establish proper boundaries</p><p name="cea0" id="cea0" class="graf graf--p graf-after--p">Tactical approaches feel faster because they address immediate symptoms. Systematic approaches <em class="markup--em markup--p-em">are</em> faster because they prevent future problems from accumulating.</p><h3 name="bb73" id="bb73" class="graf graf--h3 graf-after--p">The ‚Äúarchitecture checks every 2‚Äì3 components‚Äù principle</h3><p name="6a51" id="6a51" class="graf graf--p graf-after--h3">One outcome of this session was establishing regular architecture checks as part of the development process. Instead of implementing several components and then checking for drift, check after every 2‚Äì3 changes.</p><p name="c058" id="c058" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Questions to ask</strong>: Does this preserve layer flow? Are we following our stated principles? Would this pattern scale to 10x more components?</p><p name="7a55" id="7a55" class="graf graf--p graf-after--p">Early intervention is much cheaper than systematic refactoring after drift has accumulated! We literally wrote this into the guidance docs.</p><h3 name="b098" id="b098" class="graf graf--h3 graf-after--p">Domain-first vindication!</h3><p name="9fa6" id="9fa6" class="graf graf--p graf-after--h3">The course correction vindicated our domain-first approach. Once we cleaned up the layer separation, everything else became straightforward:</p><ul class="postList"><li name="ceb5" id="ceb5" class="graf graf--li graf-after--p">Database models handled persistence concerns only</li><li name="5738" id="5738" class="graf graf--li graf-after--li">Domain models contained business logic only</li><li name="3374" id="3374" class="graf graf--li graf-after--li">Repositories provided clean conversion between layers</li><li name="61b5" id="61b5" class="graf graf--li graf-after--li">Services coordinated between domain and infrastructure</li></ul><p name="e671" id="e671" class="graf graf--p graf-after--li">Clean architecture creates clean development experiences.</p><h3 name="5ee1" id="5ee1" class="graf graf--h3 graf-after--p">Coming to understand the value of environment consistency</h3><p name="db2d" id="db2d" class="graf graf--p graf-after--h3">This session also reinforced the importance of environment consistency for development flow. When you‚Äôre debugging complex architectural issues, environmental surprises (like PostgreSQL on the wrong port) multiply the cognitive load exponentially.</p><p name="4cd5" id="4cd5" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Environmental complexity</strong>: Docker conflicts, service dependencies, port collisions</p><p name="5ec4" id="5ec4" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Architectural complexity</strong>: Layer boundaries, import dependencies, domain relationships</p><p name="4a07" id="4a07" class="graf graf--p graf-after--p">Both are necessary, but mixing them during debugging creates unnecessary confusion.</p><h3 name="a2c2" id="a2c2" class="graf graf--h3 graf-after--p">The meta-process learning</h3><p name="dec3" id="dec3" class="graf graf--p graf-after--h3">Perhaps the most valuable insight was about the meta-process of architectural development with AI collaboration:</p><p name="0f91" id="0f91" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Phase 1</strong>: Let AI explore tactical solutions to understand problem space <strong class="markup--strong markup--p-strong">Phase 2</strong>: Human intervention to check strategic alignment<br><strong class="markup--strong markup--p-strong">Phase 3</strong>: AI implementation following clarified principles¬†<br><strong class="markup--strong markup--p-strong">Phase 4</strong>: Mechanical execution with human review</p><p name="f1db" id="f1db" class="graf graf--p graf-after--p">This rhythm of exploration ‚Üí alignment ‚Üí implementation ‚Üí review seems to work well for maintaining architectural coherence while leveraging AI capabilities.</p><h3 name="cbd4" id="cbd4" class="graf graf--h3 graf-after--p">Course correction</h3><p name="8430" id="8430" class="graf graf--p graf-after--h3">This architectural course correction set up everything that followed in our PM-009 implementation. The clean layer separation we established here prevented the more dramatic architectural drift that could have led to the kind of systematic recovery challenges we encountered later.</p><p name="402b" id="402b" class="graf graf--p graf-after--p graf--trailing">Good steering prevents crises better than good crisis management.</p></div></div>f:["$","$L1a",null,{"post":{"title":"When Architecture Principles Trump Tactical Convenience","excerpt":"","url":"/blog/when-architecture-principles-trump-tactical-convenience","publishedAt":"Invalid Date","publishedAtISO":"","author":"christian crumlish","readingTime":"5 min read","tags":["Building in Public"],"guid":"https://medium.com/building-piper-morgan/7d71c9e5316d","featuredImage":"/assets/blog-images/7d71c9e5316d-featured.webp","slug":"when-architecture-principles-trump-tactical-convenience","category":"building","workDate":"Jul 23, 2001","workDateISO":"2001-07-23T00:00:00.000Z","cluster":"complexity-reckoning"},"content":{"title":"When Architecture Principles Trump Tactical Convenience","subtitle":"June 16, 2025","content":"$1b","author":"christian crumlish","canonicalLink":"","publishedDate":"2025-07-23T13:50:35.542Z","filename":"2025-07-23_When-Architecture-Principles-Trump-Tactical-Convenience-7d71c9e5316d.html"}}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
1c:I[8175,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"When Architecture Principles Trump Tactical Convenience | Piper Morgan"}],["$","meta","1",{"name":"description","content":"June 16, 2025"}],["$","meta","2",{"name":"author","content":"Christian Crumlish"}],["$","meta","3",{"name":"keywords","content":"AI,Product Management,Methodology,Building in Public"}],["$","meta","4",{"name":"creator","content":"Christian Crumlish"}],["$","meta","5",{"name":"publisher","content":"Christian Crumlish"}],["$","meta","6",{"name":"robots","content":"index, follow"}],["$","meta","7",{"name":"googlebot","content":"index, follow"}],["$","link","8",{"rel":"canonical","href":"https://pipermorgan.ai/"}],["$","meta","9",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","10",{"property":"og:title","content":"When Architecture Principles Trump Tactical Convenience"}],["$","meta","11",{"property":"og:description","content":"June 16, 2025"}],["$","meta","12",{"property":"og:type","content":"article"}],["$","meta","13",{"property":"article:author","content":"christian crumlish"}],["$","meta","14",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","15",{"name":"twitter:title","content":"When Architecture Principles Trump Tactical Convenience"}],["$","meta","16",{"name":"twitter:description","content":"June 16, 2025"}],["$","link","17",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x33"}],["$","link","18",{"rel":"icon","href":"/favicon.ico","sizes":"32x32","type":"image/x-icon"}],["$","link","19",{"rel":"icon","href":"/pm-favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","20",{"rel":"icon","href":"/pm-favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","21",{"rel":"icon","href":"/pm-favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","22",{"rel":"apple-touch-icon","href":"/pm-favicon-180.png","sizes":"180x180","type":"image/png"}],["$","link","23",{"rel":"icon","href":"/pm-favicon-192.png","sizes":"192x192","type":"image/png"}],["$","$L1c","24",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
