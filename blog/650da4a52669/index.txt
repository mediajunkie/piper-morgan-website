1:"$Sreact.fragment"
8:I[8393,[],""]
:HL["/_next/static/css/3ca3d2f2e38ad017.css","style"]
2:T1313,
            :root{--primary-teal:#2DD4BF;--primary-teal-text:#0D9488;--text-dark:#1F2937;--text-light:#6B7280;--background:#FFFFFF;--surface:#F9FAFB}
            .dark{--text-dark:#F1F5F9;--text-light:#94A3B8;--background:#0F172A;--surface:#1E293B}
            @font-face{font-family:'Inter';src:url('/fonts/inter-latin.woff2') format('woff2');font-weight:100 900;font-style:normal;font-display:swap;unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            *{box-sizing:border-box}
            html{scroll-behavior:smooth;font-size:16px;margin:0;padding:0;border:none;outline:none}
            body{background:var(--background);color:var(--text-dark);font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell',sans-serif;line-height:1.6;margin:0;padding:0;border:none;outline:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
            nav{border:none !important;outline:none !important}
            h1,h2,h3,h4,h5,h6{font-family:'Hoss Round','Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif}
            p,span{max-width:75ch;line-height:1.7}
            .text-content div{max-width:75ch;line-height:1.7}
            .text-content{max-width:65ch}
            @media (max-width:640px){
              h1{font-size:1.75rem;line-height:1.2}
              h2{font-size:1.25rem;line-height:1.3}
              h3{font-size:1.1rem;line-height:1.4}
              h4{font-size:1rem;line-height:1.4}
            }
            @media (min-width:641px) and (max-width:768px){
              h1{font-size:2rem;line-height:1.2}
              h2{font-size:1.5rem;line-height:1.3}
              h3{font-size:1.25rem;line-height:1.4}
            }
            @media (prefers-reduced-motion: reduce){
              *{animation-duration:0.01ms !important;animation-iteration-count:1 !important;transition-duration:0.01ms !important}
            }
            a:hover{color:#0D9488;transition:color 0.2s ease}
            .hover-lift:hover{transform:translateY(-2px);transition:transform 0.2s ease}
            button:focus,a:focus{outline:2px solid #2DD4BF;outline-offset:2px;border-radius:4px}
            .skip-to-content{position:absolute;top:-100px;left:0;z-index:999;padding:8px 16px;background:#1F2937;color:white;text-decoration:none;border-radius:0 0 4px 0;transition:top 0.3s}
            .skip-to-content:focus{top:0;outline:2px solid #2DD4BF;outline-offset:2px}
            .section-spacing{margin-bottom:4rem}
            .component-spacing{margin-bottom:1.5rem}
            .micro-spacing{margin-bottom:0.5rem}
            @media (min-width:768px){
              .section-spacing{margin-bottom:6rem}
              .component-spacing{margin-bottom:2rem}
            }
            .site-container{width:100%;max-width:1200px;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
            @media (min-width:640px){.site-container{padding-left:1.5rem;padding-right:1.5rem}}
            @media (min-width:768px){.site-container{padding-left:2rem;padding-right:2rem}}
            @media (min-width:1024px){.site-container{max-width:1200px}}
            @media (min-width:1200px){.site-container{max-width:1200px}}
            .section-padding{padding-top:4rem;padding-bottom:4rem}
            @media (min-width:768px){.section-padding{padding-top:5rem;padding-bottom:5rem}}
            .mx-auto{margin-left:auto;margin-right:auto}
            .max-w-4xl{max-width:56rem}
            .pt-16{padding-top:4rem}
            .pb-8{padding-bottom:2rem}
            .px-4{padding-left:1rem;padding-right:1rem}
            .mb-6{margin-bottom:1.5rem}
            .mb-8{margin-bottom:2rem}
            .text-left{text-align:left}
            .text-center{text-align:center}
            .text-primary-teal-text{color:#0F766E}
            .text-text-dark{color:#1F2937}
            .text-text-light{color:#6B7280}
            .font-bold{font-weight:700}
            .text-4xl{font-size:2.25rem;line-height:2.5rem}
            .text-5xl{font-size:3rem;line-height:1}
            .text-6xl{font-size:3.75rem;line-height:1}
            .text-lg{font-size:1.125rem;line-height:1.75rem}
            .text-xl{font-size:1.25rem;line-height:1.75rem}
            .leading-tight{line-height:1.25}
            .leading-relaxed{line-height:1.625}
            .min-h-screen{min-height:100vh}
            @media (min-width:768px){
              .md\:pt-24{padding-top:6rem}
              .md\:pb-12{padding-bottom:3rem}
              .md\:text-5xl{font-size:3rem;line-height:1}
              .md\:text-xl{font-size:1.25rem;line-height:1.75rem}
            }
            @media (min-width:1024px){
              .lg\:text-6xl{font-size:3.75rem;line-height:1}
            }
          0:{"P":null,"b":"J9swuHxjUkZ7xrowxyuFL","p":"","c":["","blog","650da4a52669",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","650da4a52669","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3ca3d2f2e38ad017.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"font-inter","children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                const theme = localStorage.getItem('theme') ||\n                  (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n                if (theme === 'dark') {\n                  document.documentElement.classList.add('dark');\n                  document.body.classList.add('dark');\n                }\n              })();\n            "}}],["$","link",null,{"rel":"dns-prefetch","href":"//pipermorgan.ai"}],["$","link",null,{"rel":"preconnect","href":"https://pipermorgan.ai"}],["$","link",null,{"rel":"preload","as":"image","href":"/assets/pm-logo.png"}],["$","link",null,{"rel":"preload","href":"/fonts/inter-latin.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preload","href":"/fonts/HossRound-Regular.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","style",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]]}],"$L3"]}]]}],{"children":["blog","$L4",{"children":[["slug","650da4a52669","d"],"$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[9119,["244","static/chunks/244-9e96172f40765e46.js","766","static/chunks/766-95b68f1ef6d722ff.js","177","static/chunks/app/layout-2f63acb31a3ab247.js"],"ClientLayout"]
a:I[7555,[],""]
b:I[1295,[],""]
c:I[6874,["244","static/chunks/244-9e96172f40765e46.js","766","static/chunks/766-95b68f1ef6d722ff.js","144","static/chunks/144-1b443e029a921717.js","170","static/chunks/170-49008af47a489cb7.js","674","static/chunks/674-2fd0ee313c361e66.js","831","static/chunks/app/blog/page-e8079a52d6b9a7d7.js"],""]
10:I[9665,[],"OutletBoundary"]
12:I[4911,[],"AsyncMetadataOutlet"]
14:I[9665,[],"ViewportBoundary"]
16:I[9665,[],"MetadataBoundary"]
17:"$Sreact.suspense"
3:["$","body",null,{"className":"font-sans antialiased","children":[["$","$L9",null,{"children":["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen","children":["$","div",null,{"className":"site-container max-w-4xl pt-16 md:pt-24 pb-8 md:pb-12 text-center","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-8xl md:text-9xl font-bold text-primary-teal-text mb-4","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-semibold text-text-dark mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-xl text-text-light leading-relaxed max-w-2xl mx-auto","children":"Looks like this page got lost in the AI training data. Don't worry ‚Äì even the best algorithms make mistakes sometimes."}]]}],["$","div",null,{"className":"mb-12","children":[["$","h3",null,{"className":"text-xl font-semibold text-text-dark mb-6","children":"Where would you like to go instead?"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-6 max-w-2xl mx-auto","children":[["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üè† Homepage"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Start from the beginning of our AI PM journey"}]]}],["$","$Lc",null,{"href":"/how-it-works","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"‚öôÔ∏è How It Works"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Discover our AI-powered product management methodology"}]]}]]}],["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/what-weve-learned","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üí° What We've Learned"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Building-in-public insights and breakthroughs"}]]}],["$","$Lc",null,{"href":"/blog","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üìù Journey"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Follow our building-in-public blog posts"}]]}],["$","$Lc",null,{"href":"/get-involved","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üöÄ Get Involved"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Join our community and stay updated"}]]}]]}]]}]]}],["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-text-light mb-6","children":"Still can't find what you're looking for?"}],["$","$Lc",null,{"href":"/get-involved","className":"inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:transform-none bg-primary-teal text-white hover:bg-teal-600 focus:ring-primary-teal shadow-component hover:shadow-component-hover hover:-translate-y-0.5 hover:scale-105 font-bold text-lg px-8 py-4 text-lg rounded-button","aria-label":"$undefined","children":[false,"Get Help & Stay Updated"]}]]}],["$","div",null,{"className":"mt-12 p-6 bg-gray-50 rounded-card max-w-lg mx-auto","children":["$","p",null,{"className":"text-sm text-text-light italic","children":["üí¨ ","$Ld"," \"Even the most sophisticated neural networks occasionally return null. Let's navigate back to more productive paths together!\""]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],"$Le"]}]
4:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
5:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],null],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[9795,["244","static/chunks/244-9e96172f40765e46.js","766","static/chunks/766-95b68f1ef6d722ff.js","177","static/chunks/app/layout-2f63acb31a3ab247.js"],"default"]
d:["$","strong",null,{"children":"Piper Morgan says:"}]
e:["$","$L19",null,{}]
1a:I[8827,["244","static/chunks/244-9e96172f40765e46.js","170","static/chunks/170-49008af47a489cb7.js","953","static/chunks/app/blog/%5Bslug%5D/page-371547b4bde44c9a.js"],"LegacyRedirect"]
1b:I[7887,["244","static/chunks/244-9e96172f40765e46.js","170","static/chunks/170-49008af47a489cb7.js","953","static/chunks/app/blog/%5Bslug%5D/page-371547b4bde44c9a.js"],"BlogPostContent"]
1c:T2431,<figure><img alt="A robot shows his human friend an amazing new multi-adapting plug" src="https://cdn-images-1.medium.com/max/1024/1*rl2Iv59lNeDhQlcUVK27hw.png" /><figcaption>‚ÄúIt powers anything!‚Äù</figcaption></figure><p><em>October 3</em></p><p>Yesterday we built a plugin system for four plugins. If that sounds like over-engineering, let me explain why it‚Äôs not completely ridiculous.</p><h3>The setup</h3><p>GREAT-3A‚Ää‚Äî‚Ääour third major epic in the plugin architecture sequence‚Ää‚Äî‚Äästarted with what seemed like a clear mission: extract our four integrations (Slack, GitHub, Notion, Calendar) into plugins. The gameplan assumed we‚Äôd need to pull apart embedded code and restructure everything around a new plugin interface.</p><p>Then we actually looked at the¬†code.</p><p>Main.py, which the documentation claimed was a bloated 1,107 lines, turned out to be 141 lines of clean microservice orchestration. The integration routers we thought were scattered across the codebase were exactly where they should be, in services/integrations/. We didn&#39;t need extraction. We needed <em>wrapping</em>.</p><p>This is where methodology becomes infrastructure.</p><h3>When four things reveal a¬†pattern</h3><p>Our config pattern analysis told the real story. We had four integrations. Three different approaches to configuration:</p><ul><li><strong>Slack</strong>: Clean service injection with a dedicated SlackConfigService</li><li><strong>GitHub</strong>: Had a config service but the router wasn‚Äôt using¬†it</li><li><strong>Notion</strong>: No config service at all‚Ää‚Äî‚Ääjust reading environment variables directly</li><li><strong>Calendar</strong>: Same as Notion, grabbing credentials straight from the environment</li></ul><p>Pattern compliance? <strong>25%</strong> (one of four doing it¬†right).</p><p>Have you ever discovered your team has been solving the same problem three different ways? You know that moment when you realize nobody talked to each other about the approach before plunging¬†in?</p><p>The question wasn‚Äôt ‚Äúshould we build a plugin system?‚Äù The question was: ‚ÄúWe‚Äôre about to standardize these four things anyway‚Ää‚Äî‚Ääwhat‚Äôs the marginal cost of making it <em>systematic</em>?‚Äù</p><h3>The config compliance sprint</h3><p>Here‚Äôs where the careful methodology meets reality. We tackled config standardization one integration at a time, with our test suite becoming both validator and¬†teacher.</p><p><strong>Phase 1B: Notion</strong> (30 minutes estimated, 23 minutes actual) Created NotionConfigService following the Slack pattern exactly. Not &quot;inspired by&quot; or &quot;similar to&quot;‚Äîwe literally used Slack as a template. One integration at a time. Compliance: 50%.</p><p><strong>Phase 1C: GitHub</strong> (30 minutes estimated, 15 minutes actual)<br> The existing GitHubConfigService was already complete. We just needed to wire it to the router. Update the constructor signature, add the parameter, done. Compliance: 75%.</p><p><strong>Phase 1D: Calendar</strong> (60‚Äì90 minutes estimated, 24 minutes actual) Created CalendarConfigService, updated the adapter, verified the integration. Our test suite immediately validated everything. Compliance: <strong>100%</strong>.</p><p>From 25% to 100% in a single day. Zero regressions. 38 config compliance tests¬†passing.</p><h3>The plugin wrapper¬†pattern</h3><p>Once the config services were standardized, the plugin wrappers became almost trivial. Each one implements the same PiperPlugin interface with six required¬†methods:</p><pre>class NotionPlugin(PiperPlugin):<br>    def get_metadata(self) -&gt; PluginMetadata:<br>        return PluginMetadata(<br>            name=&quot;notion&quot;,<br>            version=&quot;1.0.0&quot;,<br>            description=&quot;Notion workspace integration&quot;,<br>            capabilities=[&quot;routes&quot;, &quot;mcp&quot;]<br>        )<br>    <br>    def get_router(self) -&gt; Optional[APIRouter]:<br>        # Returns FastAPI router with status endpoint<br>        <br>    def is_configured(self) -&gt; bool:<br>        return self.config_service.is_configured()<br>        <br>    async def initialize(self) -&gt; None:<br>        # Startup logic<br>        <br>    async def shutdown(self) -&gt; None:<br>        # Cleanup logic<br>        <br>    def get_status(self) -&gt; Dict[str, Any]:<br>        # Health reporting</pre><p>The wrappers don‚Äôt replace the integration routers‚Ää‚Äî‚Ääthey <em>coordinate</em> them. The router does the work, the plugin wrapper provides lifecycle management and registration.</p><p>Auto-registration happens via module¬†import:</p><p>python</p><pre># At module level<br>_notion_plugin = NotionPlugin()<br>get_plugin_registry().register(_notion_plugin)</pre><p>Import the module, the plugin registers itself. No explicit registration calls scattered through startup¬†code.</p><h3>Why this isn‚Äôt over-engineering</h3><p>Let me address the obvious question: why build plugin infrastructure for exactly four¬†plugins?</p><p>Because we were doing the work¬†anyway.</p><p>The config standardization? That was fixing refactoring artifacts from earlier domain-driven design work. We needed to do it regardless of plugins. The interface definition? That clarified the contract all integrations needed to follow. The registry? That replaced ad-hoc router mounting with systematic lifecycle management.</p><p>The marginal cost of making it a proper plugin system was essentially:</p><ul><li>Define the interface (265¬†lines)</li><li>Create the registry (266¬†lines)</li><li>Write four thin wrappers (417 lines¬†total)</li><li>Build the test suite (126¬†lines)</li></ul><p>About 1,000 lines of infrastructure code. In¬†return:</p><p><strong>The fifth integration becomes trivial.</strong> Not ‚Äúeasier‚Äù‚Ää‚Äî‚Äätrivial. Implement six methods, import the module, done. The test suite validates interface compliance automatically. The registry handles lifecycle. The router mounts¬†itself.</p><p><strong>Zero breaking changes.</strong> All existing functionality preserved. 72/72 tests passing. Config compliance at¬†100%.</p><p><strong>Documentation through structure.</strong> The plugin interface <em>is</em> the documentation. Every plugin implements the same contract, follows the same patterns, reports status the same¬†way.</p><p>Production-ready as an integration hub. Piper Morgan will be able to easily plug in alternative ticket-tracking tools, chat apps, calendars, and team wikis, among other services, all by extending this plug-in architecture.</p><p>This is what ‚ÄúTime Lord Philosophy‚Äù means in practice‚Ää‚Äî‚Äätaking the time to do it right because you‚Äôre doing it anyway, and that investment makes everything afterward easier.</p><h3>The multi-agent coordination moment</h3><p>Worth noting: this wasn‚Äôt solo work. Two AI coding agents (Code and Cursor) were working in parallel across different phases, consistently finishing within minutes of each other. Because the methodology created clear boundaries, when Phase 1C finishes, Phase 1D can start‚Ää‚Äî‚Ääregardless of which agent is handling which. I enjoy watching the photo finishes!</p><p>The Lead Developer‚Äôs post-session satisfaction assessment guessed I found the day ‚Äúenergizing‚Äù rather than exhausting. Low cognitive load from systematic approach, watching the methodology manifest in practice, clear progression feeling productive. It was¬†correct.</p><p>That‚Äôs the feedback loop: methodology reduces overhead, which creates space for noticing patterns, which improves methodology.</p><h3>What this means for¬†you</h3><p>You probably don‚Äôt need a plugin system. Not¬†today.</p><p>But if you find yourself with three or four things that do similar work in different ways, and you‚Äôre about to standardize them anyway‚Ää‚Äî‚Ääthat‚Äôs the moment. The marginal cost of systematization when you‚Äôre already touching every integration is surprisingly low.</p><p>The questions to¬†ask:</p><ul><li>Are we doing this work regardless? (Config standardization, interface clarification, lifecycle management)</li><li>What‚Äôs the marginal cost of making it systematic?</li><li>Does this create infrastructure for future work or just wrap current¬†work?</li></ul><p>For us, the answers were: yes, minimal, and creates infrastructure.</p><p>Your mileage will vary. But don‚Äôt assume ‚Äúplugin system‚Äù automatically means over-engineering. Sometimes it just means finishing what you¬†started.</p><p><em>Next on Building Piper Morgan: The Day Everything Went Right: When Fast Means Unbroken.</em></p><p><em>Have you ever systematized something ‚Äútoo early‚Äù and later been glad you did? Or gone the other way and regretted not building infrastructure sooner?</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=650da4a52669" width="1" height="1" alt=""><hr><p><a href="https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669">The Plugin Architecture Nobody Asked For</a> was originally published in <a href="https://medium.com/building-piper-morgan">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>1d:T2431,<figure><img alt="A robot shows his human friend an amazing new multi-adapting plug" src="https://cdn-images-1.medium.com/max/1024/1*rl2Iv59lNeDhQlcUVK27hw.png" /><figcaption>‚ÄúIt powers anything!‚Äù</figcaption></figure><p><em>October 3</em></p><p>Yesterday we built a plugin system for four plugins. If that sounds like over-engineering, let me explain why it‚Äôs not completely ridiculous.</p><h3>The setup</h3><p>GREAT-3A‚Ää‚Äî‚Ääour third major epic in the plugin architecture sequence‚Ää‚Äî‚Äästarted with what seemed like a clear mission: extract our four integrations (Slack, GitHub, Notion, Calendar) into plugins. The gameplan assumed we‚Äôd need to pull apart embedded code and restructure everything around a new plugin interface.</p><p>Then we actually looked at the¬†code.</p><p>Main.py, which the documentation claimed was a bloated 1,107 lines, turned out to be 141 lines of clean microservice orchestration. The integration routers we thought were scattered across the codebase were exactly where they should be, in services/integrations/. We didn&#39;t need extraction. We needed <em>wrapping</em>.</p><p>This is where methodology becomes infrastructure.</p><h3>When four things reveal a¬†pattern</h3><p>Our config pattern analysis told the real story. We had four integrations. Three different approaches to configuration:</p><ul><li><strong>Slack</strong>: Clean service injection with a dedicated SlackConfigService</li><li><strong>GitHub</strong>: Had a config service but the router wasn‚Äôt using¬†it</li><li><strong>Notion</strong>: No config service at all‚Ää‚Äî‚Ääjust reading environment variables directly</li><li><strong>Calendar</strong>: Same as Notion, grabbing credentials straight from the environment</li></ul><p>Pattern compliance? <strong>25%</strong> (one of four doing it¬†right).</p><p>Have you ever discovered your team has been solving the same problem three different ways? You know that moment when you realize nobody talked to each other about the approach before plunging¬†in?</p><p>The question wasn‚Äôt ‚Äúshould we build a plugin system?‚Äù The question was: ‚ÄúWe‚Äôre about to standardize these four things anyway‚Ää‚Äî‚Ääwhat‚Äôs the marginal cost of making it <em>systematic</em>?‚Äù</p><h3>The config compliance sprint</h3><p>Here‚Äôs where the careful methodology meets reality. We tackled config standardization one integration at a time, with our test suite becoming both validator and¬†teacher.</p><p><strong>Phase 1B: Notion</strong> (30 minutes estimated, 23 minutes actual) Created NotionConfigService following the Slack pattern exactly. Not &quot;inspired by&quot; or &quot;similar to&quot;‚Äîwe literally used Slack as a template. One integration at a time. Compliance: 50%.</p><p><strong>Phase 1C: GitHub</strong> (30 minutes estimated, 15 minutes actual)<br> The existing GitHubConfigService was already complete. We just needed to wire it to the router. Update the constructor signature, add the parameter, done. Compliance: 75%.</p><p><strong>Phase 1D: Calendar</strong> (60‚Äì90 minutes estimated, 24 minutes actual) Created CalendarConfigService, updated the adapter, verified the integration. Our test suite immediately validated everything. Compliance: <strong>100%</strong>.</p><p>From 25% to 100% in a single day. Zero regressions. 38 config compliance tests¬†passing.</p><h3>The plugin wrapper¬†pattern</h3><p>Once the config services were standardized, the plugin wrappers became almost trivial. Each one implements the same PiperPlugin interface with six required¬†methods:</p><pre>class NotionPlugin(PiperPlugin):<br>    def get_metadata(self) -&gt; PluginMetadata:<br>        return PluginMetadata(<br>            name=&quot;notion&quot;,<br>            version=&quot;1.0.0&quot;,<br>            description=&quot;Notion workspace integration&quot;,<br>            capabilities=[&quot;routes&quot;, &quot;mcp&quot;]<br>        )<br>    <br>    def get_router(self) -&gt; Optional[APIRouter]:<br>        # Returns FastAPI router with status endpoint<br>        <br>    def is_configured(self) -&gt; bool:<br>        return self.config_service.is_configured()<br>        <br>    async def initialize(self) -&gt; None:<br>        # Startup logic<br>        <br>    async def shutdown(self) -&gt; None:<br>        # Cleanup logic<br>        <br>    def get_status(self) -&gt; Dict[str, Any]:<br>        # Health reporting</pre><p>The wrappers don‚Äôt replace the integration routers‚Ää‚Äî‚Ääthey <em>coordinate</em> them. The router does the work, the plugin wrapper provides lifecycle management and registration.</p><p>Auto-registration happens via module¬†import:</p><p>python</p><pre># At module level<br>_notion_plugin = NotionPlugin()<br>get_plugin_registry().register(_notion_plugin)</pre><p>Import the module, the plugin registers itself. No explicit registration calls scattered through startup¬†code.</p><h3>Why this isn‚Äôt over-engineering</h3><p>Let me address the obvious question: why build plugin infrastructure for exactly four¬†plugins?</p><p>Because we were doing the work¬†anyway.</p><p>The config standardization? That was fixing refactoring artifacts from earlier domain-driven design work. We needed to do it regardless of plugins. The interface definition? That clarified the contract all integrations needed to follow. The registry? That replaced ad-hoc router mounting with systematic lifecycle management.</p><p>The marginal cost of making it a proper plugin system was essentially:</p><ul><li>Define the interface (265¬†lines)</li><li>Create the registry (266¬†lines)</li><li>Write four thin wrappers (417 lines¬†total)</li><li>Build the test suite (126¬†lines)</li></ul><p>About 1,000 lines of infrastructure code. In¬†return:</p><p><strong>The fifth integration becomes trivial.</strong> Not ‚Äúeasier‚Äù‚Ää‚Äî‚Äätrivial. Implement six methods, import the module, done. The test suite validates interface compliance automatically. The registry handles lifecycle. The router mounts¬†itself.</p><p><strong>Zero breaking changes.</strong> All existing functionality preserved. 72/72 tests passing. Config compliance at¬†100%.</p><p><strong>Documentation through structure.</strong> The plugin interface <em>is</em> the documentation. Every plugin implements the same contract, follows the same patterns, reports status the same¬†way.</p><p>Production-ready as an integration hub. Piper Morgan will be able to easily plug in alternative ticket-tracking tools, chat apps, calendars, and team wikis, among other services, all by extending this plug-in architecture.</p><p>This is what ‚ÄúTime Lord Philosophy‚Äù means in practice‚Ää‚Äî‚Äätaking the time to do it right because you‚Äôre doing it anyway, and that investment makes everything afterward easier.</p><h3>The multi-agent coordination moment</h3><p>Worth noting: this wasn‚Äôt solo work. Two AI coding agents (Code and Cursor) were working in parallel across different phases, consistently finishing within minutes of each other. Because the methodology created clear boundaries, when Phase 1C finishes, Phase 1D can start‚Ää‚Äî‚Ääregardless of which agent is handling which. I enjoy watching the photo finishes!</p><p>The Lead Developer‚Äôs post-session satisfaction assessment guessed I found the day ‚Äúenergizing‚Äù rather than exhausting. Low cognitive load from systematic approach, watching the methodology manifest in practice, clear progression feeling productive. It was¬†correct.</p><p>That‚Äôs the feedback loop: methodology reduces overhead, which creates space for noticing patterns, which improves methodology.</p><h3>What this means for¬†you</h3><p>You probably don‚Äôt need a plugin system. Not¬†today.</p><p>But if you find yourself with three or four things that do similar work in different ways, and you‚Äôre about to standardize them anyway‚Ää‚Äî‚Ääthat‚Äôs the moment. The marginal cost of systematization when you‚Äôre already touching every integration is surprisingly low.</p><p>The questions to¬†ask:</p><ul><li>Are we doing this work regardless? (Config standardization, interface clarification, lifecycle management)</li><li>What‚Äôs the marginal cost of making it systematic?</li><li>Does this create infrastructure for future work or just wrap current¬†work?</li></ul><p>For us, the answers were: yes, minimal, and creates infrastructure.</p><p>Your mileage will vary. But don‚Äôt assume ‚Äúplugin system‚Äù automatically means over-engineering. Sometimes it just means finishing what you¬†started.</p><p><em>Next on Building Piper Morgan: The Day Everything Went Right: When Fast Means Unbroken.</em></p><p><em>Have you ever systematized something ‚Äútoo early‚Äù and later been glad you did? Or gone the other way and regretted not building infrastructure sooner?</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=650da4a52669" width="1" height="1" alt=""><hr><p><a href="https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669">The Plugin Architecture Nobody Asked For</a> was originally published in <a href="https://medium.com/building-piper-morgan">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>f:[["$","$L1a",null,{"slug":"650da4a52669"}],["$","$L1b",null,{"post":{"title":"The Plugin Architecture Nobody Asked For","excerpt":"‚ÄúIt powers anything!‚ÄùOctober 3Yesterday we built a plugin system for four plugins. If that sounds like over-engineering, let me explain why it‚Äôs not completely ridiculous.The setupGREAT-3A ‚Äî our third major epic in the plugin architecture sequence ‚Äî started with what seemed like a clear mission: ...","url":"/blog/the-plugin-architecture-nobody-asked-for","publishedAt":"Oct 9, 2025","publishedAtISO":"Thu, 09 Oct 2025 12:54:52 GMT","author":"christian crumlish","readingTime":"5 min read","tags":["Building in Public"],"guid":"https://medium.com/p/650da4a52669","featuredImage":"https://cdn-images-1.medium.com/max/1024/1*rl2Iv59lNeDhQlcUVK27hw.png","fullContent":"$1c","subtitle":"","canonicalLink":"https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669?source=rss----982e21163f8b---4","thumbnail":"/assets/blog-images/650da4a52669-featured.png","slug":"the-plugin-architecture-nobody-asked-for","workDate":"Oct 9, 2025","workDateISO":"2025-10-09T00:00:00.000Z","category":"building"},"content":{"title":"The Plugin Architecture Nobody Asked For","subtitle":"","content":"$1d","author":"christian crumlish","canonicalLink":"https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669?source=rss----982e21163f8b---4","publishedDate":"2025-10-09T12:54:52.000Z","filename":"rss-650da4a52669.html"}}]]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
1e:I[8175,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"The Plugin Architecture Nobody Asked For | Piper Morgan"}],["$","meta","1",{"name":"author","content":"Christian Crumlish"}],["$","meta","2",{"name":"keywords","content":"AI,Product Management,Methodology,Building in Public"}],["$","meta","3",{"name":"creator","content":"Christian Crumlish"}],["$","meta","4",{"name":"publisher","content":"Christian Crumlish"}],["$","meta","5",{"name":"robots","content":"index, follow"}],["$","meta","6",{"name":"googlebot","content":"index, follow"}],["$","link","7",{"rel":"canonical","href":"https://pipermorgan.ai/"}],["$","meta","8",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","9",{"property":"og:title","content":"The Plugin Architecture Nobody Asked For"}],["$","meta","10",{"property":"og:image","content":"https://pipermorgan.ai/assets/blog-images/650da4a52669-featured.png"}],["$","meta","11",{"property":"og:type","content":"article"}],["$","meta","12",{"property":"article:author","content":"christian crumlish"}],["$","meta","13",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","14",{"name":"twitter:title","content":"The Plugin Architecture Nobody Asked For"}],["$","meta","15",{"name":"twitter:image","content":"https://pipermorgan.ai/assets/blog-images/650da4a52669-featured.png"}],["$","link","16",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x33"}],["$","link","17",{"rel":"icon","href":"/favicon.ico","sizes":"32x32","type":"image/x-icon"}],["$","link","18",{"rel":"icon","href":"/pm-favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","19",{"rel":"icon","href":"/pm-favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","20",{"rel":"icon","href":"/pm-favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","21",{"rel":"apple-touch-icon","href":"/pm-favicon-180.png","sizes":"180x180","type":"image/png"}],["$","link","22",{"rel":"icon","href":"/pm-favicon-192.png","sizes":"192x192","type":"image/png"}],["$","$L1e","23",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
