1:"$Sreact.fragment"
8:I[8393,[],""]
:HL["/_next/static/css/f9342e94655f11e9.css","style"]
2:T1313,
            :root{--primary-teal:#2DD4BF;--primary-teal-text:#0D9488;--text-dark:#1F2937;--text-light:#6B7280;--background:#FFFFFF;--surface:#F9FAFB}
            .dark{--text-dark:#F1F5F9;--text-light:#94A3B8;--background:#0F172A;--surface:#1E293B}
            @font-face{font-family:'Inter';src:url('/fonts/inter-latin.woff2') format('woff2');font-weight:100 900;font-style:normal;font-display:swap;unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}
            *{box-sizing:border-box}
            html{scroll-behavior:smooth;font-size:16px;margin:0;padding:0;border:none;outline:none}
            body{background:var(--background);color:var(--text-dark);font-family:'Inter',-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell',sans-serif;line-height:1.6;margin:0;padding:0;border:none;outline:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}
            nav{border:none !important;outline:none !important}
            h1,h2,h3,h4,h5,h6{font-family:'Hoss Round','Inter',-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif}
            p,span{max-width:75ch;line-height:1.7}
            .text-content div{max-width:75ch;line-height:1.7}
            .text-content{max-width:65ch}
            @media (max-width:640px){
              h1{font-size:1.75rem;line-height:1.2}
              h2{font-size:1.25rem;line-height:1.3}
              h3{font-size:1.1rem;line-height:1.4}
              h4{font-size:1rem;line-height:1.4}
            }
            @media (min-width:641px) and (max-width:768px){
              h1{font-size:2rem;line-height:1.2}
              h2{font-size:1.5rem;line-height:1.3}
              h3{font-size:1.25rem;line-height:1.4}
            }
            @media (prefers-reduced-motion: reduce){
              *{animation-duration:0.01ms !important;animation-iteration-count:1 !important;transition-duration:0.01ms !important}
            }
            a:hover{color:#0D9488;transition:color 0.2s ease}
            .hover-lift:hover{transform:translateY(-2px);transition:transform 0.2s ease}
            button:focus,a:focus{outline:2px solid #2DD4BF;outline-offset:2px;border-radius:4px}
            .skip-to-content{position:absolute;top:-100px;left:0;z-index:999;padding:8px 16px;background:#1F2937;color:white;text-decoration:none;border-radius:0 0 4px 0;transition:top 0.3s}
            .skip-to-content:focus{top:0;outline:2px solid #2DD4BF;outline-offset:2px}
            .section-spacing{margin-bottom:4rem}
            .component-spacing{margin-bottom:1.5rem}
            .micro-spacing{margin-bottom:0.5rem}
            @media (min-width:768px){
              .section-spacing{margin-bottom:6rem}
              .component-spacing{margin-bottom:2rem}
            }
            .site-container{width:100%;max-width:1200px;margin-left:auto;margin-right:auto;padding-left:1rem;padding-right:1rem}
            @media (min-width:640px){.site-container{padding-left:1.5rem;padding-right:1.5rem}}
            @media (min-width:768px){.site-container{padding-left:2rem;padding-right:2rem}}
            @media (min-width:1024px){.site-container{max-width:1200px}}
            @media (min-width:1200px){.site-container{max-width:1200px}}
            .section-padding{padding-top:4rem;padding-bottom:4rem}
            @media (min-width:768px){.section-padding{padding-top:5rem;padding-bottom:5rem}}
            .mx-auto{margin-left:auto;margin-right:auto}
            .max-w-4xl{max-width:56rem}
            .pt-16{padding-top:4rem}
            .pb-8{padding-bottom:2rem}
            .px-4{padding-left:1rem;padding-right:1rem}
            .mb-6{margin-bottom:1.5rem}
            .mb-8{margin-bottom:2rem}
            .text-left{text-align:left}
            .text-center{text-align:center}
            .text-primary-teal-text{color:#0F766E}
            .text-text-dark{color:#1F2937}
            .text-text-light{color:#6B7280}
            .font-bold{font-weight:700}
            .text-4xl{font-size:2.25rem;line-height:2.5rem}
            .text-5xl{font-size:3rem;line-height:1}
            .text-6xl{font-size:3.75rem;line-height:1}
            .text-lg{font-size:1.125rem;line-height:1.75rem}
            .text-xl{font-size:1.25rem;line-height:1.75rem}
            .leading-tight{line-height:1.25}
            .leading-relaxed{line-height:1.625}
            .min-h-screen{min-height:100vh}
            @media (min-width:768px){
              .md\:pt-24{padding-top:6rem}
              .md\:pb-12{padding-bottom:3rem}
              .md\:text-5xl{font-size:3rem;line-height:1}
              .md\:text-xl{font-size:1.25rem;line-height:1.75rem}
            }
            @media (min-width:1024px){
              .lg\:text-6xl{font-size:3.75rem;line-height:1}
            }
          0:{"P":null,"b":"_u9fLnF4eSiN3NagRoSyu","p":"","c":["","blog","battle-testing-github-integration-when-recovery-becomes-learning",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","battle-testing-github-integration-when-recovery-becomes-learning","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f9342e94655f11e9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"font-inter","children":[["$","head",null,{"children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                const theme = localStorage.getItem('theme') ||\n                  (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n                if (theme === 'dark') {\n                  document.documentElement.classList.add('dark');\n                  document.body.classList.add('dark');\n                }\n              })();\n            "}}],["$","link",null,{"rel":"dns-prefetch","href":"//pipermorgan.ai"}],["$","link",null,{"rel":"preconnect","href":"https://pipermorgan.ai"}],["$","link",null,{"rel":"preload","as":"image","href":"/assets/pm-logo.png"}],["$","link",null,{"rel":"preload","href":"/fonts/inter-latin.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preload","href":"/fonts/HossRound-Regular.woff2","as":"font","type":"font/woff2","crossOrigin":"anonymous"}],["$","style",null,{"dangerouslySetInnerHTML":{"__html":"$2"}}]]}],"$L3"]}]]}],{"children":["blog","$L4",{"children":[["slug","battle-testing-github-integration-when-recovery-becomes-learning","d"],"$L5",{"children":["__PAGE__","$L6",{},null,false]},null,false]},null,false]},null,false],"$L7",false]],"m":"$undefined","G":["$8",[]],"s":false,"S":true}
9:I[9119,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"ClientLayout"]
a:I[7555,[],""]
b:I[1295,[],""]
c:I[6874,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","144","static/chunks/144-1b443e029a921717.js","674","static/chunks/674-1d7d34e8b36e9d1f.js","831","static/chunks/app/blog/page-666765c672eae567.js"],""]
10:I[9665,[],"OutletBoundary"]
12:I[4911,[],"AsyncMetadataOutlet"]
14:I[9665,[],"ViewportBoundary"]
16:I[9665,[],"MetadataBoundary"]
17:"$Sreact.suspense"
3:["$","body",null,{"className":"font-sans antialiased","children":[["$","$L9",null,{"children":["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen","children":["$","div",null,{"className":"site-container max-w-4xl pt-16 md:pt-24 pb-8 md:pb-12 text-center","children":[["$","div",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-8xl md:text-9xl font-bold text-primary-teal-text mb-4","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-semibold text-text-dark mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-xl text-text-light leading-relaxed max-w-2xl mx-auto","children":"Looks like this page got lost in the AI training data. Don't worry ‚Äì even the best algorithms make mistakes sometimes."}]]}],["$","div",null,{"className":"mb-12","children":[["$","h3",null,{"className":"text-xl font-semibold text-text-dark mb-6","children":"Where would you like to go instead?"}],["$","div",null,{"className":"grid md:grid-cols-2 gap-6 max-w-2xl mx-auto","children":[["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üè† Homepage"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Start from the beginning of our AI PM journey"}]]}],["$","$Lc",null,{"href":"/how-it-works","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"‚öôÔ∏è How It Works"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Discover our AI-powered product management methodology"}]]}]]}],["$","div",null,{"className":"space-y-4","children":[["$","$Lc",null,{"href":"/what-weve-learned","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üí° What We've Learned"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Building-in-public insights and breakthroughs"}]]}],["$","$Lc",null,{"href":"/blog","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üìù Journey"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Follow our building-in-public blog posts"}]]}],["$","$Lc",null,{"href":"/get-involved","className":"block p-4 bg-surface rounded-card hover:bg-gray-50 transition-colors group","children":[["$","h4",null,{"className":"font-semibold text-text-dark group-hover:text-primary-teal-text","children":"üöÄ Get Involved"}],["$","p",null,{"className":"text-sm text-text-light mt-1","children":"Join our community and stay updated"}]]}]]}]]}]]}],["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-text-light mb-6","children":"Still can't find what you're looking for?"}],["$","$Lc",null,{"href":"/get-involved","className":"inline-flex items-center justify-center font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:transform-none bg-primary-teal text-white hover:bg-teal-600 focus:ring-primary-teal shadow-component hover:shadow-component-hover hover:-translate-y-0.5 hover:scale-105 font-bold text-lg px-8 py-4 text-lg rounded-button","aria-label":"$undefined","children":[false,"Get Help & Stay Updated"]}]]}],["$","div",null,{"className":"mt-12 p-6 bg-gray-50 rounded-card max-w-lg mx-auto","children":["$","p",null,{"className":"text-sm text-text-light italic","children":["üí¨ ","$Ld"," \"Even the most sophisticated neural networks occasionally return null. Let's navigate back to more productive paths together!\""]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],"$Le"]}]
4:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
5:["$","$1","c",{"children":[null,["$","$La",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
6:["$","$1","c",{"children":["$Lf",null,["$","$L10",null,{"children":["$L11",["$","$L12",null,{"promise":"$@13"}]]}]]}]
7:["$","$1","h",{"children":[null,[["$","$L14",null,{"children":"$L15"}],null],["$","$L16",null,{"children":["$","div",null,{"hidden":true,"children":["$","$17",null,{"fallback":null,"children":"$L18"}]}]}]]}]
19:I[9795,["874","static/chunks/874-668c89038fa04eb8.js","212","static/chunks/212-369ef96a260e510f.js","177","static/chunks/app/layout-9ed54623e803ece8.js"],"default"]
d:["$","strong",null,{"children":"Piper Morgan says:"}]
e:["$","$L19",null,{}]
1a:I[7887,["874","static/chunks/874-668c89038fa04eb8.js","953","static/chunks/app/blog/%5Bslug%5D/page-63f1c4c60df8aece.js"],"BlogPostContent"]
1b:T9740,<section name="9bbb" class="section section--body section--first"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h3 name="2aac" id="2aac" class="graf graf--h3 graf--leading graf--title">Battle-Testing Your Architecture: When Recovery Becomes¬†Learning</h3><figure name="7dab" id="7dab" class="graf graf--figure graf--startsWithDoubleQuote graf-after--h3"><img class="graf-image" data-image-id="1*KRhqHk-iQgzSmh5TGFcPfA.png" data-width="1536" data-height="1024" data-is-featured="true" alt="A person dresses a skeptical robot in a suit of armor" src="https://cdn-images-1.medium.com/max/800/1*KRhqHk-iQgzSmh5TGFcPfA.png"><figcaption class="imageCaption">‚ÄúI want you to stay¬†safe.‚Äù</figcaption></figure><p name="41de" id="41de" class="graf graf--p graf-after--figure"><em class="markup--em markup--p-em">June 29</em></p><p name="53b8" id="53b8" class="graf graf--p graf--hasDropCapModel graf--hasDropCap graf-after--p"><span class="graf-dropCap">F</span>resh off implementing GitHub integration in what felt like record time, I was ready to test our freshly implemented GitHub integration end-to-end. PM-011 was finally complete‚Ää‚Äî‚Ääcomprehensive documentation updated, architectural patterns discovered, integration handlers properly registered. Time for the victory lap: run the test, watch it create a real GitHub issue, close the ticket.</p><p name="e564" id="e564" class="graf graf--p graf-after--p">Three hours later, I‚Äôd accidentally triggered AI security warnings with a dad joke about Personal Access Tokens, lost my entire Docker database to a directory rename, and learned why ‚Äúredo it properly‚Äù beats ‚Äúpatch the recovery‚Äù every single time.</p><p name="81b7" id="81b7" class="graf graf--p graf-after--p">This is the story of how battle-testing integration reveals everything your development environment was hiding from you.</p><h3 name="568d" id="568d" class="graf graf--h3 graf-after--p">When victory laps become obstacle¬†courses</h3><p name="1578" id="1578" class="graf graf--p graf-after--h3">The GitHub integration was architecturally sound. We‚Äôd established clean patterns‚Ää‚Äî‚Äärepository enrichment, singleton orchestration engine, proper error handling. The documentation was comprehensive. The test script was ready.</p><p name="7225" id="7225" class="graf graf--p graf-after--p">All I needed to do was verify the GITHUB_TOKEN was set, run <code class="markup--code markup--p-code">test_github_integration_simple.py</code>, and watch our AI PM assistant create its first real GitHub issue. Classic Friday afternoon testing of completed work.</p><h3 name="ac8b" id="ac8b" class="graf graf--h3 graf-after--p">The ‚ÄúAll Access Pat‚Äù security¬†moment</h3><p name="2fe6" id="2fe6" class="graf graf--p graf-after--h3">The first hiccup was almost too ridiculous to believe. I was setting up the GitHub token and made what I thought was a harmless pun, saying ‚Äúcall me All Access Pat‚Äù (because PAT = Personal Access Token, get it?).</p><p name="c3e7" id="c3e7" class="graf graf--p graf-after--p">Cursor immediately triggered security warnings about potential prompt injection attempts.</p><p name="bf15" id="bf15" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Classic Little Bobby Drop-Tables moment</strong>: My innocent dad joke about access tokens looked exactly like someone trying to manipulate the AI with fake authorization credentials. The security system was doing exactly what it should do‚Ää‚Äî‚Äätreat unexpected ‚Äúaccess‚Äù language with suspicion.</p><h3 name="1622" id="1622" class="graf graf--h3 graf-after--p">The recovery cascade¬†begins</h3><p name="de23" id="de23" class="graf graf--p graf-after--h3">Once I got past the token setup comedy, the real fun started. The test script was missing. Not ‚Äúcan‚Äôt find it‚Äù‚Ää‚Äî‚Ääactually deleted from the filesystem.</p><p name="4c12" id="4c12" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Discovery process</strong>:</p><ol class="postList"><li name="8e5a" id="8e5a" class="graf graf--li graf-after--p">Check current directory: Not there</li><li name="8664" id="8664" class="graf graf--li graf-after--li">Check git history: Never committed</li><li name="ac7a" id="ac7a" class="graf graf--li graf-after--li">Check trash folder: Found it!</li><li name="28d9" id="28d9" class="graf graf--li graf-after--li">Restore and verify: Working again</li></ol><p name="592e" id="592e" class="graf graf--p graf-after--li">This should have been a warning sign. When your test infrastructure isn‚Äôt under version control, you‚Äôre already operating without a safety net.</p><h3 name="e5e6" id="e5e6" class="graf graf--h3 graf-after--p">The Docker data loss revelation</h3><p name="6768" id="6768" class="graf graf--p graf-after--h3">But the missing test script was just the warm-up act. When I tried to run the recovered test, the database was completely empty. Not ‚Äúmissing some data‚Äù‚Ää‚Äî‚Ääzero tables, like a fresh PostgreSQL installation.</p><p name="6e07" id="6e07" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Root cause discovery</strong>: I‚Äôd renamed the project directory earlier in the week. Our Docker setup used bind mounts that were path-dependent:</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="yaml" name="49be" id="49be" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Fragile approach (what we had)</span><br /><span class="hljs-attr">volumes:</span><br />  <span class="hljs-bullet">-</span> <span class="hljs-string">./data/postgres:/var/lib/postgresql/data</span><br /><br /><span class="hljs-comment"># Robust approach (what we should have had)  </span><br /><span class="hljs-attr">volumes:</span><br />  <span class="hljs-attr">piper_postgres_data:</span><br />    <span class="hljs-attr">name:</span> <span class="hljs-string">piper_postgres_data_v1</span></span></pre><p name="46cf" id="46cf" class="graf graf--p graf-after--pre">The directory rename broke the bind mount path, so Docker created a fresh database volume. All our test data, project configurations, and GitHub integration setup: gone.</p><h3 name="153a" id="153a" class="graf graf--h3 graf-after--p">The backup archaeology expedition</h3><p name="60e1" id="60e1" class="graf graf--p graf--startsWithDoubleQuote graf-after--h3">‚ÄúNo problem,‚Äù I thought. ‚ÄúI‚Äôll restore from the backup I made last week.‚Äù</p><p name="4bce" id="4bce" class="graf graf--p graf-after--p">The 46MB backup file looked promising. Restored it carefully, restarted services, checked the database‚Ä¶</p><p name="825e" id="825e" class="graf graf--p graf-after--p">Still empty.</p><p name="98bb" id="98bb" class="graf graf--p graf-after--p">Turns out the backup was a completely empty PostgreSQL cluster. I‚Äôd successfully backed up nothing and didn‚Äôt realize it until I needed it. Classic backup validation failure‚Ää‚Äî‚Äänever tested restoration until the emergency.</p><p name="eec1" id="eec1" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Backup lesson</strong>: The only backup you can trust is one you‚Äôve successfully restored from.</p><h3 name="caba" id="caba" class="graf graf--h3 graf-after--p">Confidence meets consequences</h3><p name="844a" id="844a" class="graf graf--p graf-after--h3">After our systematic approach to GitHub integration‚Ää‚Äî‚Ääfollowing established patterns, writing proper tests, documenting everything‚Ää‚Äî‚ÄäI was feeling pretty good about our architectural discipline. We‚Äôd built something clean, tested it thoroughly, and documented the patterns for future use.</p><p name="bce6" id="bce6" class="graf graf--p graf-after--p">(Spoiler alert: there is a meta-pattern clearly at at work where after every victory lap I get my comeuppance again.)</p><p name="884c" id="884c" class="graf graf--p graf-after--p">Time for the victory lap: a simple test to create a GitHub issue and verify the end-to-end flow worked as intended. At this point I was starting to take success for granted. What could go wrong with testing a system we‚Äôd just built systematically?</p><p name="3452" id="3452" class="graf graf--p graf-after--p">Turns out: everything.</p><h3 name="f6a7" id="f6a7" class="graf graf--h3 graf-after--p">The cascade of small¬†failures</h3><p name="c353" id="c353" class="graf graf--p graf-after--h3">The first sign of trouble was subtle: the test script I‚Äôd created the day before was missing. Not deleted‚Ää‚Äî‚Ääjust‚Ä¶ gone. Disappeared from the file system with no trace in the git history.</p><p name="400a" id="400a" class="graf graf--p graf-after--p">No problem, I thought. I‚Äôll just recreate it. It was a simple script.</p><p name="6af8" id="6af8" class="graf graf--p graf-after--p">Except when I tried to run the new test, the GitHub token wasn‚Äôt being recognized. Then I realized the¬†<code class="markup--code markup--p-code">.env</code> file was named¬†<code class="markup--code markup--p-code">.env.txt</code> somehow. Then fixing that revealed that the database was empty‚Äîall my test projects had vanished.</p><p name="93fc" id="93fc" class="graf graf--p graf-after--p">Each problem was small and solvable individually. But they started compounding: fixing the token issue revealed the database problem, fixing the database revealed missing dependencies, fixing dependencies revealed that my virtual environment had somehow disappeared.</p><p name="c031" id="c031" class="graf graf--p graf-after--p">This is how systems fail in the real world: not with dramatic crashes, but with cascading small failures that expose hidden fragilities.</p><p name="c9af" id="c9af" class="graf graf--p graf-after--p">(Note: Did I wonder why so many things seemed to have gone wrong at once? No, I did not. Like a chatbot, I got absorbed in the chase.)</p><h3 name="875a" id="875a" class="graf graf--h3 graf-after--p">The nuclear option¬†moment</h3><p name="3d3f" id="3d3f" class="graf graf--p graf-after--h3">The most dramatic failure came when I was trying to clean up some corrupted git state. My spidey sense was tingling when Claude recommended I use this command:</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="bash" name="3271" id="3271" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-built_in">rm</span> -rf .*</span></pre><p name="eaa4" id="eaa4" class="graf graf--p graf-after--pre">Seemed reasonable, right? Remove all the hidden files and start fresh.</p><p name="aa2c" id="aa2c" class="graf graf--p graf-after--p">Except¬†<code class="markup--code markup--p-code">.*</code> includes¬†<code class="markup--code markup--p-code">.git</code>.</p><p name="1ead" id="1ead" class="graf graf--p graf-after--p">I‚Äôd just deleted the entire git repository, meaning anything I had not committed to the remote repository (and I was not, at this point as of yet, disciplined about committing my changes after every session) was gone, daddy, gone.</p><p name="ab19" id="ab19" class="graf graf--p graf-after--p">There‚Äôs a special kind of silence that follows the moment you realize you‚Äôve just destroyed something that took weeks to build. It‚Äôs the sound of all your confidence in your own competence evaporating at once.</p><h3 name="78b6" id="78b6" class="graf graf--h3 graf-after--p">The recovery discipline</h3><p name="54dd" id="54dd" class="graf graf--p graf-after--h3">Here‚Äôs what I learned about resilience: it‚Äôs not about avoiding failures. It‚Äôs about recovering from them systematically.</p><p name="bf0b" id="bf0b" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Step 1: Stop and assess</strong> Instead of panicking and trying random fixes (OK, after panicking for a bit and then taking some deep breaths), I forced myself to stop and understand exactly what I‚Äôd lost and what I still had.</p><p name="9852" id="9852" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Step 2: Use external backups</strong> The git repository was gone locally, but GitHub still had pretty much everything. Fresh clone, reconfigure SSH, back in business.</p><p name="69be" id="69be" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Step 3: Fix root causes, not symptoms</strong> Instead of just restoring the missing test script, I figured out why it had disappeared in the first place.</p><p name="4d9a" id="4d9a" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Step 4: Document what you learn</strong> Every failure became a pattern to avoid in the future.</p><h3 name="3def" id="3def" class="graf graf--h3 graf-after--p">The Docker data persistence revelation</h3><p name="2b46" id="2b46" class="graf graf--p graf-after--h3">The biggest architectural lesson came from the database failure. I‚Äôd been using Docker bind mounts for data persistence, mapping local directories to container volumes. Simple, straightforward, works great‚Ä¶ until you rename your project directory.</p><p name="4a09" id="4a09" class="graf graf--p graf-after--p">Which I‚Äôd done recently. See the first repository for the proof of concept was called piper-morgan. When I started the ‚Äúreal‚Äù project, Claude suggested calling the new repository piper-morgan-platform (it still says that in some of the docs) and I didn‚Äôt think much of it at the time. Later I changed the github repository name to piper-morgan-product, which seemed like a more reasonable goal, although now I don‚Äôt know.</p><p name="2fb2" id="2fb2" class="graf graf--p graf-after--p">But more to the point, I had renamed my local folder on my Mac from piper-morgan-platform to just piper-morgan and this is what broke stuff, not surprisingly.</p><p name="0991" id="0991" class="graf graf--p graf-after--p">Suddenly the database containers were looking for data in (sometimes hardcoded) paths that no longer existed. All my test projects: gone. All my GitHub integration configurations: gone. All evidence that the system had ever worked: gone.</p><p name="9e69" id="9e69" class="graf graf--p graf-after--p">This led to a complete overhaul of our Docker data strategy:</p><p name="2d5e" id="2d5e" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Before</strong>: Bind mounts tied to specific directory paths</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="bash" name="f4a2" id="f4a2" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content">volumes:<br />  - ./data/postgres:/var/lib/postgresql/data  <span class="hljs-comment"># Fragile!</span></span></pre><p name="1256" id="1256" class="graf graf--p graf-after--pre"><strong class="markup--strong markup--p-strong">After</strong>: Named Docker volumes managed by Docker itself</p><p name="ec68" id="ec68" class="graf graf--p graf-after--p">yaml</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="yaml" name="a6d8" id="a6d8" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-attr">volumes:</span><br />  <span class="hljs-attr">piper_postgres_data:</span><br />    <span class="hljs-attr">name:</span> <span class="hljs-string">piper_postgres_data_v1</span></span></pre><p name="547c" id="547c" class="graf graf--p graf-after--pre">The new approach survives directory renames, project moves, and filesystem changes. It‚Äôs what we should have been using from the start.</p><p name="6f4f" id="6f4f" class="graf graf--p graf-after--p">Now, they tell me!</p><h3 name="f762" id="f762" class="graf graf--h3 graf-after--p">The environment reconstruction challenge</h3><p name="b406" id="b406" class="graf graf--p graf-after--h3">Rebuilding the development environment revealed how many assumptions we‚Äôd baked into our setup process. Things that ‚Äújust worked‚Äù when set up incrementally over weeks became puzzles when they needed to work from scratch.</p><p name="69fb" id="69fb" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Missing documentation</strong>: Setup steps that seemed obvious when you just did them</p><p name="635f" id="635f" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Hidden dependencies</strong>: Environment variables that were set but not documented</p><p name="d1be" id="d1be" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Tool version assumptions</strong>: Things that worked with specific Python/Node/Docker versions</p><p name="c360" id="c360" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Path dependencies</strong>: Hardcoded references to directory structures</p><p name="d102" id="d102" class="graf graf--p graf-after--p">Each missing piece was small. Together, they made the system much more fragile than we‚Äôd realized.</p><p name="1abf" id="1abf" class="graf graf--p graf-after--p">I‚Äôve been hearing ‚Äúworks on my machine!‚Äù from engineers half my life and now I really understand the feeling. This is why battle-testing matters: it reveals the difference between ‚Äúworks in my current setup‚Äù and ‚Äúworks reliably anywhere.‚Äù</p><h3 name="22e3" id="22e3" class="graf graf--h3 graf-after--p">Our growing pattern¬†catalog</h3><p name="704e" id="704e" class="graf graf--p graf-after--h3">Battle-testing revealed patterns we hadn‚Äôt documented during the smooth implementation phase:</p><p name="d8f4" id="d8f4" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Pattern #13: Repository Domain Model Conversion</strong> We discovered that repositories were returning database models instead of domain models in some cases, causing AttributeError exceptions when business logic tried to use domain methods.</p><p name="5fbe" id="5fbe" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Pattern #14: Async Relationship Eager Loading</strong><br>¬†Async SQLAlchemy can‚Äôt lazy-load relationships outside the session context, leading to ‚Äúgreenlet_spawn‚Äù errors. Always eager load relationships that will be accessed after the query.</p><p name="780b" id="780b" class="graf graf--p graf-after--p">These weren‚Äôt patterns we designed‚Ää‚Äî‚Ääthey were patterns we discovered through failure, often the best kind.</p><p name="8954" id="8954" class="graf graf--p graf-after--p">Real-world testing doesn‚Äôt just validate your architecture; it teaches you about architectural requirements you didn‚Äôt know you had.</p><h3 name="09f2" id="09f2" class="graf graf--h3 graf-after--p">The discipline of documenting under¬†pressure</h3><p name="868e" id="868e" class="graf graf--p graf-after--h3">Here‚Äôs what impressed me about our systematic approach: even in the middle of debugging and recovery, we maintained documentation discipline.</p><p name="9211" id="9211" class="graf graf--p graf-after--p">Five documentation files got updated with the lessons learned:</p><ul class="postList"><li name="bdfe" id="bdfe" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">architecture.md</strong>: Docker best practices and data persistence lessons</li><li name="5f52" id="5f52" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">pattern-catalog.md</strong>: New patterns discovered through failure</li><li name="9407" id="9407" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">technical-spec.md</strong>: Workflow execution return structure clarifications</li><li name="3b79" id="3b79" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">data-model.md</strong>: Model distinctions and relationship loading guidance</li><li name="61a1" id="61a1" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">api-reference.md</strong>: Actual response structures vs. expected ones</li></ul><p name="b2a8" id="b2a8" class="graf graf--p graf-after--li">Documentation under pressure is different from documentation during smooth development. It captures not just what works, but what fails and why.</p><h3 name="c844" id="c844" class="graf graf--h3 graf-after--p">Resilience vs. robustness</h3><p name="2087" id="2087" class="graf graf--p graf-after--h3">Battle-testing taught me the difference between robust systems and resilient systems.</p><p name="3916" id="3916" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Robust systems</strong> are designed to avoid failures. They have comprehensive error handling, validation, and safety checks.</p><p name="ad79" id="ad79" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Resilient systems</strong> are designed to recover from failures gracefully. They assume failures will happen and provide systematic ways to detect, diagnose, and recover from them.</p><p name="1c4a" id="1c4a" class="graf graf--p graf-after--p">Our GitHub integration was robust‚Ää‚Äî‚Ääit handled API failures, missing configuration, and invalid inputs gracefully. But our development environment wasn‚Äôt resilient‚Ää‚Äî‚Ääit had hidden dependencies and fragile data persistence that made recovery difficult.</p><p name="301f" id="301f" class="graf graf--p graf-after--p">Both matter. But resilience, it turns out, is what lets you sleep at night.</p><h3 name="115e" id="115e" class="graf graf--h3 graf-after--p">Discovering hidden brittleness</h3><p name="bbf3" id="bbf3" class="graf graf--p graf-after--h3">The most sobering lesson was realizing how much hidden brittleness existed in what seemed like a solid system.</p><p name="ed8c" id="ed8c" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Environment brittleness</strong>: Dependencies on specific directory names and paths</p><p name="6f0e" id="6f0e" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Data brittleness</strong>: Persistence strategies that broke under common operations</p><p name="5825" id="5825" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Configuration brittleness</strong>: Setup assumptions that weren‚Äôt documented</p><p name="0080" id="0080" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Tool brittleness</strong>: Version dependencies that weren‚Äôt explicit</p><p name="7c46" id="7c46" class="graf graf--p graf-after--p">None of these showed up during normal development. They only became visible when we needed to recover from failures or recreate the environment from scratch. Much of this no doubt can be attributed to my not being a true developer and not having developed many good habits yet, but I‚Äôve been getting a crash course!</p><p name="aee6" id="aee6" class="graf graf--p graf-after--p">This is why you need to battle-test early and often. Not just to find bugs, but to find fragilities.</p><h3 name="6bfe" id="6bfe" class="graf graf--h3 graf-after--p">Systematic recovery¬†methods</h3><p name="72a4" id="72a4" class="graf graf--p graf-after--h3">What saved us during the recovery wasn‚Äôt having perfect systems‚Ää‚Äî‚Ääit was having systematic approaches to recovery.</p><p name="d1b1" id="d1b1" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Git discipline</strong>: Everything important was committed and pushed to remote repositories</p><p name="cdf9" id="cdf9" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Documentation culture</strong>: Even informal setup notes were preserved in README files</p><p name="0b01" id="0b01" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Environment isolation</strong>: Docker meant we could recreate infrastructure without affecting the host system</p><p name="61a2" id="61a2" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Pattern recognition</strong>: Previous recovery experiences provided templates for this one</p><p name="1f90" id="1f90" class="graf graf--p graf-after--p">The systematic approach to development we‚Äôd been building included systematic approaches to recovery.</p><h3 name="8347" id="8347" class="graf graf--h3 graf-after--p">The infrastructure as code revelation</h3><p name="37fd" id="37fd" class="graf graf--p graf-after--h3">One of the most valuable outcomes of the battle-testing session was realizing we needed to treat our development environment as code as well, not just as accumulated configuration knowledge.</p><p name="bb79" id="bb79" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Before</strong>: Incremental setup with manual configuration</p><p name="b6de" id="b6de" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">After</strong>: Reproducible environment defined in version-controlled files</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="yaml" name="3ab6" id="3ab6" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment"># Everything defined explicitly</span><br /><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br /><span class="hljs-attr">services:</span><br />  <span class="hljs-attr">postgres:</span><br />    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:15</span><br />    <span class="hljs-attr">environment:</span><br />      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">${POSTGRES_DB}</span><br />      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">${POSTGRES_USER}</span><br />      <span class="hljs-attr">POSTGRES_PASSWORD:</span> <span class="hljs-string">${POSTGRES_PASSWORD}</span><br />    <span class="hljs-attr">volumes:</span><br />      <span class="hljs-bullet">-</span> <span class="hljs-string">piper_postgres_data:/var/lib/postgresql/data</span><br />    <span class="hljs-attr">healthcheck:</span><br />      <span class="hljs-attr">test:</span> [<span class="hljs-string">&quot;CMD-SHELL&quot;</span>, <span class="hljs-string">&quot;pg_isready&quot;</span>]<br />      <span class="hljs-attr">interval:</span> <span class="hljs-string">30s</span><br />      <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br />      <span class="hljs-attr">retries:</span> <span class="hljs-number">5</span></span></pre><p name="b474" id="b474" class="graf graf--p graf-after--pre">This approach makes failures recoverable and environments reproducible.</p><h3 name="e8f1" id="e8f1" class="graf graf--h3 graf-after--p">The testing¬†pyramid</h3><p name="5ec2" id="5ec2" class="graf graf--p graf-after--h3">The battle-testing experience also revealed gaps in our testing strategy. We had good unit tests and integration tests, but we were missing <strong class="markup--strong markup--p-strong">environment tests</strong>‚Ää‚Äî‚Äätests that verify the system can be set up and torn down reliably.</p><p name="00bf" id="00bf" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Unit tests</strong>: Individual components work correctly ‚úÖ</p><p name="4db1" id="4db1" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Integration tests</strong>: Components work together correctly ‚úÖ</p><p name="c951" id="c951" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Environment tests</strong>: System can be deployed and operated reliably ‚ùå</p><p name="3600" id="3600" class="graf graf--p graf-after--p">That missing layer is what allowed environment brittleness to accumulate without being detected.</p><p name="dba3" id="dba3" class="graf graf--p graf-after--p">Real-world systems need all three layers to be truly reliable.</p><h3 name="6303" id="6303" class="graf graf--h3 graf-after--p">When failure becomes feature discovery</h3><p name="bbb5" id="bbb5" class="graf graf--p graf-after--h3">The most unexpected outcome of the battle-testing session was discovering features we didn‚Äôt know we‚Äôd built.</p><p name="c00c" id="c00c" class="graf graf--p graf-after--p">During recovery, we realized that our error handling was actually quite sophisticated. The system degraded gracefully when GitHub wasn‚Äôt available, provided helpful error messages when configuration was missing, and maintained functionality even when external services failed.</p><p name="8dc5" id="8dc5" class="graf graf--p graf-after--p">We‚Äôd built resilient features without realizing it, because we‚Äôd followed good patterns consistently.</p><p name="01a9" id="01a9" class="graf graf--p graf-after--p">Sometimes you don‚Äôt know how good your architecture is until you stress-test it.</p><p name="53fa" id="53fa" class="graf graf--p graf-after--p">Thanks, past us!</p><h3 name="0525" id="0525" class="graf graf--h3 graf-after--p">The compound value of systematic approaches</h3><p name="ff03" id="ff03" class="graf graf--p graf-after--h3">Looking back at the battle-testing session, what struck me most was how the systematic approaches we‚Äôd been developing throughout the week compounded to help with recovery.</p><p name="00a5" id="00a5" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Systematic documentation</strong> meant we could reconstruct what we‚Äôd built <strong class="markup--strong markup--p-strong">Systematic testing</strong> meant we could verify recovery quickly <strong class="markup--strong markup--p-strong">Systematic patterns</strong> meant we could rebuild missing pieces following established approaches¬†<br><strong class="markup--strong markup--p-strong">Systematic git discipline</strong> meant we never lost source code, even when local environments failed</p><p name="3743" id="3743" class="graf graf--p graf-after--p">Each individual practice was helpful. Together, they made recovery almost routine instead of catastrophic.</p><h3 name="f7ff" id="f7ff" class="graf graf--h3 graf-after--p">Operational maturity</h3><p name="b34a" id="b34a" class="graf graf--p graf-after--h3">Battle-testing marked a transition from development maturity to operational maturity. We stopped thinking just about whether code worked and started thinking about whether systems could be operated reliably.</p><p name="71b0" id="71b0" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Development questions</strong>: Does the feature work? Are the tests passing? Is the code clean?</p><p name="6a93" id="6a93" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Operational questions</strong>: Can this be deployed reliably? What happens when it fails? How do we recover from problems? How do we detect issues before users do?</p><p name="5382" id="5382" class="graf graf--p graf-after--p">Both sets of questions matter, but operational maturity is what separates hobby projects from production systems.</p><h3 name="002e" id="002e" class="graf graf--h3 graf-after--p">The documentation debt that¬†helps</h3><p name="ba3d" id="ba3d" class="graf graf--p graf-after--h3">One unexpected discovery was that some of our ‚Äúdocumentation debt‚Äù was actually helpful during recovery. Informal notes, commit messages, and even commented-out code provided context about decisions we‚Äôd forgotten making.</p><p name="0ed4" id="0ed4" class="graf graf--p graf-after--p">Not all documentation needs to be polished and comprehensive. Sometimes breadcrumbs are enough to help you retrace your steps when you need to understand how something broke.</p><p name="6ad8" id="6ad8" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Formal documentation</strong>: Architectural decisions, API contracts, deployment procedures</p><p name="1173" id="1173" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Informal documentation</strong>: Debug notes, commit messages, TODO comments</p><p name="85e7" id="85e7" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Living documentation</strong>: Code that explains itself through good naming and structure</p><p name="05f8" id="05f8" class="graf graf--p graf-after--p">All three types proved valuable during battle-testing.</p><h3 name="35c5" id="35c5" class="graf graf--h3 graf-after--p">Bringing it all¬†home</h3><p name="9e20" id="9e20" class="graf graf--p graf-after--h3">This battle-testing session completed a sequence that started with architectural cleanup, continued through systematic implementation, and ended with real-world validation.</p><p name="d284" id="d284" class="graf graf--p graf-after--p">Each phase taught different lessons:</p><ul class="postList"><li name="4eb2" id="4eb2" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Cleanup</strong>: Face technical debt honestly and systematically</li><li name="1d20" id="1d20" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Implementation</strong>: Follow established patterns instead of reinventing</li><li name="70ba" id="70ba" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Testing</strong>: Build and document resilience, not just robustness</li><li name="28a6" id="28a6" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Battle-testing</strong>: Validate operational maturity, not just development maturity</li></ul><p name="dba0" id="dba0" class="graf graf--p graf-after--li">Together, they represent a complete cycle from architectural confusion to operational confidence.</p><h3 name="ac4b" id="ac4b" class="graf graf--h3 graf-after--p">When architecture survives contact with¬†reality</h3><p name="1b65" id="1b65" class="graf graf--p graf-after--h3">The ultimate test of architecture isn‚Äôt whether it works in ideal conditions. It‚Äôs whether it survives contact with reality: missing files, corrupted environments, operator errors, and unexpected failures.</p><p name="705e" id="705e" class="graf graf--p graf-after--p">Our systematic approach to development survived this test. Not because we didn‚Äôt encounter failures, but because we‚Äôd built systematic approaches to recovery alongside systematic approaches to development.</p><p name="00ce" id="00ce" class="graf graf--p graf-after--p">This is what mature engineering looks like: not the absence of problems, but the presence of systematic solutions to inevitable problems.</p><h3 name="86a2" id="86a2" class="graf graf--h3 graf-after--p">The resilience dividend</h3><p name="b18e" id="b18e" class="graf graf--p graf-after--h3">The battle-testing session was frustrating while it was happening, but it paid a resilience dividend immediately. The next time we encountered environment issues, database problems, or configuration errors, we had established patterns for diagnosing and recovering from them.</p><p name="8b1b" id="8b1b" class="graf graf--p graf-after--p">More importantly, we had confidence that the system could survive operator errors, environment changes, and deployment challenges.</p><p name="0a39" id="0a39" class="graf graf--p graf-after--p">That confidence is worth more than perfect code. Perfect code that‚Äôs fragile to operate is less valuable than good code that‚Äôs resilient to operate.</p><h3 name="2f6f" id="2f6f" class="graf graf--h3 graf-after--p">The operational documentation discipline</h3><p name="d62e" id="d62e" class="graf graf--p graf-after--h3">One of the most valuable outcomes was establishing operational documentation as a first-class concern, not an afterthought.</p><p name="51ed" id="51ed" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Deployment procedures</strong>: Exactly how to get the system running from scratch</p><p name="570e" id="570e" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Recovery procedures</strong>: What to do when specific things go wrong</p><p name="28d1" id="28d1" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Troubleshooting guides</strong>: Common problems and their solutions</p><p name="4e44" id="4e44" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Environment management</strong>: How to maintain and update the development environment</p><p name="647b" id="647b" class="graf graf--p graf-after--p">This documentation proved its value immediately during recovery. It‚Äôll prove its value again when team members need to set up environments or when we need to deploy to new infrastructure.</p><p name="d29b" id="d29b" class="graf graf--p graf-after--p">Plus, remember these bots can read a lot of docs too and not just spew them out. Most of us human find technical specs a bit overwhelming if they are properly thorough. TL;DR kicks in fast. But AI bots just lap that stuff up.</p><h3 name="1afd" id="1afd" class="graf graf--h3 graf-after--p">Stacking discipline on top of¬†rigor</h3><p name="10df" id="10df" class="graf graf--p graf-after--h3">What made the battle-testing session ultimately successful wasn‚Äôt any single decision‚Ää‚Äî‚Ääit was the compound effects of systematic discipline across multiple areas.</p><p name="6e64" id="6e64" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Git discipline</strong> preserved our work when local environments failed</p><p name="a776" id="a776" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Documentation discipline</strong> provided recovery procedures</p><p name="dbab" id="dbab" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Testing discipline</strong> let us verify recovery quickly</p><p name="6b54" id="6b54" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Pattern discipline</strong> made rebuilding predictable</p><p name="39c5" id="39c5" class="graf graf--p graf-after--p graf--trailing">Each discipline was helpful individually. Together, they created a development approach that was <em class="markup--em markup--p-em">antifragile</em>: it got stronger when stressed instead of weaker.</p></div></div>f:["$","$L1a",null,{"post":{"title":"Battle-Testing GitHub Integration: When Recovery Becomes Learning","excerpt":"","url":"/blog/battle-testing-github-integration-when-recovery-becomes-learning","publishedAt":"Invalid Date","publishedAtISO":"","author":"christian crumlish","readingTime":"5 min read","tags":["Building in Public"],"guid":"https://medium.com/building-piper-morgan/5243027aa9f6","featuredImage":"/assets/blog-images/5243027aa9f6-featured.webp","slug":"battle-testing-github-integration-when-recovery-becomes-learning","category":"building","workDate":"Jun 29, 2025","workDateISO":"2025-06-29T00:00:00.000Z","cluster":"production-transformation","chatDate":"7/22/2025","featured":false},"content":{"title":"Battle-Testing Your Architecture: When Recovery Becomes Learning","subtitle":"June 29","content":"$1b","author":"christian crumlish","canonicalLink":"","publishedDate":"2025-07-29T14:11:07.477Z","filename":"2025-07-29_Battle-Testing-Your-Architecture--When-Recovery-Becomes-Learning-5243027aa9f6.html"}}]
15:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:null
1c:I[8175,[],"IconMark"]
13:{"metadata":[["$","title","0",{"children":"Battle-Testing GitHub Integration: When Recovery Becomes Learning | Piper Morgan"}],["$","meta","1",{"name":"description","content":"June 29"}],["$","meta","2",{"name":"author","content":"Christian Crumlish"}],["$","meta","3",{"name":"keywords","content":"AI,Product Management,Methodology,Building in Public"}],["$","meta","4",{"name":"creator","content":"Christian Crumlish"}],["$","meta","5",{"name":"publisher","content":"Christian Crumlish"}],["$","meta","6",{"name":"robots","content":"index, follow"}],["$","meta","7",{"name":"googlebot","content":"index, follow"}],["$","link","8",{"rel":"canonical","href":"https://pipermorgan.ai/"}],["$","meta","9",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","10",{"property":"og:title","content":"Battle-Testing GitHub Integration: When Recovery Becomes Learning"}],["$","meta","11",{"property":"og:description","content":"June 29"}],["$","meta","12",{"property":"og:type","content":"article"}],["$","meta","13",{"property":"article:author","content":"christian crumlish"}],["$","meta","14",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","15",{"name":"twitter:title","content":"Battle-Testing GitHub Integration: When Recovery Becomes Learning"}],["$","meta","16",{"name":"twitter:description","content":"June 29"}],["$","link","17",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x33"}],["$","link","18",{"rel":"icon","href":"/favicon.ico","sizes":"32x32","type":"image/x-icon"}],["$","link","19",{"rel":"icon","href":"/pm-favicon-16.png","sizes":"16x16","type":"image/png"}],["$","link","20",{"rel":"icon","href":"/pm-favicon-32.png","sizes":"32x32","type":"image/png"}],["$","link","21",{"rel":"icon","href":"/pm-favicon-48.png","sizes":"48x48","type":"image/png"}],["$","link","22",{"rel":"apple-touch-icon","href":"/pm-favicon-180.png","sizes":"180x180","type":"image/png"}],["$","link","23",{"rel":"icon","href":"/pm-favicon-192.png","sizes":"192x192","type":"image/png"}],["$","$L1c","24",{}]],"error":null,"digest":"$undefined"}
18:"$13:metadata"
