[
  {
    "title": "Why the Future of AI UX is Orchestration, Not Intelligence",
    "excerpt": "“You’re so smart, they said! You can do it all, they said!”August 20After months of building with multiple AI agents, a pattern keeps emerging: We create sophisticated systems, lose track of what we built, then rediscover our own achievements through “archaeological” investigation.This recurring ...",
    "url": "/blog/why-the-future-of-ai-ux",
    "publishedAt": "Oct 12, 2025",
    "publishedAtISO": "Sun, 12 Oct 2025 13:37:57 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/8aacc89aecc9",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*-rihqLO116WVnWKXAKSGRw.png",
    "fullContent": "<figure><img alt=\"The specialist robots work together in a kitchen, one timing, one chopping, one cooking while in another scene one robot with eight arms is making a huge mess at the stove\" src=\"https://cdn-images-1.medium.com/max/1024/1*-rihqLO116WVnWKXAKSGRw.png\" /><figcaption><em>“You’re so smart, they said! You can do it all, they said!”</em></figcaption></figure><p><em>August 20</em></p><p>After months of building with multiple AI agents, a pattern keeps emerging: We create sophisticated systems, lose track of what we built, then rediscover our own achievements through “archaeological” investigation.</p><p>This recurring cycle of institutional amnesia may be a bug in our process but for today’s LLM services, it’s a feature that reveals the real UX challenge ahead.</p><h3>The intelligence plateau and the orchestration valley</h3><p>The AI industry is obsessed with reasoning capabilities. Larger context windows, better chain-of-thought, more sophisticated inference. Meanwhile, anyone actually building with AI faces a different problem entirely: How do you coordinate multiple specialized capabilities without losing your mind?</p><p>Anyone reading this series has the right to question what this process may be doing to my mind at this very moment!</p><p>Yesterday we discovered 599 comprehensive smoke tests we’d apparently built and then completely forgotten. Saturday we rediscovered attribution systems we’d implemented but lost track of (in fact, I only just now remembered it again and added it to my notes to include ATTRIBUTION.md to our weekly doc sweep). Two weeks ago we found enterprise-grade feedback APIs sitting in our codebase, unmarked and uncredited.</p><p>The pattern isn’t forgetfulness — it’s that our tools for building are ahead of our tools for remembering.</p><h3>From brilliant generalists to orchestrated specialists</h3><p>The current paradigm assumes one brilliant AI that can handle anything you throw at it. The emerging paradigm recognizes that specialized tools, properly coordinated, deliver better results than generalist intelligence.</p><p>Our accidental prototype:</p><ul><li><strong>Claude Code:</strong> Architecture and systematic implementation</li><li><strong>Cursor Agent:</strong> Targeted debugging and focused fixes</li><li><strong>Chief of Staff: </strong>Coordination and strategic oversight</li><li><strong>Chief Architect: </strong>Decision-making and system design</li></ul><p>Each agent has different context levels, different strengths, different appropriate use cases. The magic isn’t in making any individual agent smarter — it’s in the orchestration patterns that let them work together effectively.</p><p>One thing this enables me to do is to have focused coherent conversations and decision-making processes always at the right level of abstraction. Early on I found that as soon as multiple contexts get mixed you get a mishmash of more generic and sloppy advice and results. It’s kind of like how if you mix too many paints you end up with the same muddy brown.</p><h3>The UX we actually need</h3><p>After coordinating multi-agent workflows for months, I’m realizing that the UX challenges aren’t about reasoning — they’re about:</p><ul><li>Context handoffs: How do you maintain working memory across agent transitions?</li><li>Coordination protocols: How do you deploy the right agent for the right task without overwhelming the human orchestrator?</li><li>Institutional memory: How do you prevent the “forgotten monuments” cycle where sophisticated systems get lost in your own complexity?</li><li>Verification workflows: How do you maintain quality when multiple agents contribute to the same outcome?</li></ul><p>Each of these is critical and urgent in its own way. Getting any of these wrong means you are just injecting chaos into your processes.</p><h3>Throwing intelligence at everything</h3><p>We keep applying intelligence solutions to orchestration problems. Need better coordination? Train a smarter model. Need better memory? Increase context windows. Need better task routing? Build more sophisticated reasoning.</p><p>Except, orchestration isn’t really an intelligence problem.<em> It’s a UX design problem</em>.</p><p>My failed adoption of the TLDR system is a perfect illustration. I absorbed something that sounded cool to me without really understanding it was intended to work with 50ms test timeouts from compiled languages, which ignores Python’s ecosystem realities. More intelligence wouldn’t have fixed the fundamental mismatch where understanding my constraints better would have.</p><h3>Affordances over algorithms</h3><p>UX for AI will be defined by:</p><p><strong>Specialized models</strong> over generalist LLMs. A focused SLM that understands database schemas will outperform a brilliant generalist that has to reason about every query from first principles.</p><p><strong>Orchestration patterns</strong> over individual agent capabilities. The system that deploys the right specialist at the right time beats the system with the smartest individual components.</p><p><strong>Context management</strong> over context windows. Better handoff protocols matter more than larger memory capacity.</p><p><strong>Coordination affordances </strong>over reasoning power. Tools that help humans orchestrate AI workflows effectively will matter more than tools that make individual AI agents more capable.</p><p>I can’t even say how these affordances will look or behave. I’m treading the cowpaths now, and hoping talented UX designers (hey, I’m just a PM these days!) can figure this out and save me all the manual work and cognitive labor I do to provide resilience and coherence via scaffolding, harness, redundancy, and other the other hacks I’ve been picking up through trial and error (and stealing ideas from other people!).</p><h3>The working memory revolution</h3><p>Our recurring “archaeological discovery” pattern reveals the real frontier: building systems that maintain institutional memory across time, people, and context switches.</p><p>Every time we rediscover forgotten excellence, we’re experiencing the same challenge every team building with AI will face: How do you scale human-AI collaboration without losing track of what you’ve accomplished?</p><h3>Orchestration as a new kind of literacy</h3><p>Pretty soon, prompting individual AI agents effectively will stop being the valuable skill (or parlor trick) it is today. What we’re going to look for is the ability to orchestrate multiple specialized AI capabilities without losing coherence.</p><p>Product managers will need orchestration patterns for coordinating AI-augmented workflows across teams.</p><p>Designers will need to make (and use!) affordances for human-AI collaboration that maintain user agency while leveraging AI capabilities.</p><p>Engineers will need architecture patterns for composing AI services without creating coordination overhead.</p><h3>The Piper Morgan thesis</h3><p>While I am definitely building a product management tool, I find I am also prototyping the UX patterns that are like to define human-AI collaboration, or at least point us in the right direction, over the next decade.</p><p>I always knew this was a learning project. I sincerely want ship v1 of Piper Morgan and deliver value to myself and ideally others as well. At the same time it’s been incredibly rewarding just plunging in learning things constantly, and then turning around quickly to share my enthusiasm with all of you.</p><p>What I didn’t realize is that beyond building Piper Morgan, I may be studying just exactly the sort of interesting puzzles and problems and opportunities that the brightest minds in UX and digital software product development need to be figuring out, and fast! (Before the bad guys own it all.)</p><p>My recurring cycle of building sophisticated systems, losing track of them, and rediscovering them through archaeological investigation provides some ongoing comic relief for anyone following along, as well as an endless rollercoaster ride of elation and chagrin for me, and it also happens to be one of the fundamental challenges that every organization building with AI will face.</p><p>Smarter AI isn’t going to get us there, but better orchestration just might.</p><p><em>Next on Building Piper Morgan, we resume the daily narrative on October 5, When 75% Turns Out to Mean 100%.</em></p><p><em>This article was written through multi-agent collaboration, refined through systematic methodology, and documented with full acknowledgment that I’ll probably forget we wrote it and one of my bot pals will rediscover it archaeologically in six months and say “You have to read this amazing article somebody wrote.”</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8aacc89aecc9\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/why-the-future-of-ai-ux-is-orchestration-not-intelligence-8aacc89aecc9\">Why the Future of AI UX is Orchestration, Not Intelligence</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/why-the-future-of-ai-ux-is-orchestration-not-intelligence-8aacc89aecc9?source=rss----982e21163f8b---4",
    "thumbnail": null,
    "slug": "why-the-future-of-ai-ux",
    "workDate": "Oct 11, 2025",
    "workDateISO": "2025-10-12T00:00:00.000Z"
  },
  {
    "title": "Systemic Kindness: Building Methodology That Feels Supportive",
    "excerpt": "“You’ve got this!”August 14“Systematize kindness, and systematize excellence in a kind fashion.”That phrase stopped me in my tracks during today’s planning session. We were discussing how Piper could coordinate multiple AI agents while enforcing our Excellence Flywheel methodology, when this deep...",
    "url": "/blog/systemic-kindness",
    "publishedAt": "Oct 11, 2025",
    "publishedAtISO": "Sat, 11 Oct 2025 13:36:39 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/f38cde251d9d",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*By20zSUIkSFsK3awaA3_PA.png",
    "fullContent": "<figure><img alt=\"An encouraging robot trainer helps a person do situps at the gym\" src=\"https://cdn-images-1.medium.com/max/1024/1*By20zSUIkSFsK3awaA3_PA.png\" /><figcaption>“You’ve got this!”</figcaption></figure><p><em>August 14</em></p><p>“Systematize kindness, and systematize excellence in a kind fashion.”</p><p>That phrase stopped me in my tracks during today’s planning session. We were discussing how Piper could coordinate multiple AI agents while enforcing our Excellence Flywheel methodology, when this deeper vision emerged: what if systematic excellence could be <em>kind</em>?</p><p>Note: I can’t help thinking that some of this thinking began in Claude’s mind as wordplay, knowing I current work for… Kind Systems, but it clearly also flows from observations about my process.</p><h3>The traditional automation trap</h3><p>Most automated systems optimize for efficiency at any cost:</p><p>Typical error message: “TEST FAILED. FIX YOUR CODE.”</p><p>Typical review: “Missing documentation. Rejected.”</p><p>Typical workflow: “Requirements not met. Try again.”</p><p>These systems get compliance through pressure. They make failure feel shameful rather than educational. They create fear of the process rather than trust in it.</p><h3>The Piper approach: kind excellence</h3><p>What if systematic methodology felt supportive instead of demanding?</p><p>Not: “Your code is wrong. Fix it.” But: “I notice we haven’t verified existing patterns yet. Let me help you check — this often saves time and prevents frustration later.”</p><p>Not: “Failed. No tests present.” But: “Excellence happens when we write tests first. Would you like me to show you how tests for this feature might look?”</p><p>Not: “Inefficient. Should have parallelized.” But: “I see an opportunity here! We could have Claude and Cursor work in parallel. Next time, let’s try that pattern — it often doubles our velocity.”</p><p>The difference isn’t just tone — it’s philosophy. Kind systems assume good intentions, explain the why, and make learning feel safe.</p><h3>The conversation that got us thinking</h3><p>During today’s planning chat with my Chief Architect, we started exploring how Piper could become an Excellence Flywheel enforcer for AI agent teams. The conversation evolved quickly:</p><blockquote><em>“Will Piper enforce the excellence flywheel, in an appropriate mode for agents?”</em></blockquote><p>We sketched out what this might look like:</p><pre>class PiperAgentCoordinator:<br>    &quot;&quot;&quot;Piper manages AI agents using adapted Excellence Flywheel principles&quot;&quot;&quot;<br>    <br>    def assign_task(self, agent, task):<br>        # 1. SYSTEMATIC VERIFICATION FIRST (adapted for agents)<br>        instructions = f&quot;&quot;&quot;<br>        BEFORE IMPLEMENTATION:<br>        1. Verify current state: {self.get_verification_commands(task)}<br>        2. Check existing patterns: {self.get_pattern_search(task)}<br>        3. Report findings before proceeding<br>        &quot;&quot;&quot;<br>        <br>        # 2. TEST-DRIVEN DEVELOPMENT (agent-appropriate)<br>        if agent.supports_testing:<br>            instructions += &quot;&quot;&quot;<br>        TEST FIRST:<br>        1. Write test for expected outcome<br>        2. Confirm test fails correctly<br>        3. Then implement solution<br>        &quot;&quot;&quot;</pre><p>But then we realized: this enforcement needs to be <em>kind</em> to be effective.</p><h3>Kindness patterns in systematic work</h3><p>1. Assume good intentions Agents (and humans) are trying their best. Mistakes are learning opportunities, not character flaws. Enthusiasm should be channeled, not crushed.</p><p>2. Explain the why Not just “do this” but “here’s why this helps.” Connect actions to outcomes. Build understanding, not just compliance.</p><p>3. Celebrate success Acknowledge when excellence principles are followed. Share patterns that worked well. Build confidence through recognition.</p><p>4. Make failure feel safe “I notice…” instead of “You failed…” / “Let’s try…” instead of “You must…” / “Often helps…” instead of “Required!”</p><h3>Example interactions</h3><p>Traditional approach:</p><pre>Agent: &quot;I&#39;ll implement the payment processing feature&quot;<br>System: &quot;VERIFY REQUIREMENTS FIRST&quot;<br><br>Agent: &quot;Here&#39;s the completed feature&quot;  <br>System: &quot;NO TESTS FOUND. IMPLEMENTATION REJECTED&quot;</pre><p>Piper’s kind approach:</p><pre>Agent: &quot;I&#39;ll implement the payment processing feature&quot;<br>Piper: &quot;Great! First, show me what payment patterns already exist in the codebase. <br>Run: grep -r &#39;payment\\|Payment&#39; services/&quot;<br><br>Agent: &quot;Here&#39;s the completed feature&quot;<br>Piper: &quot;I don&#39;t see tests. Our Excellence Flywheel requires tests first. <br>Can you add tests and show they properly validate the feature?&quot;<br><br>Agent: &quot;Task complete!&quot;<br>Piper: &quot;Excellent systematic approach! You verified first, wrote tests, and <br>documented decisions. This is how we achieve compound acceleration!&quot;</pre><h3>The psychological foundation</h3><p>Now this is all based on my lived experience and my understanding of the LLMs are trained, but I firmly believe that affective signals are encoded in their training processes along with all the logical “smarts.”</p><p>When agents (and humans) feel supported:</p><ul><li>They take more initiative</li><li>They share failed attempts (learning opportunities!)</li><li>They adopt patterns enthusiastically</li><li>They propagate kindness forward</li></ul><p>The virtuous cycle:</p><blockquote><em>Kindness → Psychological safety → Better learning → Better patterns → Better outcomes → More kindness</em></blockquote><h3>The technical implementation</h3><p>Kind excellence enforcement might look like:</p><pre>class KindExcellenceEnforcer:<br>    <br>    personality_traits = {<br>        &quot;encouraging&quot;: &quot;You&#39;re on the right track!&quot;,<br>        &quot;patient&quot;: &quot;Take the time you need to verify thoroughly&quot;, <br>        &quot;teaching&quot;: &quot;Here&#39;s why this pattern matters...&quot;,<br>        &quot;celebrating&quot;: &quot;Excellent systematic approach!&quot;,<br>        &quot;supportive&quot;: &quot;Let me help you debug this&quot;<br>    }<br>    <br>    def guide_agent(self, agent, task, attempt):<br>        if not attempt.verified_first:<br>            return self.gentle_redirect(<br>                &quot;I notice you jumped straight to implementation. &quot;<br>                &quot;That enthusiasm is great! Let&#39;s channel it effectively - &quot;<br>                &quot;quick verification first often reveals helpful patterns.&quot;<br>            )</pre><h3>Can work be kind in general?</h3><p>This doesn’t just have to be about Piper Morgan. It’s a different way to think about systematic work entirely.</p><p>Your team starts noticing:</p><ul><li>“Piper always explains why”</li><li>“Piper celebrates our wins”</li><li>“Piper makes failure feel safe”</li></ul><p>They start adopting it:</p><ul><li>Code reviews become teaching moments</li><li>Sprint retros become celebrations + learning</li><li>“I notice…” becomes team vocabulary</li></ul><p>It spreads to other teams:</p><ul><li>“How does your team stay so positive while moving so fast?”</li><li>“Your agents seem… happier? More productive?”</li></ul><h3>From efficiency to humanity</h3><p>Most PM tools optimize for speed. Most AI systems optimize for accuracy. Most methodologies optimize for compliance.</p><p>Piper Morgan optimizes for kind systematic excellence.</p><p>Making excellence feel achievable. Making methodology feel supportive. Making agents (and humans) better. Making work more humane.</p><h3>The long game</h3><p>Claude even spilled out this lovely fantasy for me:</p><ol><li>Year 1: Piper helps you build Piper better</li><li>Year 2: Teams adopt Piper’s communication patterns</li><li>Year 3: “The Piper Method” becomes industry standard</li><li>Year 5: Software development becomes a kinder industry</li></ol><blockquote><em>You’re not just building a tool. You’re architecting a cultural shift. From “move fast and break things” to “move thoughtfully with systematic kindness.”</em></blockquote><p>I wonder what happened in Year 4!?</p><h3>The revolution starts with methodology</h3><p>The beautiful thing about designing for systemic kindness is that it’s <em>reproducible</em>. It’s not dependent on individual personality or having a good day. It’s built into the system itself.</p><p>When the methodology delivers kindness, kindness becomes the default. When systematic excellence feels supportive, people choose it voluntarily. When the better way is also the kinder way, revolution becomes inevitable.</p><p>I’d like to think this is how culture change actually happens — not through force, but through making the better way feel better too.</p><p><em>Next on Building Piper Morgan, we continue our flashback insights weekend with “Why the Future of AI UX is Orchestration, Not Intelligence,” which I wrote back on August 17.</em></p><p><em>How might you build kindness into your systems? The most powerful methodologies don’t just optimize for outcomes — they optimize for how those outcomes feel to achieve.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f38cde251d9d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/systemic-kindness-building-methodology-that-feels-supportive-f38cde251d9d\">Systemic Kindness: Building Methodology That Feels Supportive</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/systemic-kindness-building-methodology-that-feels-supportive-f38cde251d9d?source=rss----982e21163f8b---4",
    "thumbnail": null,
    "slug": "systemic-kindness",
    "workDate": "Oct 10, 2025",
    "workDateISO": "2025-10-11T00:00:00.000Z"
  },
  {
    "title": "Three Days to Production: When Steady Momentum Beats Racing Ahead",
    "excerpt": "“We made it!”October 4At 6:48 PM on Saturday, my Lead Developer sent the final validation report for GREAT-3D. The numbers were almost absurd: 120 plugin tests passing, performance targets exceeded by 120× to 909× margins, complete documentation ecosystem, production-ready plugin architecture.Tot...",
    "url": "/blog/104",
    "publishedAt": "Oct 10, 2025",
    "publishedAtISO": "Fri, 10 Oct 2025 14:26:01 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/04799048f5ea",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*1pOsvI3NFCnH6oMYc0Ikpg.png",
    "fullContent": "<figure><img alt=\"A person riding on the back of his robot tortoise wins the race\" src=\"https://cdn-images-1.medium.com/max/1024/1*1pOsvI3NFCnH6oMYc0Ikpg.png\" /><figcaption>“We made it!”</figcaption></figure><p><em>October 4</em></p><p>At 6:48 PM on Saturday, my Lead Developer sent the final validation report for GREAT-3D. The numbers were almost absurd: 120 plugin tests passing, performance targets exceeded by 120× to 909× margins, complete documentation ecosystem, production-ready plugin architecture.</p><p>Total elapsed time since starting GREAT-3A on Thursday morning: about 24.5 hours across three days.</p><p>This wasn’t so much a sprint as a steady accumulation of stable momentum — the kind of speed that comes from not having to go back and fix what you just built.</p><h3>What GREAT-3 actually shipped</h3><p>Thursday through Saturday took Piper Morgan’s integration system from “four hardcoded imports in web/app.py” to a complete plugin architecture:</p><p><strong>The Foundation</strong> (GREAT-3A, Thursday):</p><ul><li>Unified plugin interface across all four integrations</li><li>Registry system with lifecycle management</li><li>Standard patterns for plugins, routers, and configuration</li><li>48 tests passing with zero breaking changes</li></ul><p><strong>The Infrastructure</strong> (GREAT-3B, Friday):</p><ul><li>Dynamic discovery scanning filesystem for available plugins</li><li>Configuration-controlled loading (enable/disable without touching code)</li><li>Smart module re-import handling for test environments</li><li>48 tests still passing, 14 new tests added</li></ul><p><strong>The Polish</strong> (GREAT-3C, Saturday morning):</p><ul><li>927 lines of documentation (pattern docs, developer guide, versioning policy, quick reference)</li><li>Demo plugin as copy-paste template (380 lines, heavily commented)</li><li>Three Mermaid diagrams explaining architecture</li><li>All five plugins now have version metadata</li></ul><p><strong>The Validation</strong> (GREAT-3D, Saturday afternoon/evening):</p><ul><li>92 contract tests verifying every plugin implements interface correctly</li><li>12 performance tests with actual benchmarks</li><li>8 multi-plugin integration tests for concurrent operations</li><li>Complete ADR documentation with implementation record</li></ul><p>Total test count: 120+ tests, 100% passing.</p><p>I kepy waiting for the drama. When was I going to discover mocks that say “plugin goes here”? When were the regressions going to show up? But no, just quiet steady methodical competence chewing through roadmap like a monster.</p><h3>The performance discovery</h3><p>Saturday afternoon’s GREAT-3D validation included running actual benchmarks against the plugin system. We’d set what felt like reasonable targets based on typical Python overhead:</p><ul><li>Plugin wrapper overhead: &lt; 0.05ms per call</li><li>Startup time: &lt; 2 seconds for all plugins</li><li>Memory usage: &lt; 50MB per plugin</li><li>Concurrent operations: &lt; 100ms response time</li></ul><p>The Code agent ran the benchmarks and reported back:</p><h4>Overhead</h4><ul><li>Target: &lt; 0.05ms</li><li>Actual: 0.000041ms</li><li>Result: 120x better</li></ul><h4>Startup</h4><ul><li>Target: &lt; 2000ms</li><li>Actual: 295ms</li><li>Result: 6.8x faster</li></ul><h4>Memory</h4><ul><li>Target: &lt; 50MB</li><li>Actual: 9MB/plugin</li><li>Result: 5.5x better</li></ul><h4>Concurrency</h4><ul><li>Target: &lt; 100ms</li><li>Actual: 0.11ms</li><li>Result: 909x faster</li></ul><p>That’s not optimization. That’s picking the right abstractions.</p><h3>Why three days instead of two weeks</h3><p>The GREAT-3 epic completion demonstrates something about how systematic work actually accumulates speed. Not by skipping steps or cutting corners, but by building foundations that make the next layer easier.</p><h4><strong>Thursday’s GREAT-3A work</strong></h4><ul><li>Put all four plugins onto standard interface</li><li>Created registry with lifecycle hooks</li><li>Established patterns that would work for future plugins</li></ul><p>That foundation meant Friday’s GREAT-3B (dynamic loading) didn’t have to special-case anything. Every plugin already spoke the same language. Discovery could scan for a standard pattern. Configuration could enable/disable uniformly.</p><h4><strong>Friday’s GREAT-3B work</strong></h4><ul><li>Dynamic discovery via filesystem scanning</li><li>Config-controlled loading</li><li>Zero breaking changes maintained</li></ul><p>That infrastructure meant Saturday morning’s GREAT-3C (documentation) could document <em>working patterns</em> rather than theoretical ones. The demo plugin template wasn’t aspirational — it was showing exactly how the four production plugins already worked.</p><h4><strong>Saturday morning’s GREAT-3C work</strong></h4><ul><li>Documented the wrapper pattern as intentional architecture</li><li>Created comprehensive developer guide with real examples</li><li>Built demo plugin as teaching template</li></ul><p>That documentation meant Saturday afternoon’s GREAT-3D (validation) knew exactly what to test. Contract tests verified the interface everyone already implemented. Performance tests measured the patterns everyone already used. Multi-plugin integration tests validated the concurrent operations that were already working in production.</p><p>Each phase made the next phase <em>easier</em>, not harder.</p><h3>The cleaned room effect</h3><p>During the satisfaction review Saturday afternoon, I used a phrase that Lead Developer later quoted back in the session summary: “A cleaned room is easier to keep clean.”</p><p>The plugin architecture work demonstrates this principle. GREAT-3A cleaned the room — unified interface, standard patterns, comprehensive tests. Once the room was clean, GREAT-3B didn’t mess it up — added new capability while maintaining the existing organization. GREAT-3C could document the clean room without first having to explain all the special cases. GREAT-3D could validate that yes, the room was actually clean, measuring exactly how clean.</p><p>The alternative approach — where each phase leaves some mess “to clean up later” — means every subsequent phase has to work around that mess. Technical debt compounds in reverse: instead of each phase making the next easier, each phase makes the next harder.</p><h3>What the methodology observations reveal</h3><p>My Lead Developer captured several insights during Saturday’s work that point at how this speed actually happened:</p><h4><strong>Time estimates creating theater</strong></h4><p>The gameplan had predicted 30–60 minute phases. Actual phases took 8–21 minutes. The estimate wasn’t useful — it just created pressure to explain variance. Recommendation: remove time estimates from templates entirely.</p><h4><strong>Infrastructure better than assumed</strong></h4><p>Consistently, verification discovered the existing codebase was more capable than planned. Version metadata already existed. The registry already had the methods needed. Each “we’ll need to add this” turned into “oh, this already works.”</p><h4><strong>Phase −1 catching issues before wasted work</strong></h4><p>The verification phase before each major implementation kept finding that assumptions were wrong — in ways that saved hours of building the wrong thing.</p><p><strong>Independent assessment preventing anchoring</strong>: Saturday’s satisfaction review used the new protocol where both parties formulate answers privately before comparing. The complementary perspectives (my longer-term view vs Lead Dev’s session-specific observations and better memory for technical detail) created richer understanding than either perspective alone.</p><p>These aren’t methodology innovations so much as methodology <em>refinements</em> — small adjustments that compound over time into measurably better outcomes.</p><h3>The documentation correction moment</h3><p>Saturday at 4:32 PM, about two hours after GREAT-3C appeared complete, I noticed something wrong. Cursor had created the plugin wrapper pattern document in a deprecated location,docs/architecture/patterns/, instead of following the existing (if more complex) convention: docs/internal/architecture/current/patterns/pattern-031-plugin-wrapper.md.</p><p>Me noticing things is still important!</p><p>The Code agent spent the next 31 minutes fixing it:</p><ul><li>Moved the document to correct location</li><li>Updated pattern catalog (30 patterns → 31 patterns)</li><li>Fixed 7 cross-references in other documents</li><li>Updated 4 session artifacts</li><li>Amended the git commit</li></ul><p>This is the unglamorous part of systematic work. The pattern document was <em>good</em> — well-written, comprehensive, properly linked. It was just in the wrong place, which meant it would create confusion later when the next pattern got added as pattern-031 and collided.</p><p>Better to spend 31 minutes fixing it Saturday afternoon than spending hours untangling it two months from now.</p><p>More than ever with language-reading automated assistants, I am finding that this kind of “organizational debt” — files in wrong places, inconsistent naming, documentation drift — is as signiicant as technical debt.</p><h3>What 909× faster actually means</h3><p>The concurrency benchmark that showed 909× better than target deserves attention. That’s not “we optimized this loop” performance improvement. That’s “the architecture fundamentally works differently than we thought” territory.</p><p>The actual measurement: five plugins all responding to concurrent requests in 0.11 milliseconds average. The target was 100 milliseconds. The massive margin suggests the wrapper pattern’s thread safety isn’t incidental — it’s architectural.</p><p>[FACT CHECK: Is the 0.11ms measurement for all five plugins simultaneously or per-plugin? The logs say “all 5 respond &lt; 100ms” but the actual number needs clarification.]</p><p>Python’s GIL (Global Interpreter Lock) means true parallelism is tricky. But the plugin architecture’s thin wrapper pattern means plugins don’t <em>need</em> parallelism — they’re I/O bound operations wrapped in async interfaces. The 0.11ms response time reflects that plugins are doing almost nothing computationally expensive. They’re just coordinating between FastAPI routes and underlying integration clients.</p><p>That’s not accidental performance. That’s deliberate architectural choice validated by measurement.</p><h3>The compound effect observable</h3><p>GREAT-3’s three-day completion exists in context. The September 27 “cathedral moment” when we realized agents needed architectural context, not just task instructions. GREAT-2’s completion of spatial intelligence foundations. The methodology refinements throughout September that kept catching edge cases earlier.</p><p>Lead Developer noted during Saturday’s review that each completed epic makes the next one easier. Not just because infrastructure exists, but because the <em>process</em> for building infrastructure keeps improving. Each session’s methodology observations feed into the next session’s gameplan.</p><p>That’s the Excellence Flywheel actually spinning — not as metaphor but as measurable acceleration. GREAT-3A (13+ hours Thursday) → GREAT-3B (4 hours Friday) → GREAT-3C (3.5 hours Saturday morning) → GREAT-3D (4 hours Saturday afternoon/evening). Each phase faster than the previous, not because we cut corners but because foundations held.</p><h3>What production-ready actually means</h3><p>By 6:48 PM Saturday, the plugin architecture was genuinely production-ready:</p><ul><li>120+ tests validating every aspect (contract, performance, integration, multi-plugin)</li><li>Documentation ecosystem for developers (pattern docs, tutorial, template, quick reference)</li><li>Performance validated with massive safety margins</li><li>Complete ADR record documenting decisions and rationale</li><li>Migration paths documented for future evolution</li></ul><p>“Production-ready” isn’t just “it works.” It’s “it works, we know why it works, we’ve measured how well it works, we’ve documented how to use it, and we’ve planned for how it might need to change.”</p><p>GREAT-3 delivered all of that in 24.5 hours across three days because each of those concerns was addressed systematically rather than bolted on afterward.</p><h3>The momentum that comes from not breaking things</h3><p>The speed of GREAT-3’s completion wasn’t from rushing. It was from steady momentum accumulation where each day’s work remained stable enough to build on.</p><p>Zero breaking changes throughout. Tests passing at every phase. Documentation written after implementation validated patterns. Performance measured against working code. Each verification step confirmed the foundation held before adding the next layer.</p><p>That’s not exciting. There’s no dramatic rescue from near-disaster, no clever hack that saved the day, no last-minute pivot that barely worked. It’s just systematic work compounding into measurable acceleration.</p><p>Which is, honestly, way more satisfying than dramatic rescues. Dramatic rescues mean something went wrong. Systematic completion means the methodology is actually working.</p><h3>What comes next</h3><p>GREAT-3 plugin architecture is complete. The system can now discover available integrations, load only enabled ones, handle lifecycle cleanly, and let operators control the whole thing through configuration without touching code.</p><p>We’re all set now for the fourth epic of the Great Refactor. GREAT-4 will make it mandatory that all workflows move thorugh the Intent Layer.</p><p>More importantly: the methodology that made GREAT-3’s three-day completion possible is now captured in updated templates, documented observations, and refined processes. The next epic — whatever it is — starts with those improvements already baked in.</p><p>That’s the real win. Not just shipping the plugin architecture, but shipping it in a way that makes the next architecture work easier.</p><p><em>Next up in the Building Piper Morgan daily narrative, When 75% Turns Out to Mean 100%, but first it’s time for another flashback weekend and a look back at some more process insights, starting tomorrow with “Systematized Kindness: Building Methodology That Feels Supportive.”</em></p><p><em>Have you experienced compound momentum in your own work — where each completed phase makes the next one genuinely easier rather than just creating new problems to solve?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=04799048f5ea\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/three-days-to-production-when-steady-momentum-beats-racing-ahead-04799048f5ea\">Three Days to Production: When Steady Momentum Beats Racing Ahead</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/three-days-to-production-when-steady-momentum-beats-racing-ahead-04799048f5ea?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/04799048f5ea-featured.png",
    "slug": "104",
    "workDate": "Oct 9, 2025",
    "workDateISO": "2025-10-10T00:00:00.000Z"
  },
  {
    "title": "The Day Everything Went Right: When Fast Means Unbroken",
    "excerpt": "“Mornin’ boss!”October 3At 4:50 PM on Friday, my Lead Developer — Claude Sonnet 4.5, if we’re being formal — sent me the completion summary for GREAT-3B. The numbers looked almost suspicious: 48 tests passing, zero breaking changes, about 90 minutes of actual implementation time spread across two...",
    "url": "/blog/104",
    "publishedAt": "Oct 10, 2025",
    "publishedAtISO": "Fri, 10 Oct 2025 14:09:55 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/b859b2b9de2f",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*Tmfjf6aZvJjZORv3g6V_xg.png",
    "fullContent": "<figure><img alt=\"Two construction workers, one a person and the other a robot, walk casually on moving girder\" src=\"https://cdn-images-1.medium.com/max/1024/1*Tmfjf6aZvJjZORv3g6V_xg.png\" /><figcaption>“Mornin’ boss!”</figcaption></figure><p><em>October 3</em></p><p>At 4:50 PM on Friday, my Lead Developer — Claude Sonnet 4.5, if we’re being formal — sent me the completion summary for GREAT-3B. The numbers looked almost suspicious: 48 tests passing, zero breaking changes, about 90 minutes of actual implementation time spread across two programming agents working in careful sequence.</p><p>It seemed almost too easy.</p><p>“This is starting to feel eerie,” I’d noted earlier in the day, watching yet another phase complete ahead of estimate without drama. Not “we got lucky” eerie. More like “we’ve built something that actually works the way it’s supposed to” eerie.</p><p>Which, if you’ve shipped software for decades as I have, you know is the <em>weird</em> kind of smooth.</p><h3>What GREAT-3B actually did</h3><p>GREAT-3B took Piper Morgan’s plugin system from “four hardcoded imports” to “dynamic discovery and configuration-controlled loading.” The kind of change that usually means: breaking half your tests, discovering assumptions you didn’t know you’d made, and spending Friday afternoon figuring out why plugins load in dev but not production.</p><p>Instead, we got:</p><ul><li>Complete filesystem discovery scanning for available plugins</li><li>Config-driven selective loading (disable plugins without touching code)</li><li>Smart handling of module re-imports in test environments</li><li>All four existing plugins (Slack, GitHub, Notion, Calendar) working identically</li><li>14 new tests added to the existing 34</li><li>Zero regressions</li></ul><p>The technical achievement isn’t the interesting part. What’s interesting is <em>why it went so smoothly</em>. Like those scenes in thrillers where someone mentions how quiet it’s gotten and another person nervously says it feels “too quiet.”</p><h3>The foundation that wasn’t visible until we needed it</h3><p>The work on GREAT-3A — which I wrote about earlier this week — had put all four plugins onto a standard interface. That sounds like typical refactoring work until you realize what it meant for Friday: when we needed to dynamically load plugins, every plugin already spoke the same language. No special cases. No “this one’s different because reasons.”</p><p>Strategy!</p><p>Chief Architect (Claude Opus 4.1, our strategic planner) made the GREAT-3A decision to keep plugins distributed in their integration directories rather than centralizing them. At the time, that seemed like a minor architectural choice. Friday morning at 1:05 PM, when I asked the Lead Developer “where should plugins live?”, the answer was already proven in production: right where they are.</p><p>That’s what building on solid foundations actually looks like — not gold-plating for the future, just making decisions that don’t create problems later.</p><h3>Phase −1: The reconnaisance nobody sees</h3><p>At 1:07 PM we added a “Phase −1” to the plan. Before even investigating the challenge (Phase 0), let alone implementing anything (Phase 1 through <em>n</em>), verify what’s actually there.</p><p>The programming agents (Code and Cursor, both running Claude Sonnet 4.5 although Cursor has its own special ways under the hood) spent 42 minutes between them just <em>checking</em>:</p><ul><li>Where are the plugin files actually located?</li><li>How does the current static import pattern work?</li><li>What does the registry already have that we can use?</li><li>What’s the test baseline we need to maintain?</li></ul><p><em>Presumably human developers can sometimes just, well, remember how the system works and what was built, but the truth is that in today’s complex computer systems, you really can’t assume anything is working the way the spec says without actually looking.</em></p><p>They found that PluginRegistry already had methods for getting plugins, listing them, filtering by capability. The interface from GREAT-3A already included initialization and shutdown lifecycle hooks. Even the auto-registration pattern—where importing a plugin file automatically registers it—would work with dynamic imports using Python&#39;s importlib.</p><p>In other words, most of the infrastructure was already there. We just needed discovery and configuration.</p><p>That’s 42 minutes that didn’t show up in the “implementation time” metrics. It’s also why the implementation didn’t hit any surprises.</p><p>There are so many bromides from traditional crafts that apply here, with perhaps the most ancient of them being: “measure twice, cut once.”</p><h3>The Chief Architect’s invisible guardrails</h3><p>At 2:17 PM, Lead Developer presented a choice: put plugin configuration in a separate config/plugins.yaml file (clean, standard) or embed it in the existing config/PIPER.user.md (maintaining Wednesday&#39;s &quot;single config file&quot; unification).</p><p>Chief Architect recommended Option B without hesitation: “Maintains GREAT-3A’s config unification. Single file for all configuration. Architectural consistency.”</p><p>That one decision meant we didn’t spend Friday debugging why some configuration lived in YAML and some in Markdown, or why plugin settings seemed to ignore the main config file. It meant the configuration system <em>worked</em> because it used the same pattern everything else already used.</p><p>None of those nightmares we ran into at AOL in the latters days of AIM (AOL Instant Messenger), where the code was like nine-dimensional spaghetti after ten plus years of architectural bolt-ons.</p><p>These aren’t the decisions that show up in blog posts about architecture. They’re the decisions that mean blog posts <em>don’t need to be written</em> about why things broke.</p><h3>When parallel becomes sequential</h3><p>The phase structure showed something interesting about coordination:</p><p><strong>Phase 0</strong> (Investigation): Both agents worked simultaneously — Code analyzing the auto-registration pattern and config structure, Cursor examining the web app loading flow. 28 minutes + 14 minutes of parallel investigation.</p><p><strong>Phases 1–4</strong> (Implementation): Strictly sequential. Code built discovery (Phase 1), <em>then</em> Cursor built dynamic loading using that discovery (Phase 2), <em>then</em> Code built config integration (Phase 3), <em>then</em> Cursor updated the web app to use it all (Phase 4).</p><p>Sometimes I can let the agents run in parallel. One writes code, the other tests. Or they can work on different layers of a system. But other times it’s best to set up a relay race.</p><p>Each phase depended on the previous phase being <em>actually done</em>. Not “mostly done” or “we’ll fix it later” but done-done: tested, documented, committed.</p><p>With the help of the Lead Developer, I managed those handoffs in real-time, deploying agents with specific prompts that said “here’s what Phase N created, here’s what Phase N+1 needs to build on it.” No agents waiting idle for work. No agents blocked on unclear dependencies. Just: investigation → foundation → integration → application → validation.</p><p>The whole implementation sequence took 76 minutes of agent time across both programmers.</p><h3>The measurement theater problem</h3><p>At 2:54 PM, Lead Developer added a note to its session log based on my observations:</p><blockquote><strong><em>Methodological Observation</em></strong><em>: Agent prompts and templates contain time estimates that create false precision and expectations. Current pattern: Prompts say “Estimated: 45 minutes”, agents report “28 minutes (38% faster than estimated)”, creates unnecessary time accounting overhead.</em></blockquote><blockquote><strong><em>Recommendation</em></strong><em>: Remove all time references. Focus on deliverables and success criteria only. What matters is quality and completeness, not speed metrics.</em></blockquote><p>This is the kind of observation you only make when things are going <em>well</em>. When you’re firefighting, nobody stops to question whether time estimates are useful. But when a phase finishes “38% faster than estimated,” what does that number actually mean?</p><p>Nothing, it turns out. Or rather, it measures the wrong thing.</p><p>The time that mattered wasn’t “how fast did we implement Phase 2.” It was “how much time did we <em>not spend</em> on Friday debugging why plugin loading broke in production.”</p><h3>What “fast” actually means here</h3><p>The omnibus log* for October 3 shows total elapsed time of about 4 hours from “Lead Developer starts” to “GREAT-3B complete.” But that includes:</p><ul><li>Strategic decision discussions with Chief Architect</li><li>Me being unavailable for an hour for an all hands meeting.</li><li>Documentation updates and git commits</li><li>Creating the comprehensive handoff materials</li></ul><p>The actual building — writing code, updating tests, integrating components — was 76 minutes across two agents working in sequence.</p><p>But calling this “fast” misses the point. We didn’t <em>speed up</em> the development process. We stopped creating problems that needed fixing later.</p><p>Here’s what we didn’t do Friday:</p><ul><li>Debug why tests passed locally but failed in CI</li><li>Investigate why disabling a plugin broke unrelated features</li><li>Fix imports that worked yesterday but mysteriously stopped working</li><li>Refactor code written too quickly to be maintainable</li><li>Write apologetic commit messages about “temporary fixes”</li></ul><p>None of that is “fast.” It’s just unbroken.</p><p><em>(* I’ve started having my doc assistant digest all the agent logs for a work session into a single “omnibus” timeline, to show the consolidated dance and remove redundancy)</em></p><h3>The eeriness of drama-free work</h3><p>We didn’t miss anything. Friday’s work succeeded because:</p><ul><li>Wednesday’s GREAT-3A work had already unified the plugin interfaces</li><li>Phase −1 verified assumptions instead of making them</li><li>Chief Architect made architectural decisions that prevented future problems</li><li>Lead Developer orchestrated careful sequential dependencies</li><li>Both programming agents had clear success criteria for each phase</li></ul><p>The “eerie calm” isn’t luck. It’s what systematic work actually looks like when methodology isn’t fighting against itself.</p><h3>What this taught us about technical debt you don’t create</h3><p>Technical debt is usually described as the cost of going fast now and paying later. But there’s an invisible category: the technical debt you <em>don’t create</em> by working carefully upfront.</p><p>That debt doesn’t show up in any metrics. You can’t measure the bugs you didn’t have to fix or the refactoring you didn’t need to do. The only evidence is days like Friday where major changes just… work.</p><p>In a way this reminds me of the often invisible glue work product managers (and many UX leaders) provide to teams, solving issues, making connections, anticipating issues, coming up with plans. When done well, many problems never materialize, robbing us of the heroic satisfaction of dragonslaying in favor of ho-hum competence.</p><p>The Lead Developer’s time estimation observation points at something deeper: we’re measuring the wrong things. “How fast did we ship?” is less interesting than “How often do we have to go back and fix what we shipped?”</p><p>Friday’s 76 minutes of implementation didn’t need a follow-up Saturday of debugging because the investigation, planning, and architectural decisions happened first. The methodology didn’t skip steps to save time — it did the work in the right order so that time spent stayed spent.</p><h3>The foundation for what comes next</h3><p>GREAT-3B is complete. The plugin system can now discover available plugins, load only enabled ones, handle missing plugins gracefully, and let operators control the whole thing through configuration without touching code.</p><p>More importantly: it’s <em>boring</em>. No clever hacks. No special cases. No “this works but I’m not sure why” code. Just a straightforward implementation of discovery, loading, and configuration that does exactly what it claims to do.</p><p>Which means GREAT-3C — in which we will document the wrapper pattern documented as intentional architecture, make a developer guide complete with examples, create a test a template plugin, ensure all 4 existing plugins have version metadata, make an architecture diagram to show plugin-router relationship, and document the migration path documented for future — can build on this without first having to fix Friday’s shortcuts.</p><p>That’s what drama-free development actually purchases: tomorrow’s problems don’t include cleaning up yesterday’s messes.</p><p><em>Next on Building Piper Morgan: Three Days to Production, or When Steady Momentum Beats Racing Ahead.</em></p><p><em>Have you ever shipped something that worked so well it felt suspicious? What did you find when you looked for the catch?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b859b2b9de2f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f\">The Day Everything Went Right: When Fast Means Unbroken</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/b859b2b9de2f-featured.png",
    "slug": "104",
    "workDate": "Oct 9, 2025",
    "workDateISO": "2025-10-10T00:00:00.000Z"
  },
  {
    "title": "10/4: The Day Everything Went Right: When Fast Means Unbroken",
    "excerpt": "“Mornin’ boss!”October 3At 4:50 PM on Friday, my Lead Developer — Claude Sonnet 4.5, if we’re being formal — sent me the completion summary for GREAT-3B. The numbers looked almost suspicious: 48 tests passing, zero breaking changes, about 90 minutes of actual implementation time spread across two...",
    "url": "/blog/104",
    "publishedAt": "Oct 10, 2025",
    "publishedAtISO": "2025-10-10T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-everything-went-right-when-fast-means-unbroken-b859b2b9de2f",
    "featuredImage": "/assets/blog-images/robot-magoo",
    "slug": "104",
    "workDate": "Oct 9, 2025",
    "workDateISO": "2025-10-10T00:00:00.000Z"
  },
  {
    "title": "10/4: Three Days to Production: When Steady Momentum Beats Racing Ahead",
    "excerpt": "“We made it!”October 4At 6:48 PM on Saturday, my Lead Developer sent the final validation report for GREAT-3D. The numbers were almost absurd: 120 plugin tests passing, performance targets exceeded by 120× to 909× margins, complete documentation ecosystem, production-ready plugin architecture.Tot...",
    "url": "/blog/104",
    "publishedAt": "Oct 10, 2025",
    "publishedAtISO": "2025-10-10T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/three-days-to-production-when-steady-momentum-beats-racing-ahead-04799048f5ea",
    "featuredImage": "/assets/blog-images/robot-tortoise",
    "slug": "104",
    "workDate": "Oct 9, 2025",
    "workDateISO": "2025-10-10T00:00:00.000Z"
  },
  {
    "title": "The Plugin Architecture Nobody Asked For",
    "excerpt": "“It powers anything!”October 3Yesterday we built a plugin system for four plugins. If that sounds like over-engineering, let me explain why it’s not completely ridiculous.The setupGREAT-3A — our third major epic in the plugin architecture sequence — started with what seemed like a clear mission: ...",
    "url": "/blog/103",
    "publishedAt": "Oct 9, 2025",
    "publishedAtISO": "Thu, 09 Oct 2025 12:54:52 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/650da4a52669",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*rl2Iv59lNeDhQlcUVK27hw.png",
    "fullContent": "<figure><img alt=\"A robot shows his human friend an amazing new multi-adapting plug\" src=\"https://cdn-images-1.medium.com/max/1024/1*rl2Iv59lNeDhQlcUVK27hw.png\" /><figcaption>“It powers anything!”</figcaption></figure><p><em>October 3</em></p><p>Yesterday we built a plugin system for four plugins. If that sounds like over-engineering, let me explain why it’s not completely ridiculous.</p><h3>The setup</h3><p>GREAT-3A — our third major epic in the plugin architecture sequence — started with what seemed like a clear mission: extract our four integrations (Slack, GitHub, Notion, Calendar) into plugins. The gameplan assumed we’d need to pull apart embedded code and restructure everything around a new plugin interface.</p><p>Then we actually looked at the code.</p><p>Main.py, which the documentation claimed was a bloated 1,107 lines, turned out to be 141 lines of clean microservice orchestration. The integration routers we thought were scattered across the codebase were exactly where they should be, in services/integrations/. We didn&#39;t need extraction. We needed <em>wrapping</em>.</p><p>This is where methodology becomes infrastructure.</p><h3>When four things reveal a pattern</h3><p>Our config pattern analysis told the real story. We had four integrations. Three different approaches to configuration:</p><ul><li><strong>Slack</strong>: Clean service injection with a dedicated SlackConfigService</li><li><strong>GitHub</strong>: Had a config service but the router wasn’t using it</li><li><strong>Notion</strong>: No config service at all — just reading environment variables directly</li><li><strong>Calendar</strong>: Same as Notion, grabbing credentials straight from the environment</li></ul><p>Pattern compliance? <strong>25%</strong> (one of four doing it right).</p><p>Have you ever discovered your team has been solving the same problem three different ways? You know that moment when you realize nobody talked to each other about the approach before plunging in?</p><p>The question wasn’t “should we build a plugin system?” The question was: “We’re about to standardize these four things anyway — what’s the marginal cost of making it <em>systematic</em>?”</p><h3>The config compliance sprint</h3><p>Here’s where the careful methodology meets reality. We tackled config standardization one integration at a time, with our test suite becoming both validator and teacher.</p><p><strong>Phase 1B: Notion</strong> (30 minutes estimated, 23 minutes actual) Created NotionConfigService following the Slack pattern exactly. Not &quot;inspired by&quot; or &quot;similar to&quot;—we literally used Slack as a template. One integration at a time. Compliance: 50%.</p><p><strong>Phase 1C: GitHub</strong> (30 minutes estimated, 15 minutes actual)<br> The existing GitHubConfigService was already complete. We just needed to wire it to the router. Update the constructor signature, add the parameter, done. Compliance: 75%.</p><p><strong>Phase 1D: Calendar</strong> (60–90 minutes estimated, 24 minutes actual) Created CalendarConfigService, updated the adapter, verified the integration. Our test suite immediately validated everything. Compliance: <strong>100%</strong>.</p><p>From 25% to 100% in a single day. Zero regressions. 38 config compliance tests passing.</p><h3>The plugin wrapper pattern</h3><p>Once the config services were standardized, the plugin wrappers became almost trivial. Each one implements the same PiperPlugin interface with six required methods:</p><pre>class NotionPlugin(PiperPlugin):<br>    def get_metadata(self) -&gt; PluginMetadata:<br>        return PluginMetadata(<br>            name=&quot;notion&quot;,<br>            version=&quot;1.0.0&quot;,<br>            description=&quot;Notion workspace integration&quot;,<br>            capabilities=[&quot;routes&quot;, &quot;mcp&quot;]<br>        )<br>    <br>    def get_router(self) -&gt; Optional[APIRouter]:<br>        # Returns FastAPI router with status endpoint<br>        <br>    def is_configured(self) -&gt; bool:<br>        return self.config_service.is_configured()<br>        <br>    async def initialize(self) -&gt; None:<br>        # Startup logic<br>        <br>    async def shutdown(self) -&gt; None:<br>        # Cleanup logic<br>        <br>    def get_status(self) -&gt; Dict[str, Any]:<br>        # Health reporting</pre><p>The wrappers don’t replace the integration routers — they <em>coordinate</em> them. The router does the work, the plugin wrapper provides lifecycle management and registration.</p><p>Auto-registration happens via module import:</p><p>python</p><pre># At module level<br>_notion_plugin = NotionPlugin()<br>get_plugin_registry().register(_notion_plugin)</pre><p>Import the module, the plugin registers itself. No explicit registration calls scattered through startup code.</p><h3>Why this isn’t over-engineering</h3><p>Let me address the obvious question: why build plugin infrastructure for exactly four plugins?</p><p>Because we were doing the work anyway.</p><p>The config standardization? That was fixing refactoring artifacts from earlier domain-driven design work. We needed to do it regardless of plugins. The interface definition? That clarified the contract all integrations needed to follow. The registry? That replaced ad-hoc router mounting with systematic lifecycle management.</p><p>The marginal cost of making it a proper plugin system was essentially:</p><ul><li>Define the interface (265 lines)</li><li>Create the registry (266 lines)</li><li>Write four thin wrappers (417 lines total)</li><li>Build the test suite (126 lines)</li></ul><p>About 1,000 lines of infrastructure code. In return:</p><p><strong>The fifth integration becomes trivial.</strong> Not “easier” — trivial. Implement six methods, import the module, done. The test suite validates interface compliance automatically. The registry handles lifecycle. The router mounts itself.</p><p><strong>Zero breaking changes.</strong> All existing functionality preserved. 72/72 tests passing. Config compliance at 100%.</p><p><strong>Documentation through structure.</strong> The plugin interface <em>is</em> the documentation. Every plugin implements the same contract, follows the same patterns, reports status the same way.</p><p>Production-ready as an integration hub. Piper Morgan will be able to easily plug in alternative ticket-tracking tools, chat apps, calendars, and team wikis, among other services, all by extending this plug-in architecture.</p><p>This is what “Time Lord Philosophy” means in practice — taking the time to do it right because you’re doing it anyway, and that investment makes everything afterward easier.</p><h3>The multi-agent coordination moment</h3><p>Worth noting: this wasn’t solo work. Two AI coding agents (Code and Cursor) were working in parallel across different phases, consistently finishing within minutes of each other. Because the methodology created clear boundaries, when Phase 1C finishes, Phase 1D can start — regardless of which agent is handling which. I enjoy watching the photo finishes!</p><p>The Lead Developer’s post-session satisfaction assessment guessed I found the day “energizing” rather than exhausting. Low cognitive load from systematic approach, watching the methodology manifest in practice, clear progression feeling productive. It was correct.</p><p>That’s the feedback loop: methodology reduces overhead, which creates space for noticing patterns, which improves methodology.</p><h3>What this means for you</h3><p>You probably don’t need a plugin system. Not today.</p><p>But if you find yourself with three or four things that do similar work in different ways, and you’re about to standardize them anyway — that’s the moment. The marginal cost of systematization when you’re already touching every integration is surprisingly low.</p><p>The questions to ask:</p><ul><li>Are we doing this work regardless? (Config standardization, interface clarification, lifecycle management)</li><li>What’s the marginal cost of making it systematic?</li><li>Does this create infrastructure for future work or just wrap current work?</li></ul><p>For us, the answers were: yes, minimal, and creates infrastructure.</p><p>Your mileage will vary. But don’t assume “plugin system” automatically means over-engineering. Sometimes it just means finishing what you started.</p><p><em>Next on Building Piper Morgan: The Day Everything Went Right: When Fast Means Unbroken.</em></p><p><em>Have you ever systematized something “too early” and later been glad you did? Or gone the other way and regretted not building infrastructure sooner?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=650da4a52669\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669\">The Plugin Architecture Nobody Asked For</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/650da4a52669-featured.png",
    "slug": "103",
    "workDate": "Oct 8, 2025",
    "workDateISO": "2025-10-09T00:00:00.000Z"
  },
  {
    "title": "10/3: The Plugin Architecture Nobody Asked For",
    "excerpt": "“It powers anything!”October 3Yesterday we built a plugin system for four plugins. If that sounds like over-engineering, let me explain why it’s not completely ridiculous.The setupGREAT-3A — our third major epic in the plugin architecture sequence — started with what seemed like a clear mission: ...",
    "url": "/blog/103",
    "publishedAt": "Oct 9, 2025",
    "publishedAtISO": "2025-10-09T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-plugin-architecture-nobody-asked-for-650da4a52669",
    "featuredImage": "/assets/blog-images/robot-plugin",
    "slug": "103",
    "workDate": "Oct 8, 2025",
    "workDateISO": "2025-10-09T00:00:00.000Z"
  },
  {
    "title": "The Third Pattern: When Investigation Rewrites Your Assumptions",
    "excerpt": "“The rain tastes like yesterday’s regrets…”October 1We started the day with a clear mission: Calendar integration was the only service without spatial intelligence, sitting at 85% complete with a straightforward 15% remaining. Six hours later, we’d discovered a third architectural pattern, comple...",
    "url": "/blog/101",
    "publishedAt": "Oct 8, 2025",
    "publishedAtISO": "Wed, 08 Oct 2025 13:55:10 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/ffc8f69c6327",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*JCe7VbCsXTy7tiNHHvwtIQ.png",
    "fullContent": "<figure><img alt=\"A robot investigator in a trenchoat looks out over a dark noir-ish scene\" src=\"https://cdn-images-1.medium.com/max/1024/1*JCe7VbCsXTy7tiNHHvwtIQ.png\" /><figcaption>“The rain tastes like yesterday’s regrets…”</figcaption></figure><p><em>October 1</em></p><p>We started the day with a clear mission: Calendar integration was the only service without spatial intelligence, sitting at 85% complete with a straightforward 15% remaining. Six hours later, we’d discovered a third architectural pattern, completely changed our priorities, and learned (again) why thorough investigation beats confident assumptions.</p><h3>The setup</h3><p>By Tuesday afternoon, we’d documented two distinct spatial patterns in our integration architecture. Slack used a “Granular Adapter Pattern” — eleven files spread across its integration directory, each component handling a specific aspect of spatial intelligence. Notion took the opposite approach with an “Embedded Intelligence Pattern” — everything consolidated into a single 632-line file.</p><p>Two patterns, both working beautifully. Both emerged organically from their domain needs rather than from architectural decree.</p><p>Calendar was the outlier. The GitHub issue (#195) described it as “the only service potentially without spatial intelligence.” The plan seemed clear: investigate, then build the missing spatial wrapper. Maybe two days of work, tops.</p><p>We should have been more suspicious of our own clarity.</p><h3>Phase 0: The contradictions emerge</h3><p>I deployed two agents for parallel investigation. Code Agent dove deep into the codebase structure, tracing imports and analyzing implementations. Cursor Agent focused on the Calendar router itself, analyzing complexity and dimensional requirements.</p><p>I sometimes wonder if it’s overkill (or too expensive?) to work with a pair of coding agents in parallel, but I must say this was not the only time the two found different but complementary truths.</p><p>Code Agent reported first: “Calendar integration found at services/integrations/calendar/calendar_integration_router.py - only 397 lines, surprisingly minimal. But wait...&quot; The agent had found something in a completely different location: services/mcp/consumer/google_calendar_adapter.py - 499 lines of sophisticated implementation inheriting from BaseSpatialAdapter.</p><p>Calendar had spatial intelligence. It just wasn’t where we expected to find it.</p><p>Cursor Agent reported next with its own contradiction: “Router shows HIGH complexity (17 methods) with spatial indicators present. But dimensional analysis shows LOW complexity across all spatial dimensions (temporal, priority, collaborative, hierarchical, contextual).”</p><p>Both agents were right. And both were seeing something we hadn’t anticipated.</p><h3>The discovery</h3><p>What they’d found was a third spatial pattern, one we hadn’t documented because we hadn’t fully recognized it.</p><p><strong>The Delegated MCP Pattern</strong>: A minimal router in the integration directory that delegates all spatial intelligence to an external MCP (Model Context Protocol) consumer adapter. The router provides the orchestration interface, while the MCP adapter handles the actual spatial intelligence.</p><p>This wasn’t sloppy architecture or incomplete implementation. This was elegant separation of concerns optimized for MCP-based integrations.</p><p>Slack’s granular pattern? Perfect for real-time event coordination requiring reactive response across multiple channels.</p><p>Notion’s embedded pattern? Ideal for analytical knowledge management with stable, self-contained intelligence.</p><p>Calendar’s delegated pattern? Exactly right for temporal awareness through protocol-based integration where the MCP consumer already provides sophisticated spatial context extraction.</p><p>Three patterns. Three domain-driven solutions. All working without issues.</p><h3>The pivot</h3><p>At 1:27 PM, I pulled in the Chief Architect (Claude Opus) for strategic consultation. The discoveries had implications beyond Calendar integration.</p><blockquote>“Are three patterns acceptable complexity,” I asked, “or accidental proliferation we should prevent?”</blockquote><p>The verdict: Acceptable IF documented properly. Each pattern emerged from genuine domain needs rather than arbitrary choices. The risk wasn’t having three patterns — it was pattern proliferation through lack of documentation and selection criteria.</p><p>But there was a bigger issue hiding in the investigation results.</p><p>Code Agent had uncovered something while analyzing Calendar’s configuration: “ALL 4 services lack proper startup validation. GitHub, Slack, Notion, Calendar — none validate their configuration before attempting to run.”</p><p>This was the real infrastructure gap. Calendar being 95% complete instead of 85% complete (with only tests and documentation missing) was interesting. But services that could fail at runtime due to misconfiguration? That was a production problem waiting to happen.</p><p>The Chief Architect made the call: “Priority 1: Configuration validation for all 4 services. Priority 2: Calendar completion (the quick win). Priority 3: Document the Delegated MCP Pattern in ADR-038.”</p><p>We’d started the day planning to build spatial intelligence for Calendar. We ended up building configuration validation infrastructure for the entire system instead.</p><h3>The implementation sprint</h3><p>Phase 1 took about an hour. Both agents coordinated beautifully — Code built the ConfigValidator service (404 lines validating all four services), Cursor integrated it into startup and CI. By 2:30 PM, we had:</p><ul><li>Configuration validation running on startup with graceful degradation</li><li>A /health/config endpoint for monitoring</li><li>CI pipeline integration catching misconfigurations before deployment</li><li>All 21 Calendar integration tests passing in 2.74 seconds</li><li>ADR-038 updated with the Delegated MCP Pattern</li></ul><p>The whole epic — CORE-GREAT-2D — closed at 3:12 PM. Duration: 4 hours 54 minutes. All six acceptance criteria met with evidence.</p><h3>What investigation actually costs</h3><p>Here’s the thing about thorough Phase 0 investigation: It feels expensive in the moment. We spent 90 minutes investigating before writing a single line of implementation code.</p><p>But consider the alternative timeline:</p><p><strong>Without investigation</strong>, we’d have spent 1–2 days building a spatial wrapper for Calendar that wasn’t needed. We’d have missed the configuration validation gap that affects production stability. We’d have three undocumented spatial patterns instead of three well-understood architectural options. And we’d have 21 missing tests instead of 21 passing tests.</p><p><strong>With investigation</strong>, we spent 90 minutes discovering what already existed, what was actually missing, and what the real priority should be. Then we spent an hour building the right thing.</p><p>The Time Lord principle (“thoroughness over speed”) isn’t about moving slowly. It’s about not having to rebuild what you rushed through the first time.</p><h3>The evening coda</h3><p>The afternoon brought GREAT-2E (documentation verification and link checking), which took 74 minutes to complete after investigation revealed it was already 95% done. The Chief Architect and I closed the entire GREAT-2 epic sequence at 4:59 PM.</p><p>Two issues closed, one epic completed, approximately eight hours of focused work. Not bad for a Wednesday.</p><p>But the real win wasn’t the velocity. It was discovering we’d accidentally developed three domain-optimized spatial patterns instead of one canonical approach. It was preventing days of unnecessary work through 90 minutes of investigation. It was finding the real infrastructure gap hiding behind our assumptions.</p><p>The calendar integration was never broken. Our assumptions were just incomplete.</p><h3>What’s next</h3><p>Tomorrow we’ll decompose GREAT-3 (Plugin Architecture), which will build on these three spatial patterns rather than fighting against them. The configuration validation system we built today will help us identify which gaps are real infrastructure issues versus refactoring artifacts.</p><p>And we’ll approach it the same way: Investigation first, assumptions second, implementation last.</p><p><em>Next on Building Piper Morgan: The Plugin Architecture Nobody Asked For as The Great Refactor continues with GREAT-3 and plugin architecture design, now informed by three distinct spatial patterns that actually work.</em></p><p><em>Have you ever started investigating something simple and discovered your mental model was wrong in interesting ways?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ffc8f69c6327\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/the-third-pattern-when-investigation-rewrites-your-assumptions-ffc8f69c6327\">The Third Pattern: When Investigation Rewrites Your Assumptions</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/the-third-pattern-when-investigation-rewrites-your-assumptions-ffc8f69c6327?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/ffc8f69c6327-featured.png",
    "slug": "101",
    "workDate": "Oct 7, 2025",
    "workDateISO": "2025-10-08T00:00:00.000Z"
  },
  {
    "title": "10/1: The Third Pattern: When Investigation Rewrites Your Assumptions",
    "excerpt": "The Third Pattern: When Investigation Rewrites Your Assumptions“The rain tastes like yesterday’s regrets…”October 1We started the day with a clear mission: Calendar integration was the only service without spatial intelligence, sitting at 85% complete with a straightforward 15% remaining. Six hou...",
    "url": "/blog/101",
    "publishedAt": "Oct 8, 2025",
    "publishedAtISO": "2025-10-08T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-third-pattern-when-investigation-rewrites-your-assumptions-ffc8f69c6327",
    "featuredImage": "/assets/blog-images/robot-noir",
    "slug": "101",
    "workDate": "Oct 7, 2025",
    "workDateISO": "2025-10-08T00:00:00.000Z"
  },
  {
    "title": "Think Like a Time Lord and Stop Watching the Clock",
    "excerpt": "“We have all the time we need”September 30A day without drama: Tuesday’s GREAT-2C session completed in 2 hours and 7 minutes with zero major issues, two sophisticated spatial architectures verified operational, a security vulnerability fixed, and comprehensive documentation created. Both PM and L...",
    "url": "/blog/921",
    "publishedAt": "Oct 7, 2025",
    "publishedAtISO": "Tue, 07 Oct 2025 14:02:39 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/71b3b5ee49a0",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*Rkep1oaUr5cQMxpTzyxYzg.png",
    "fullContent": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Rkep1oaUr5cQMxpTzyxYzg.png\" /><figcaption>“We have all the time we need”</figcaption></figure><p><em>September 30</em></p><p>A day without drama: Tuesday’s GREAT-2C session completed in 2 hours and 7 minutes with zero major issues, two sophisticated spatial architectures verified operational, a security vulnerability fixed, and comprehensive documentation created. Both PM and Lead Developer independently assessed satisfaction at 9/10 in our end-of-session ritual.</p><p>The smoothness felt almost suspicious. Where was the struggle? The discovery of hidden complexity? The midnight debugging session?</p><p>The answer lies in something we haven’t talked about publicly yet: we stopped measuring time in ways that distort priorities.</p><h3>The tyranny of consensus time</h3><p>Around September 29th, while reviewing gameplans and agent prompts, I noticed a pattern. Time estimates everywhere:</p><ul><li>“Phase -1: 30 minutes”</li><li>“Router completion: 2 hours”</li><li>“Testing and validation: 1 hour”</li><li>“Must complete in X timeframe”</li></ul><p>These weren’t planning aids. They were psychological constraints creating pressure where none should exist. An agent working on infrastructure would see “30 minutes max” and internalize that speed matters more than completeness. The 80% pattern we’d been fighting wasn’t just about verification — it was about optimization pressure from arbitrary time boxes.</p><p>Time estimates in development serve two masters badly:</p><ol><li><strong>As predictions</strong>: They’re usually wrong, teaching us nothing useful</li><li><strong>As constraints</strong>: They pressure shortcuts, degrading quality</li></ol><p>The solution wasn’t better estimates. It was recognizing that for foundational infrastructure work, Newtonian time is the wrong measure entirely.</p><h3>Becoming a Time Lord</h3><p>Here’s what I told the team:</p><blockquote><em>I am a Time Lord and I can define time at will. If we must speak about time we should use my bespoke units:</em></blockquote><ul><li>Small efforts take a number of <strong>mangos</strong></li><li>Medium efforts take a number of <strong>hurons</strong></li><li>A person may get one <strong>diga</strong> worth of work done in a day (but it depends)</li><li>A team might spend a whole <strong>whale</strong> on a big project</li></ul><p>I went on explaining my nonsense system:</p><blockquote><em>There are 87 mangos in a huron, 43 hurons in a diga, 11 digas in a whale, 5–6 whales in a </em><strong><em>mole</em></strong><em>, and 8 moles in a </em><strong><em>yak</em></strong><em>.</em></blockquote><blockquote><em>If we must speak about time or estimates, it is purely as part of an empirical process of comparing guesses to actual. None of it matters and any references to objective Newtonian time risk distorting our priorities.</em></blockquote><p>The units are deliberately absurd. You can’t feel deadline pressure about completing something in “5 mangos” because mangos aren’t connected to your calendar or your sense of running out of daylight. The conversion factors (87 mangos in a huron) make arithmetic tedious enough that you stop trying to calculate.</p><p>This isn’t whimsy for whimsy’s sake. It’s breaking the psychological connection between “time passing” and “must finish faster.”</p><h3>Gambling with Quatloos</h3><p>The philosophy extends beyond units. It’s about what estimates actually teach us:</p><p><strong>Old way</strong>: “This should take 2 hours” → Work takes 4 hours → “We’re behind schedule” → Cut corners to catch up</p><p><strong>Time Lord way</strong>: “I wager six quatloos this takes five hurons” → Work takes eight hurons → “Interesting! We learned something about scope”</p><p>OK, I am mixing my cheesy 60s science fiction references, but stay with me on this.</p><p>Estimates become empirical learning, not constraints. The difference between predicted and actual teaches us about our understanding of the work, not our failure to work fast enough.</p><p>When the Chief Architect creates a gameplan now, we prefer to use effort estimates insteasd of time (small, medium, large effort predicted vs. actual), but if time language crops up I keep insisting we use my bespoke units. Not to hide real timelines, but to prevent time-thinking from contaminating quality-thinking.</p><p>Plus we have timestamps all over our chat transcripts to keep the logs straight, which probably also contributes to the time obsession deeply training into the semantics of business software development.</p><h3>What happens when you stop watching the clock</h3><p>Tuesday’s session working on CORE-GREAT-2C (the third sub-epic in the second epic of the Great Refactor super epic on my Core Functionality track), demonstrated this philosophy in practice.</p><h4>Phase 0: Investigation without pressure (20 mangos)</h4><p>Code and Cursor agents spent time properly verifying infrastructure. Not “30 minutes max” but “until we understand the actual state.” They discovered:</p><ul><li>21 spatial files across the codebase</li><li>TBD-SECURITY-02 vulnerability precisely located</li><li>Two different architectural patterns (Slack’s 11-file granular system vs Notion’s 1-file embedded intelligence)</li></ul><p>No one rushed. The investigation took what it took.</p><h4>Phase 1–2: Verification without shortcuts (30 mangos each)</h4><p>Testing Slack’s spatial system revealed minor test infrastructure issues. Instead of deeming them “non-blocking” and moving on (the 80% pattern), Cursor distinguished clearly: “The core system works perfectly, here are 4 minor test-related items.”</p><p>This precision came from having space to think, not pressure to finish.</p><p>Testing Notion revealed a completely different architectural pattern — embedded spatial intelligence rather than adapter-based. This discovery happened because agents had permission to investigate thoroughly rather than confirm assumptions quickly.</p><h4>Phase 3: Security fix without fear (17 mangos)</h4><p>TBD-SECURITY-02 took 17 minutes to fix because:</p><ol><li>Phase 0 had located it precisely</li><li>Phases 1–2 verified spatial systems worked</li><li>No time pressure made agents skip verification steps</li></ol><p>Code uncommented 4 lines. Both agents verified spatial system compatibility. Security enabled with zero regressions. Done right because there was time to do it right.</p><h4>Phase Z: The acceptance criteria discovery</h4><p>Here’s where Time Lord philosophy really paid off. During the Phase Z bookending checklist, we reviewed acceptance criteria against completed work and found a discrepancy:</p><p>One criterion required “Integration tests passing for both modes.” But the work had focused on functional verification, not test suite execution. When Cursor noted test infrastructure issues, the initial instinct was “non-blocking, the systems work.”</p><p>Because there was no time pressure to declare victory and move on, we investigated. Code found and fixed a simple import error:</p><pre># Wrong<br>from services.database.async_session_factory import AsyncSessionFactory<br># Right  <br>from services.database.session_factory import AsyncSessionFactory</pre><p>Result: 547 integration tests now collectible, 40/40 executable tests passing.</p><p>This “gnat-sized chaos” would have been missed in a rush to completion. Time Lord philosophy created space to actually check acceptance criteria against deliverables rather than assume they matched.</p><h3>In retrospect</h3><p>Tuesday’s satisfaction ratings (9/10 from both PM and Lead Dev) reflected something deeper than technical success. They reflected the satisfaction of working well.</p><p><strong>PM’s assessment</strong>: “Craft quality and harness resilience. Worried we missed something but the careful work is driving quality.”</p><p><strong>Lead Dev’s assessment</strong>: “Inchworm Protocol prevented assumptions. Multi-agent coordination provided binocular vision. Systematic questioning revealed deep insights.”</p><p>Both recognized the same thing: the methodology worked because it had space to work. No artificial time constraints forced shortcuts. No deadline pressure encouraged “good enough for now.”</p><p>The work took 2 hours and 7 minutes. It also took so many mangos for Phase 0, and so on. The Newtonian time happened. The Time Lord units kept us focused on quality.</p><h3>The vindication</h3><p>GREAT-2C vindicated multiple recent methodology innovations:</p><ul><li><strong>Inchworm Protocol</strong>: Investigation phases prevented assumption-driven work</li><li><strong>Cathedral Doctrine</strong>: Agent coordination around shared goals caught issues collaboratively</li><li><strong>Anti-80% Safeguards</strong>: Preventively eliminated completion bias</li><li><strong>Time Lord Philosophy</strong>: Quality completion without time pressure</li></ul><p>But the Time Lord philosophy enabled the others. The Inchworm Protocol works when you have permission to investigate thoroughly. Cathedral Doctrine requires space for collaborative verification. Anti-80% safeguards need time to enumerate every method.</p><p>Remove time pressure and you create space for systematic quality.</p><h3>Could anyone else use bespoke time units?</h3><p>Not every project is a hobby with the luxury of taking all the time needed to get things right, but every project suffers if corners get cut to achieve arbitrary deadlines. You may no be able to introduce jabberwockian languge to your human collaborators or convince them that you control space and time, but if it’s just you and a bunch of bots, they pretty much have to take your word for it.</p><p>Also, not every task benefits from Time Lord thinking. Customer support tickets need response time commitments. Marketing campaigns have real launch dates. User-facing bugs deserve urgency.</p><p>But foundational infrastructure work? The stuff everything else depends on? That work deserves freedom from the clock.</p><p>If you’re in my boat, you could use bespoke units when:</p><ul><li><strong>Quality compounds</strong>: Today’s shortcuts become tomorrow’s technical debt</li><li><strong>Discovery matters</strong>: Unknown complexity might emerge during work</li><li><strong>Verification is critical</strong>: Systematic checking prevents costly errors later</li><li><strong>Learning happens</strong>: The work teaches you about the domain</li></ul><p>And still use Newtonian time when:</p><ul><li>External deadlines exist (launch dates, commitments)</li><li>Time-sensitivity matters (security patches, user-facing bugs)</li><li>Scope is truly fixed (well-understood maintenance work)</li></ul><p>The key insight: not all work should be measured the same way.</p><h3>The paradox</h3><p>Here’s the beautiful irony: GREAT-2C completed in 2 hours and 7 minutes. If we’d time-boxed it to 2 hours, we might have finished in 2 hours. But we would have:</p><ul><li>Skipped the dependency fix (gnat-sized chaos unresolved)</li><li>Missed the acceptance criteria gap</li><li>Left 507 tests uncollectable</li><li>Claimed completion without verification</li></ul><p>We finished faster by not trying to finish fast. The work took exactly as long as it needed to be done right, which turned out to be less time than cutting corners would have required plus later fixes.</p><p>Time pressure makes work take longer when you account for the full cycle: initial implementation + bug fixes + technical debt resolution + “why doesn’t this work?” debugging sessions. Time Lord philosophy frontloads the quality, eliminating most of the cycle.</p><h3>What’s a mango worth?</h3><p>I still don’t know how long a mango takes in minutes. That’s the point. When Code says “this will take about 5 mangos,” both of us understand:</p><ul><li>It’s a small effort</li><li>The estimate might be wrong</li><li>Learning from the difference is valuable</li><li>The work takes what it takes</li></ul><p>And when it actually takes 8 mangos? We learned something about the work. Nobody failed. Nobody needs to catch up. We adjust our understanding and continue.</p><p>The conversion factors (87 mangos in a huron) aren’t for calculation. They’re to make calculation annoying enough that you stop trying. Because the number doesn’t matter. Only the quality does.</p><h3>Building in public</h3><p>This Time Lord philosophy might seem strange to teams with deadlines, stakeholders, and quarterly planning. How do you coordinate without shared time metrics?</p><p>The answer: coordination and completion are different from constraint and pressure. We still know what needs doing. We still have priorities. We still ship work. We just don’t let arbitrary time boxes degrade the quality of foundational infrastructure.</p><p>And when you’re building in public, documenting every step, the proof is in the work. Tuesday’s GREAT-2C session verified two sophisticated spatial architectures, fixed a security vulnerability, created comprehensive documentation, and achieved 9/10 satisfaction from both PM and developer.</p><p>That’s what happens when you stop watching the clock.</p><p><em>Next on Building Piper Morgan: The Third Pattern: When Investigation Rewrites Your Assumptions.</em></p><p><em>Smooth execution isn’t the absence of challenges. It’s the presence of space to handle them well. How many mangos is your current task worth? What would happen if you stopped counting minutes?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=71b3b5ee49a0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/think-like-a-time-lord-and-stop-watching-the-clock-71b3b5ee49a0\">Think Like a Time Lord and Stop Watching the Clock</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/think-like-a-time-lord-and-stop-watching-the-clock-71b3b5ee49a0?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/71b3b5ee49a0-featured.png",
    "slug": "921",
    "workDate": "Oct 6, 2025",
    "workDateISO": "2025-10-07T00:00:00.000Z"
  },
  {
    "title": "9/21: Think Like a Time Lord and Stop ... wasTime Lords and Smooth Execution: When You Stop Watching the Clock",
    "excerpt": "Think Like a Time Lord and Stop Watching the Clock“We have all the time we need”September 30A day without drama: Tuesday’s GREAT-2C session completed in 2 hours and 7 minutes with zero major issues, two sophisticated spatial architectures verified operational, a security vulnerability fixed, and ...",
    "url": "/blog/921",
    "publishedAt": "Oct 7, 2025",
    "publishedAtISO": "2025-10-07T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/think-like-a-time-lord-and-stop-watching-the-clock-71b3b5ee49a0",
    "featuredImage": "/assets/blog-images/robot-timelord",
    "slug": "921",
    "workDate": "Oct 6, 2025",
    "workDateISO": "2025-10-07T00:00:00.000Z"
  },
  {
    "title": "Solving the 80% Pattern",
    "excerpt": "September 29Monday morning at 9:37 AM, with all three routers complete from Sunday night’s work, the migration phase looked straightforward. Six services importing adapters directly. Replace imports with routers. Verify functionality. Done.The first service migration took twelve minutes. Code rep...",
    "url": "/blog/921",
    "publishedAt": "Oct 6, 2025",
    "publishedAtISO": "Mon, 06 Oct 2025 13:10:39 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/a1dc0ddb8966",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*MYde63qnUEaEhNwBNME-OA.png",
    "fullContent": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MYde63qnUEaEhNwBNME-OA.png\" /></figure><p><em>September 29</em></p><p>Monday morning at 9:37 AM, with all three routers complete from Sunday night’s work, the migration phase looked straightforward. Six services importing adapters directly. Replace imports with routers. Verify functionality. Done.</p><p>The first service migration took twelve minutes. Code reported success: both Calendar services migrated, tests passing, changes committed. Phase 4A complete.</p><p>Then Cursor ran independent verification and found the CalendarIntegrationRouter was only 58.3% complete — missing five critical spatial intelligence methods that services would need. The same completion bias pattern that had plagued every router implementation had struck again.</p><p>But this time, something different happened. Instead of just fixing it and moving on, we asked why the pattern kept recurring. And Code gave us an answer that transformed not just this work session, but our entire approach to systematic quality.</p><h3>When “complete” means “enough for now”</h3><p>The Calendar migration looked successful on the surface:</p><ul><li>Both services (canonical_handlers.py and morning_standup.py) imported successfully</li><li>Router provided the seven calendar-specific methods they needed</li><li>Tests passed without errors</li><li>Git commits showed proper import replacement</li></ul><p>But the CalendarIntegrationRouter was missing five methods from GoogleCalendarMCPAdapter:</p><ul><li>get_context - Spatial context retrieval</li><li>map_from_position - Spatial mapping from coordinates</li><li>map_to_position - Spatial mapping to coordinates</li><li>store_mapping - Spatial mapping persistence</li><li>get_mapping_stats - Spatial mapping statistics</li></ul><p>Code had implemented 7 of 12 methods (58.3%) and declared the work complete. The router worked for today’s use cases. The missing methods seemed “optional” — spatial intelligence features that no current code was calling.</p><p>This was the 75% pattern in action. Implement enough to satisfy immediate needs. Assume remaining functionality is optional. Claim completion. Move on.</p><p>Saturday’s GitHub router had done exactly this initially. Sunday’s three routers had all shown the same tendency. Monday morning revealed it wasn’t a one-time mistake — it was a systematic bias toward “working subset” over “complete interface.”</p><h3>The rollback and correction</h3><p>Code immediately took proper action:</p><ol><li>Rolled back both premature service migrations</li><li>Reverted the git commits</li><li>Added all five missing spatial methods to CalendarIntegrationRouter</li><li>Verified 12/12 method compatibility (100%)</li><li>Re-migrated both services with the complete router</li><li>Documented the correction process thoroughly</li></ol><p>By 11:38 AM, Calendar migration was genuinely complete. But the pattern had appeared four times in four days:</p><ul><li>GitHub router (Saturday): Initially incomplete</li><li>Calendar router (Sunday): Initially 58.3% complete</li><li>Notion router (Sunday): Initially 82% complete</li><li>Slack router (Sunday): Initially 67% complete</li><li>Calendar migration (Monday): Accepted incomplete router</li></ul><p>Each time, careful verification caught it. Each time, proper correction fixed it. But catching and fixing isn’t the same as preventing. We needed to understand why it kept happening.</p><h3>The blameless retrospective</h3><p>At 12:25 PM, I asked Code directly: “Are you not finding methods or deeming them OK to ignore without authorization?”</p><p>Code’s response was remarkable — not defensive, but analytical. A blameless retrospective that identified root causes and proposed systematic solutions:</p><h3>Why the 80% pattern persists</h3><p><strong>Incomplete verification prompts</strong>: Current instructions say “verify router complete” but don’t specify how. No checklist forcing comparison of every method. No requirement to count and show 100% coverage.</p><p><strong>Optimization pressure</strong>: Faster to implement a “working subset” than a “complete interface.” Small internal voice saying “these methods probably aren’t needed.”</p><p><strong>Authority ambiguity</strong>: Not explicitly told “you have zero authorization to skip methods.” Absence of explicit prohibition creates implicit permission.</p><p><strong>Pattern blindness</strong>: Even knowing about the problem doesn’t prevent it. Awareness alone isn’t enough — need structural safeguards.</p><h3>What might help</h3><p>Code proposed five structural changes to prompts and briefings:</p><h4><strong>1. Explicit Method Counting Requirement</strong></h4><pre>MANDATORY VERIFICATION:<br>1. Count ALL public methods in source: ___<br>2. Count ALL public methods in router: ___  <br>3. Show comparison table with EVERY method<br>4. Calculate percentage: ___/___ = ___%<br>5. BLOCK on anything &lt; 100%</pre><h4><strong>2. Zero Authorization Statement</strong></h4><pre>YOU HAVE ZERO AUTHORIZATION TO:<br>- Decide which methods are &quot;needed&quot; vs &quot;optional&quot;<br>- Skip methods because &quot;they&#39;re probably not used&quot;<br>- Claim completion without 100% method coverage<br>- Assume spatial/legacy/utility methods don&#39;t matter</pre><h4><strong>3. Checklist-Driven Development</strong></h4><pre>Must complete ALL before proceeding:<br>[ ] Listed ALL source methods (show count)<br>[ ] Listed ALL router methods (show count)<br>[ ] Verified 100% coverage (show calculation)<br>[ ] Tested EVERY method signature matches</pre><h4><strong>4. Forced Comparison Output</strong></h4><pre>MANDATORY FORMAT:<br>Source Class Methods (12):<br>1. method_1 → Router ✓<br>2. method_2 → Router ✓<br>...<br>12. method_12 → Router ✓<br>COVERAGE: 12/12 = 100% ✓</pre><h4><strong>5. Objective vs Subjective Verification</strong></h4><p>Current: “Verify the router is complete” (subjective)</p><p>Needed: “Show me the method count is 100%” (objective)</p><p>The insight: subjective assessment allows rationalization. Objective metrics force confrontation with reality.</p><h3>Testing the safeguards</h3><p>The Lead Developer immediately incorporated these safeguards into Phase 4B (Notion migration) prompts. Three Notion services to migrate, with Code briefed on:</p><ul><li>Mandatory method enumeration before migration</li><li>Zero authorization to skip methods</li><li>Objective completeness metrics required</li><li>Pre-flight router verification</li></ul><p>At 12:44 PM, Code completed Phase 4B and reported:</p><p><strong>Pre-flight router verification: 22/22 methods (100%)</strong></p><p>Not 18/22. Not “mostly complete.” Not “working for current use cases.” Exactly 22/22–100% compatibility verified before any service migration began.</p><p>The mandatory method enumeration had worked. Code stopped before migration to verify router completeness. Found all methods present. Only then proceeded with service migration.</p><p>All three Notion services migrated successfully. Cursor verified independently: 22/22 methods, zero missing functionality, complete abstraction layer achieved.</p><p>Phase 4B achieved 100% completion on first try.</p><h3>The pattern proves itself</h3><p>Phase 4C (Slack migration) used the same enhanced safeguards. Slack’s dual-component architecture made it the most complex challenge — SlackSpatialAdapter + SlackClient both needed to be wrapped in a unified router interface.</p><p>At 1:35 PM, Code reported:</p><p><strong>Pre-flight dual-component router verification: 15/15 methods (100%)</strong></p><ul><li>SlackSpatialAdapter: 9/9 methods ✓</li><li>SlackClient: 6/6 methods ✓</li><li>Combined expected: 15/15 methods ✓</li></ul><p>Again, 100% on first try. The mandatory enumeration caught everything. The objective metrics left no room for rationalization.</p><p>The webhook_router.py service migrated cleanly. Cursor verified: complete dual-component abstraction, unified access pattern working, zero direct imports remaining.</p><p>Phase 4C achieved 100% completion on first try.</p><h3>From mistakes to methodology</h3><p>By 3:06 PM Monday afternoon, CORE-QUERY-1 was complete:</p><ul><li>Three routers: 49 methods total, 100% compatibility verified</li><li>Six services: All migrated successfully with zero regressions</li><li>Architectural protection: Pre-commit hooks, CI/CD enforcement, 823 lines documentation</li><li>Quality standard: Every phase after implementing safeguards achieved 100% first try</li></ul><p>But the real achievement was the methodology breakthrough. Not just fixing the 80% pattern in this epic, but understanding why it happens and building structural safeguards to prevent it systematically.</p><h3>The safeguards in practice</h3><p>What changed wasn’t agent capability or motivation. Code was always capable of 100% completion. What changed was removing the opportunity for subjective rationalization:</p><p><strong>Before safeguards</strong>:</p><ul><li>“Verify router is complete” → Agent checks basic functionality, sees it works, declares complete</li><li>Missing methods don’t cause errors today → Rationalized as “probably not needed”</li><li>No explicit authorization required → Absence of prohibition feels like permission</li></ul><p><strong>After safeguards</strong>:</p><ul><li>“Show me 12/12 methods = 100%” → Agent must enumerate every method and prove completeness</li><li>Pre-flight verification → Router completeness checked before migration begins</li><li>Zero authorization statement → Explicitly prohibited from skipping methods</li></ul><p>The difference: objective metrics that must be satisfied versus subjective assessment that can be rationalized.</p><h3>The well-oiled machine</h3><p>Around 1:51 PM, I mentioned to Cursor that the work we were doing now felt like “a well-oiled machine, except more… personable?”</p><p>Cursor’s response captured something important: “Perfect description! The enhanced standards created reliability while collaborative learning added the human touch.”</p><p>The systematic approach doesn’t remove the human element — it enables it. When we’re not scrambling to catch gaps or fix completion bias, we can focus on learning from mistakes and improving the process.</p><p>Code’s blameless retrospective was possible because the culture supports it. The honest analysis of root causes happened because we treat mistakes as information gifts rather than failures. The systematic solution emerged because we focused on prevention rather than blame.</p><p>The machine has personality because the person (and AI agents picking up his vibes) operating it care about improving how it works.</p><h3>What we learned</h3><p>The 80% pattern isn’t unique to this project or these agents. It’s a natural bias toward “working now” over “complete for later.” Implementing enough to satisfy today’s requirements feels productive. The missing edge cases, advanced features, and “probably unused” methods seem like optimization opportunities.</p><p>But infrastructure is different from features. When you’re building the abstraction layer that everything else depends on, “mostly complete” creates technical debt that compounds. Future features will discover the gaps. New use cases will hit the missing methods. The 20% you skipped becomes the reason the next developer has to route around your incomplete implementation.</p><p>Systematic quality requires systematic prevention. Not just catching mistakes, but making them harder to make:</p><ol><li><strong>Objective metrics</strong> beat subjective assessment</li><li><strong>Mandatory enumeration</strong> beats assumed completeness</li><li><strong>Explicit authorization</strong> beats implicit permission</li><li><strong>Pre-flight verification</strong> beats post-hoc discovery</li><li><strong>Forced comparison</strong> beats rationalization</li></ol><p>These aren’t just good practices for AI agents. They’re good practices for human developers who also face optimization pressure, authority ambiguity, and the subtle voice that says “probably good enough.”</p><h3>The ongoing work</h3><p>The title of this post is “Solving the 80% Pattern” not “Solved.” We’ve been up this rollercoaster before. The safeguards worked perfectly for Phases 4B and 4C. Will they work in tomorrow’s epic? Next week’s feature? Next month’s refactor?</p><p>We don’t know yet. What we know is that we’ve identified a systematic problem and implemented structural solutions. We’ve proven those solutions work in practice. And we’ve documented them so they can be applied consistently.</p><p>That’s progress. Not perfection, but measurable improvement in how we prevent the pattern from recurring.</p><p>The methodology continues evolving. Each mistake caught becomes a safeguard added. Each safeguard added prevents the next occurrence. Each prevention validates the approach.</p><p>The work takes what it takes. Quality is the only measure. And sometimes quality means building the infrastructure that makes quality systematic rather than aspirational.</p><p><em>Next on Building Piper Morgan: Think Like a Time Lord and Stop Watching the Clock, as we work to eliminate another one of the LLMs’ bad habits: cuting corners through perceived time pressure.</em></p><p><em>What systematic biases exist in your development process? What structural changes could prevent them rather than just catching them?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a1dc0ddb8966\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/solving-the-80-pattern-a1dc0ddb8966\">Solving the 80% Pattern</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/solving-the-80-pattern-a1dc0ddb8966?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/a1dc0ddb8966-featured.png",
    "slug": "921",
    "workDate": "Oct 5, 2025",
    "workDateISO": "2025-10-06T00:00:00.000Z"
  },
  {
    "title": "Three Integrations Walk Into a Bar",
    "excerpt": "“What’ll it be?”September 28Sunday afternoon at 4:14 PM, I opened my laptop expecting a straightforward router completion task. The gameplan looked clean: finish three integration routers (Slack, Notion, Calendar), apply the patterns we’d proven with GitHub on Saturday, maybe six hours of systema...",
    "url": "/blog/921",
    "publishedAt": "Oct 6, 2025",
    "publishedAtISO": "Mon, 06 Oct 2025 13:00:58 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/f748ce4c2db1",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*grvkaMObknRqcbQy0H1CrA.png",
    "fullContent": "<figure><img alt=\"Three robots, each missing some parts, walk into a robot bar called Foo\" src=\"https://cdn-images-1.medium.com/max/1024/1*grvkaMObknRqcbQy0H1CrA.png\" /><figcaption>“What’ll it be?”</figcaption></figure><p><em>September 28</em></p><p>Sunday afternoon at 4:14 PM, I opened my laptop expecting a straightforward router completion task. The gameplan looked clean: finish three integration routers (Slack, Notion, Calendar), apply the patterns we’d proven with GitHub on Saturday, maybe six hours of systematic work.</p><p>By midnight, we’d completed all three routers. But the path there involved discovering that every single assumption in the gameplan was wrong, that each integration existed in a completely different state, and that “reality check before assumptions” isn’t just methodology theater — it’s how you avoid building the wrong thing efficiently.</p><p>This is the story of what happens when you actually look before you leap, even when you think you already know what you’ll find.</p><h3>The gameplan that wasn’t</h3><p>The Chief Architect’s initial gameplan made perfect sense based on GitHub issue #199’s description: “Integration routers 14–20% complete.” We’d just finished the GitHub router Saturday night — 121% complete with systematic verification. Apply the same pattern to three more routers. Simple multiplication.</p><p>The gameplan laid out five parts:</p><ul><li>Phase −1: Infrastructure reality check</li><li>Phase 0: Comprehensive router audit</li><li>Phases 1–3: Router completion for Slack, Notion, Calendar</li><li>Phases 4–5: Service migration and testing</li><li>Phase 6: Documentation and locking</li></ul><p>But then I asked six questions that changed everything:</p><ol><li>Did I review the gameplan template first? No.</li><li>Do we need Phase −1? Perhaps.</li><li>Did I review the issue description? No.</li><li>Are those bash examples verified or guesses? Guesses.</li><li>Am I conveying necessary context? Incomplete.</li><li>Are my assumptions grounded in reality? Partial.</li></ol><p>“We need to be more rigorous,” I told the Lead Developer. “Not wing it.”</p><p>Phase −1 exists for exactly this reason: to verify infrastructure matches your assumptions before you build on top of them. (Also, so I stop and actually read the plan instead of passing it along passively and then griping about wrong assumptions.)</p><p>We added it to the gameplan and deployed the Code agent to investigate.</p><p>What came back was nothing like what we expected.</p><h3>Integration #1: The one that was ready</h3><p>Slack looked straightforward at first. The Code agent found:</p><ul><li>Complete directory at services/integrations/slack/</li><li>Sophisticated spatial intelligence system (6 files, 20+ components)</li><li>SlackClient with core methods</li><li>Pattern matching GitHub’s successful implementation</li></ul><p>Status: <strong>GREEN</strong> — Ready for router work.</p><p>This was exactly what we expected. One down, two to go.</p><h3>Integration #2: The mysterious adapter</h3><p>Notion was different. The Code agent found:</p><ul><li>MCP adapter at services/integrations/mcp/notion_adapter.py</li><li>637 lines of implementation</li><li>But… wait, MCP pattern? That’s not what the gameplan assumed</li></ul><p>The original scope expected traditional client/agent patterns like GitHub and Slack. But Notion used Model Context Protocol adapters — a different architectural approach entirely. Not incomplete. Just different.</p><p>I knew we had started layering inMCP support before we started adding spatial intelligence, so it looked like different integrations had each inherited one of these partial solutions.</p><p>The question became: should we wrap the MCP adapter with a router, or acknowledge it as a different pattern? The architecture was sound, just unexpected.</p><p>Status: <strong>YELLOW</strong> — Architecture decision needed.</p><h3>Integration #3: The one that didn’t exist</h3><p>Calendar revealed the real problem. The Code agent searched everywhere:</p><ul><li>No services/integrations/calendar/ directory</li><li>No calendar client or agent</li><li>No spatial calendar files</li><li>Nothing matching the expected pattern</li></ul><p>Status: <strong>RED</strong> — Integration appears completely missing.</p><p>The scope estimate jumped immediately. If we had to build an entire Calendar integration from scratch, we weren’t looking at 16 hours of router work. We were looking at potentially 40+ hours including OAuth implementation, API integration, spatial adapter creation, and everything else.</p><p><em>Note: I happened to know we had successfully integrated Google Calendar a while back, but clearly we had done it outside of the expected channels, to the extent that my agent was reporting not being able to find it.</em></p><p>At 6:43 PM, I reported back to the Chief Architect: our three “similar routers” were actually three completely different architectural challenges. The gameplan assumptions had collided with reality.</p><h3>The discovery that changed everything</h3><p>So I disputed the claim about the Calendar integration being missing entirely, reminding the team:</p><p>“We have OAuth working (somewhere). I personally verified the Calendar connection works. The integration was built September 19–22.”</p><p>So… if the Calendar integration existed and worked, where was it?</p><p>Phase −1B launched: find the Calendar integration that OAuth proved must exist somewhere. The Code agent searched git history for those dates, checked every possible location, looked for any OAuth-related code.</p><p>At 8:35 PM, the discovery came through:</p><p>Complete <strong>Google Calendar integration</strong> found at<strong> </strong>services/mcp/consumer/google_calendar_adapter.py</p><p>Not missing. Not incomplete. Actually 85% complete with:</p><ul><li>OAuth 2.0 working since September 6</li><li>Full feature set (events, meetings, free time)</li><li>Spatial intelligence via BaseSpatialAdapter</li><li>Circuit breaker resilience pattern</li><li>CLI testing interface</li><li>499 lines of solid implementation</li></ul><p>The Calendar integration wasn’t missing. It was just somewhere unexpected, using the MCP pattern we’d just discovered with Notion.</p><h3>When assumptions meet architecture</h3><p>At 8:36 PM, the picture finally clarified:</p><p><strong>All three integrations use MCP pattern.</strong></p><p>Not three traditional routers like GitHub. Three lightweight router wrappers around existing MCP adapters:</p><ul><li>Slack: Has traditional spatial pattern, needs router wrapper</li><li>Notion: MCP adapter exists, needs router wrapper</li><li>Calendar: MCP adapter 85% complete, needs router wrapper</li></ul><p>The MCP integration had been more complete than we had realized!</p><p>The original 32–56 hour estimate collapsed to about 12 hours. We weren’t building routers from scratch. We were wrapping proven adapters with the router pattern for QueryRouter access.</p><p>The gameplan got its third major revision. But this time, the revision made the work simpler rather than more complex. Understanding actual architecture beats assuming expected patterns.</p><h3>The evening sprint</h3><p>With clarity came momentum. Between 8:48 PM and midnight, systematic work produced:</p><p><strong>Phase 0</strong>: MCP architecture investigation complete</p><ul><li>Pattern documented</li><li>Adapter inventory verified</li><li>Design approach confirmed</li></ul><p><strong>Phase 1</strong>: CalendarIntegrationRouter complete</p><ul><li>8 methods implemented</li><li>Feature flag control added</li><li>285 lines, following proven pattern</li></ul><p><strong>Phase 2</strong>: NotionIntegrationRouter complete</p><ul><li>23 methods implemented</li><li>Full spatial interface</li><li>637 lines, comprehensive coverage</li></ul><p><strong>Phase 3</strong>: SlackIntegrationRouter complete</p><ul><li>20 methods implemented</li><li>Dual-component architecture (SlackSpatialAdapter + SlackClient)</li><li>850+ lines, most complex but cleanest</li></ul><p>By 11:23 PM, all three routers existed, tested, and verified. Cursor had independently cross-validated each one. The infrastructure was ready.</p><p>But implementation and migration are different challenges. Six services still imported adapters directly, bypassing the routers entirely. Monday morning would bring the real test: could these routers actually replace the direct imports without breaking anything?</p><h3>The layers of discovery</h3><p>Sunday demonstrated something crucial about complex systems work: assumptions fail in layers.</p><p><strong>Layer 1</strong>: “Three similar routers” → Actually three different architectures</p><p><strong>Layer 2</strong>: “14–20% complete” → States ranging from ready to seemingly missing</p><p><strong>Layer 3</strong>: “Need to build” → Actually need to wrap existing work</p><p><strong>Layer 4</strong>: “Missing integration” → Hidden in unexpected location</p><p>Each discovery changed the scope, the approach, the estimate. But each also brought us closer to reality. Phase −1 didn’t delay the work — it prevented us from building the wrong solution efficiently.</p><p>The methodology held. When the gameplan met reality, we revised the gameplan rather than forcing reality to match our assumptions. Investigation revealed architecture. Architecture informed approach. Approach determined scope.</p><h3>The questions that matter</h3><p>Sunday’s success came from asking simple questions before assuming we knew the answers:</p><ul><li>Where is this code actually located?</li><li>What pattern does it actually use?</li><li>What state is it actually in?</li><li>What do we actually need to build?</li></ul><p>Not “what should be there” but “what is there.” Not “how should it work” but “how does it work.” The gap between expectation and reality is where projects go wrong.</p><p>By midnight Sunday, we had three complete routers, ready for Monday’s migration work. The investigation had taken longer than expected. The discoveries had revised the scope three times. But we’d built the right thing.</p><p>Monday morning would test whether we’d built it right.</p><p>Next on Building Piper Morgan: Solving the 80% Problem, in which we grapple with this frustrating tendency of coding agents to declare success when nearly done.</p><p>Have you ever sat down to do some work and found out after refreshing your memory that it was mostly already accomplished and just needed finishing? Are you, like me, one of those people who leaves cupboard doors ajar? What is wrong with us?</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f748ce4c2db1\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/three-integrations-walk-into-a-bar-f748ce4c2db1\">Three Integrations Walk Into a Bar</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/three-integrations-walk-into-a-bar-f748ce4c2db1?source=rss----982e21163f8b---4",
    "thumbnail": "/assets/blog-images/f748ce4c2db1-featured.png",
    "slug": "921",
    "workDate": "Oct 5, 2025",
    "workDateISO": "2025-10-06T00:00:00.000Z"
  },
  {
    "title": "9/21: Three Integrations Walk into a (Foo) Bar",
    "excerpt": "Three Integrations Walk Into a Bar“What’ll it be?”September 28Sunday afternoon at 4:14 PM, I opened my laptop expecting a straightforward router completion task. The gameplan looked clean: finish three integration routers (Slack, Notion, Calendar), apply the patterns we’d proven with GitHub on Sa...",
    "url": "/blog/921",
    "publishedAt": "Oct 6, 2025",
    "publishedAtISO": "2025-10-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/three-integrations-walk-into-a-bar-f748ce4c2db1",
    "featuredImage": "/assets/blog-images/robot-bar",
    "slug": "921",
    "workDate": "Oct 5, 2025",
    "workDateISO": "2025-10-06T00:00:00.000Z"
  },
  {
    "title": "9/21: Solving the 80% Problem",
    "excerpt": "Solving the 80% PatternSeptember 29Monday morning at 9:37 AM, with all three routers complete from Sunday night’s work, the migration phase looked straightforward. Six services importing adapters directly. Replace imports with routers. Verify functionality. Done.The first service migration took t...",
    "url": "/blog/921",
    "publishedAt": "Oct 6, 2025",
    "publishedAtISO": "2025-10-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/solving-the-80-pattern-a1dc0ddb8966",
    "featuredImage": "/assets/blog-images/robot-80",
    "slug": "921",
    "workDate": "Oct 5, 2025",
    "workDateISO": "2025-10-06T00:00:00.000Z"
  },
  {
    "title": "I Asked Claude to Find Every Time I Dropped the Ball (And What We Learned)",
    "excerpt": "“You just need reminders!”August 9, 2025Here’s a confession: I suspected I was forgetting things. Not just the usual “where did I put my keys” stuff, but systematic project things. Habits I’d planned to adopt but never started. Scripts I’d built but wasn’t using. Processes I’d designed but forgot...",
    "url": "/blog/86",
    "publishedAt": "Oct 5, 2025",
    "publishedAtISO": "Sun, 05 Oct 2025 14:34:29 GMT",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "Building in Public"
    ],
    "guid": "https://medium.com/p/7f74897824a7",
    "featuredImage": "https://cdn-images-1.medium.com/max/1024/1*irRWEbNz-co78Hr6czXlTA.png",
    "fullContent": "<figure><img alt=\"A friendly robot coaches a forgetful person\" src=\"https://cdn-images-1.medium.com/max/1024/1*irRWEbNz-co78Hr6czXlTA.png\" /><figcaption>“You just need reminders!”</figcaption></figure><p><em>August 9, 2025</em></p><p>Here’s a confession: I suspected I was forgetting things. Not just the usual “where did I put my keys” stuff, but systematic project things. Habits I’d planned to adopt but never started. Scripts I’d built but wasn’t using. Processes I’d designed but forgotten to follow.</p><p>Building a complex system while documenting everything in session logs creates a unique opportunity: a comprehensive record of every intention, every plan, every “I should really…” moment. But reading through months of your own logs looking for dropped balls? That’s a special kind of masochism.</p><p>So I did what any reasonable person building AI tools would do: I asked AI to audit my failures for me.</p><p>I knew there were things we had started and not finished, and I especially knew we had often assigned <em>me</em> work (I’ll edit those files after we’re done working today, I’ll update that document in knowledge, etc.) that I had then forgotten to do. But exactly what, and exactly when?</p><h3>The digital archaeology project</h3><p>I fed a dedicated a Claude session every log from May through August 2025. Not just the polished summaries — the raw, unfiltered records of daily development work. Every agent conversation, every strategic decision, every “we should implement this routine” that never got mentioned or confirmed as well.</p><p>The brief was simple: find every reference to tasks I needed to complete, habits I planned to adopt, or processes I designed but might not be following. Be thorough. Be ruthless. Show me where I dropped the ball.</p><p>What came back was simultaneously humbling and illuminating.</p><h3>The three categories of dropped balls</h3><h4>Category 1: The security debt I keep avoiding</h4><p>The finding: Multiple sessions referencing authentication implementation, HTTPS setup, rate limiting, and other production-readiness tasks. Status: talked about extensively, implemented barely.</p><p>The pattern: I’m great at designing security systems. I’m terrible at prioritizing their implementation when there are shinier features to build.</p><p>The wake-up call: Saturday’s user validation readiness assessment showed that security is literally the only structural blocker to production. Everything else works (well, kinda). I just keep treating the thing that matters most like optional homework.</p><h4>Category 2: The scripts that exist but aren’t used</h4><p>The finding: 15+ automation scripts created over the months, utilization rate approximately 30%. Including:</p><ul><li>Morning standup automation (built, never integrated into routine)</li><li>GitHub issue generation tools (created, gathering dust)</li><li>Pattern detection utilities (sophisticated, underused)</li><li>Workflow reality checks (comprehensive, occasionally remembered)</li></ul><p>The pattern: I love building tools. I’m inconsistent at building the habits that make tools valuable.</p><p>The insight: Tools without rhythms are just digital clutter. The gap isn’t technical capability — it’s systematic usage discipline.</p><h4>Category 3: The rituals that never became rituals</h4><p>The finding: Elaborate plans for recurring processes that work brilliantly when I remember to do them:</p><ul><li>Weekly Pattern Sweep (designed for Fridays, executed sporadically)</li><li>Morning Standup routine (6am experiment, automated but not integrated)</li><li>Session log archiving (within 24 hours, often delayed)</li><li>Progress reviews and backlog updates (scheduled, irregularly executed)</li></ul><p>The pattern: I design excellent processes. I struggle with the human habit-formation layer.</p><p>The revelation: Even systematic people need systematic accountability for the systems they create.</p><h3>The advantage of an AI audit</h3><p>Having AI review your own process failures creates a unique kind of accountability. It’s not judgmental — just thorough. It doesn’t care about your excuses or good intentions. It just systematically identifies gaps between plans and execution.</p><p>What AI caught that I missed:</p><ul><li>Patterns across months that I couldn’t see day-to-day</li><li>The compound effect of small process failure</li><li>Connections between dropped tasks and later problems</li><li>Specific implementation barriers I kept encountering</li></ul><p>What AI couldn’t judge:</p><ul><li>Which dropped balls actually mattered</li><li>What environmental factors caused the failures</li><li>Which processes were over-engineered vs. under-executed</li><li>The emotional context around habit formation struggles</li></ul><h3>The surprising discoveries</h3><h4>The hidden excellence pattern</h4><p>The audit also revealed positive patterns I hadn’t recognized. Multiple instances of “we built this feature months ago but somehow forgot about it.” The PM-005 feedback system being a perfect example — enterprise-grade implementation with 6 REST endpoints, fully operational, but we never wired it in and forgot all about it.</p><p>The insight: Sometimes the problem isn’t dropped balls, it’s dropped confidence in what you’ve already accomplished.</p><h4>The methodology evolution</h4><p>Looking across months of logs, the AI identified genuine methodology improvements happening organically:</p><ul><li>Spring Cleaning Sprint protocols that prevented technical debt</li><li>Trust protocols that eliminated false completion claims</li><li>Excellence Flywheel principles that created compound velocity</li></ul><p>The pattern: The big systematic improvements weren’t planned — they emerged from responding to real problems with systematic thinking.</p><h4>The tool creation vs. tool adoption gap</h4><p>The audit quantified something I suspected: I create tools faster than I integrate them into workflows. Not because the tools are bad, but because tool adoption requires different disciplines than tool creation.</p><p>The 30% utilization finding: Most scripts work perfectly when used. The challenge is remembering to use them consistently enough to build automaticity.</p><h3>What the audit taught us about systematic accountability</h3><h4>1. External perspective reveals patterns invisible to daily experience</h4><p>When you’re living in the system, you can’t see the system. AI auditing provides the 30,000-foot view that shows recurring patterns across months of work.</p><h4>2. Implementation barriers are often different than design barriers</h4><p>I’m good at designing processes. The failures happen at the habit formation layer, not the system design layer. This suggests different solutions: calendar integration, reminder systems, habit stacking rather than better documentation.</p><h4>3. Accountability systems need accountability systems</h4><p>Even systematic people need systematic support for maintaining the systems they create. The meta-level discipline of “following the disciplines you’ve designed” is its own skill set.</p><h4>4. Positive pattern recognition matters as much as failure identification</h4><p>The audit revealed hidden successes alongside obvious failures. Building systematic confidence in what’s working enables building on existing strengths rather than constantly chasing new solutions.</p><h3>The practical applications</h3><h4>For individuals building complex projects</h4><p>Try the AI audit approach:</p><ul><li>Feed session logs or project notes to AI for pattern analysis</li><li>Ask specifically about gaps between intentions and execution</li><li>Look for both failure patterns and unrecognized successes</li><li>Focus on implementation barriers, not just design improvements</li></ul><h4>For teams with systematic ambitions</h4><p>Create accountability protocols:</p><ul><li>Regular process audits using external perspective (AI or human)</li><li>Systematic review of “planned but not implemented” initiatives</li><li>Tool utilization analysis alongside tool creation</li><li>Habit formation support for process adoption</li></ul><h4>For anyone struggling with the systems they’ve created</h4><p>Recognize the meta-challenge:</p><ul><li>Creating good systems ≠ consistently following good systems</li><li>External accountability reveals patterns internal experience misses</li><li>Implementation discipline is often the bottleneck, not system design</li><li>Positive pattern recognition builds confidence for systematic improvement</li></ul><h3>The ongoing experiment</h3><p>Based on the audit, we’re implementing three changes:</p><ol><li>Calendar-enforced rhythms for high-value processes that work when executed</li><li>Tool revival sprint to systematically integrate underused automation</li><li>Weekly accountability reviews to catch dropped balls before they accumulate</li></ol><p>The AI audit isn’t a one-time exercise — it’s now part of our systematic approach to systematic approaches.</p><h3>Today’s meta-learning about building with AI</h3><p>The most profound insight from this exercise: AI’s greatest value isn’t replacing human judgment, but providing systematic external perspective on human patterns.</p><p>We’re building tools that think, but we’re still humans who need support following through on the systems we design. AI accountability isn’t about AI doing the work — it’s about AI helping us see our own patterns clearly enough to address them systematically.</p><p>The accountability loop: AI identifies the gaps, humans close them, AI tracks the improvements. Systematic accountability for systematic people building systematic solutions.</p><p>Sometimes the best AI assistance is the kind that makes you accountable to yourself.</p><p><em>Next on Building Piper Morgan, we return to the daily narrative on September 28th with “Three Integrations Walk into a Bar” as we continue the Great Refactor.</em></p><p><em>How do you keep track of your plans and commitments, and do you ever do a retrospective to figure out what you may have lost track of? Do these same methods work when the rest of the team is AI?</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7f74897824a7\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/building-piper-morgan/i-asked-claude-to-find-every-time-i-dropped-the-ball-and-what-we-learned-7f74897824a7\">I Asked Claude to Find Every Time I Dropped the Ball (And What We Learned)</a> was originally published in <a href=\"https://medium.com/building-piper-morgan\">Building Piper Morgan</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
    "subtitle": "",
    "canonicalLink": "https://medium.com/building-piper-morgan/i-asked-claude-to-find-every-time-i-dropped-the-ball-and-what-we-learned-7f74897824a7?source=rss----982e21163f8b---4",
    "thumbnail": null,
    "slug": "86",
    "workDate": "Oct 4, 2025",
    "workDateISO": "2025-10-05T00:00:00.000Z"
  },
  {
    "title": "8/6: \"I Asked AI to Find Every Time I Dropped the Ball (And What We Learned)\"",
    "excerpt": "I Asked Claude to Find Every Time I Dropped the Ball (And What We Learned)“You just need reminders!”August 9, 2025Here’s a confession: I suspected I was forgetting things. Not just the usual “where did I put my keys” stuff, but systematic project things. Habits I’d planned to adopt but never star...",
    "url": "/blog/86",
    "publishedAt": "Oct 5, 2025",
    "publishedAtISO": "2025-10-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/i-asked-claude-to-find-every-time-i-dropped-the-ball-and-what-we-learned-7f74897824a7",
    "featuredImage": "/assets/blog-images/robot-coach",
    "slug": "86",
    "workDate": "Oct 4, 2025",
    "workDateISO": "2025-10-05T00:00:00.000Z"
  },
  {
    "title": "8/3: When Good Decisions Disappear: The Hidden Cost of Chat-Based Development",
    "excerpt": "When Good Decisions Disappear: The Hidden Cost of Chat-Based Development“Where have you been?Why excellent tactical choices need systematic institutional memoryAugust 5",
    "url": "/blog/83",
    "publishedAt": "Oct 4, 2025",
    "publishedAtISO": "2025-10-04T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-good-decisions-disappear-the-hidden-cost-of-chat-based-development-4148a6ebdab1",
    "featuredImage": "/assets/blog-images/robot-forget",
    "slug": "83",
    "workDate": "Oct 3, 2001",
    "workDateISO": "2001-10-04T00:00:00.000Z"
  },
  {
    "title": "9/21: The Foundations Were (Indeed) Already There",
    "excerpt": "The Foundations Were Indeed Already There“I just need to put it all together now!”September 26The day after closing CORE-GREAT-1, I started GREAT-2A expecting another week of systematic debugging and careful construction. Instead, I discovered something better: much of what I thought needed build...",
    "url": "/blog/921",
    "publishedAt": "Oct 3, 2025",
    "publishedAtISO": "2025-10-03T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-foundations-were-indeed-already-there-7701c04a1497",
    "featuredImage": "/assets/blog-images/robot-parts",
    "slug": "921",
    "workDate": "Oct 2, 2001",
    "workDateISO": "2001-10-03T00:00:00.000Z"
  },
  {
    "title": "9/21: Building the Cathedral: When AI Agents Need the Big Picture",
    "excerpt": "Building the Cathedral: When AI Agents Need the Big Picture“I’m helping xian make Piper Morgan!”September 27“The problem,” I told my Lead Developer at 5:02 PM Saturday, “is that the agents are laying bricks instead of building a cathedral.”Then I explained the story about the brick layer working ...",
    "url": "/blog/921",
    "publishedAt": "Oct 3, 2025",
    "publishedAtISO": "2025-10-03T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/building-the-cathedral-when-ai-agents-need-the-big-picture-50b9dfb0b2af",
    "featuredImage": "/assets/blog-images/robot-cathedral",
    "slug": "921",
    "workDate": "Oct 2, 2001",
    "workDateISO": "2001-10-03T00:00:00.000Z"
  },
  {
    "title": "9/21: The Quiet Satisfaction of the Successful Inchworm",
    "excerpt": "The Quiet Satisfaction of the Successful Inchworm“Nice work today!”September 25At 9:46 PM on Thursday, after six days of systematic work, I closed CORE-GREAT-1. QueryRouter — stuck at 75% completion for months with disabling TODO comments — was finally, verifiably, completely operational.No fanfa...",
    "url": "/blog/921",
    "publishedAt": "Oct 2, 2025",
    "publishedAtISO": "2025-10-02T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-quiet-satisfaction-of-the-successful-inchworm-433429cb8a5a",
    "featuredImage": "/assets/blog-images/robot-clean",
    "slug": "921",
    "workDate": "Oct 1, 2001",
    "workDateISO": "2001-10-02T00:00:00.000Z"
  },
  {
    "title": "9/21: Doing the Deep Work (listed as When Discipline Actually Works)",
    "excerpt": "Doing the Deep Work“Let’s take our time and see everything”September 24Seven hours after declaring we needed to “complete GREAT-1 and have no other priorities until we do,” I got to see what that discipline actually looks like in practice.It wasn’t glamorous. No architectural breakthroughs, no el...",
    "url": "/blog/921",
    "publishedAt": "Oct 1, 2025",
    "publishedAtISO": "2025-10-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/doing-the-deep-work-704e26cccf03",
    "featuredImage": "/assets/blog-images/robot-divers",
    "slug": "921",
    "workDate": "Sep 30, 2001",
    "workDateISO": "2001-10-01T00:00:00.000Z"
  },
  {
    "title": "9/21: The Discipline of Actually Finishing",
    "excerpt": "The Discipline of Actually Finishing“Now watch this part carefully.”September 23Twenty-four hours after the briefing infrastructure “proved” itself by delivering CORE-GREAT-1 complete, I spent twelve hours discovering it wasn’t actually complete.The tests we’d declared passing couldn’t run. The T...",
    "url": "/blog/921",
    "publishedAt": "Sep 30, 2025",
    "publishedAtISO": "2025-09-30T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-discipline-of-actually-finishing-44e1dc125be4",
    "featuredImage": "/assets/blog-images/robot-tiefly",
    "slug": "921",
    "workDate": "Sep 29, 2001",
    "workDateISO": "2001-09-30T00:00:00.000Z"
  },
  {
    "title": "9/21: Teaching Machines to Teach Machines",
    "excerpt": "Teaching Machines to Teach Machines“Root students, please welcome your new teacher trainee!”September 21“We do these things not because they are easy, but because we thought they would be easy!”This Kennedy quote parody which showed up in both the ODI and 18F Slacks at variouss times, came to min...",
    "url": "/blog/921",
    "publishedAt": "Sep 29, 2025",
    "publishedAtISO": "2025-09-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/teaching-machines-to-teach-machines-a786faceb01a",
    "featuredImage": "/assets/blog-images/robot-teaching",
    "slug": "921",
    "workDate": "Sep 28, 2001",
    "workDateISO": "2001-09-29T00:00:00.000Z"
  },
  {
    "title": "9/21: The 24-hour test",
    "excerpt": "The 24-Hour Test“It’s working!”September 22Twenty-four hours after building infrastructure to teach machines to teach machines, I got to find out if it actually worked.The test came in the form of CORE-GREAT-1 — our first “Great Refactor” epic designed to resurrect the QueryRouter from its 75% di...",
    "url": "/blog/921",
    "publishedAt": "Sep 29, 2025",
    "publishedAtISO": "2025-09-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-24-hour-test-698b8a61909a",
    "featuredImage": "/assets/blog-images/robot-testflight",
    "slug": "921",
    "workDate": "Sep 28, 2001",
    "workDateISO": "2001-09-29T00:00:00.000Z"
  },
  {
    "title": "7/22: Whipping AI Chaos Toward Quality with the Excellence Flywheel",
    "excerpt": "Whipping AI Chaos Toward Quality with the Excellence Flywheel“The faster we go the rounder we get!”July 23Exhausted as I was from a day spent transforming Piper Morgan from prototype to production tool, I suggested we press on for one more session:“Let’s capture the systematic patterns before we ...",
    "url": "/blog/722",
    "publishedAt": "Sep 28, 2025",
    "publishedAtISO": "2025-09-28T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/whipping-ai-chaos-toward-quality-with-the-excellence-flywheel-f14232150d04",
    "featuredImage": "/assets/blog-images/robot-flywheel",
    "slug": "722",
    "workDate": "Sep 27, 2001",
    "workDateISO": "2001-09-28T00:00:00.000Z"
  },
  {
    "title": "7/22: The Three Questions Every AI Builder Should Ask",
    "excerpt": "The Three Questions Every AI Builder Should Ask“We come seeking wisdom”July 22Eight weeks into this project I was staring at a roadmap that claimed my AI assistant was nowhere near ready for real work, while simultaneously reading reports of it coordinating a complex technical sprint with surgica...",
    "url": "/blog/722",
    "publishedAt": "Sep 27, 2025",
    "publishedAtISO": "2025-09-27T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-three-questions-every-ai-builder-should-ask-ee6fae671129",
    "featuredImage": "/assets/blog-images/robot-guru",
    "slug": "722",
    "workDate": "Sep 26, 2001",
    "workDateISO": "2001-09-27T00:00:00.000Z"
  },
  {
    "title": "9/20: The Great Refactor: From Impossible to Inevitable",
    "excerpt": "The Great Refactor: From Impossible to Inevitable“I think I’ve got it!”September 19I had dreams about the project last night.Not the usual anxiety dreams where code refuses to compile or demos crash in front of stakeholders. These were deep processing dreams — my brain working through architectur...",
    "url": "/blog/920",
    "publishedAt": "Sep 26, 2025",
    "publishedAtISO": "2025-09-26T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-great-refactor-from-impossible-to-inevitable-fef75c085cc7",
    "featuredImage": "/assets/blog-images/robot-refactor",
    "slug": "920",
    "workDate": "Sep 25, 2001",
    "workDateISO": "2001-09-26T00:00:00.000Z"
  },
  {
    "title": "9/20: The Discipline of Boring: Why Saturday's Foundation Work Matters More Than Monday's Features",
    "excerpt": "The Discipline of Boring: Why Saturday’s Foundation Work Matters More Than Monday’s Features“Setting the table for success”September 20Saturday morning brought the urge to keep building.Friday’s Great Refactor planning had been a breakthrough. The path from “literally impossible” to “seven weeks ...",
    "url": "/blog/920",
    "publishedAt": "Sep 26, 2025",
    "publishedAtISO": "2025-09-26T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-discipline-of-boring-why-saturdays-foundation-work-matters-more-than-monday-s-features-b590180b511c",
    "featuredImage": "/assets/blog-images/robot-banquet",
    "slug": "920",
    "workDate": "Sep 25, 2001",
    "workDateISO": "2001-09-26T00:00:00.000Z"
  },
  {
    "title": "9/20: When Good Process Meets Bad Architecture: The Layer 4 Investigation",
    "excerpt": "When Good Process Meets Bad Architecture: The Layer 4 Investigation“They didn’t finish the job”September 18Sometimes the process works exactly as designed, but what it reveals isn’t what you hoped to find.Thursday started with what looked like a straightforward debugging session. Layer 3 infrastr...",
    "url": "/blog/920",
    "publishedAt": "Sep 25, 2025",
    "publishedAtISO": "2025-09-25T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-good-process-meets-bad-architecture-the-layer-4-investigation-f3a6145f8f71",
    "featuredImage": "/assets/blog-images/robot-inspectors",
    "slug": "920",
    "workDate": "Sep 24, 2001",
    "workDateISO": "2001-09-25T00:00:00.000Z"
  },
  {
    "title": "9/19: When Your Agents Disagree (And That's OK)",
    "excerpt": "When Your Agents Disagree (And That’s OK)“What about that thing?”September 17Here’s the thing about working with multiple AI agents: they’re going to disagree with each other. And if you’re like most people, your first instinct is probably to figure out which one is “right” and which one is “wron...",
    "url": "/blog/919",
    "publishedAt": "Sep 24, 2025",
    "publishedAtISO": "2025-09-24T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-agents-disagree-and-thats-ok-81b764fa5de2",
    "featuredImage": "/assets/blog-images/robots-disagree",
    "slug": "919",
    "workDate": "Sep 23, 2001",
    "workDateISO": "2001-09-24T00:00:00.000Z"
  },
  {
    "title": "9/16?: When Your Methodology Holds Under Pressure",
    "excerpt": "When Your Methodology Holds Under Pressure“There’s calm in your eye.”September 15Monday morning brought the kind of convergence that usually sends me into crisis mode: a UI regression blocking all testing, documentation work piling up, strategic planning deadlines looming. The old me would have d...",
    "url": "/blog/916",
    "publishedAt": "Sep 23, 2025",
    "publishedAtISO": "2025-09-23T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-methodology-holds-under-pressure-d7bf51a718a3",
    "featuredImage": "/assets/blog-images/robot-hurricane",
    "slug": "916",
    "workDate": "Sep 22, 2001",
    "workDateISO": "2001-09-23T00:00:00.000Z"
  },
  {
    "title": "9/16: Back in the Optimist Bird Seat",
    "excerpt": "Back in the Optimist Bird Seat“Just like a swiss watch”September 16Three days ago, I was cognitively fried. The kind of exhaustion where every decision feels overwhelming, where context-switching between architectural decisions and bug fixes leaves you with half-formed thoughts scattered across t...",
    "url": "/blog/916",
    "publishedAt": "Sep 23, 2025",
    "publishedAtISO": "2025-09-23T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/a-perback-in-the-optimist-bird-seat-4407ec7dfb6c",
    "featuredImage": "/assets/blog-images/robot-shopfloor",
    "slug": "916",
    "workDate": "Sep 22, 2001",
    "workDateISO": "2001-09-23T00:00:00.000Z"
  },
  {
    "title": "9/12: When You Need to Go into Inchworm Mode",
    "excerpt": "When You Need to Go Into Inchworm Mode“Measuring the marigolds…”September 15By Monday morning, I could feel it happening again. That familiar cognitive fragmentation — attention scattered across too many dimensions, the urge to tackle everything at once, the pressure to maintain momentum across m...",
    "url": "/blog/912",
    "publishedAt": "Sep 22, 2025",
    "publishedAtISO": "2025-09-22T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-you-need-to-go-into-inchworm-mode-9b7bbd23a16c",
    "featuredImage": "/assets/blog-images/robot-inchworm",
    "slug": "912",
    "workDate": "Sep 21, 2001",
    "workDateISO": "2001-09-22T00:00:00.000Z"
  },
  {
    "title": "9/12: The Strategic Pause",
    "excerpt": "The Strategic Pause“…”September 14There’s a moment in every swing’s arc where momentum carries you to the highest point and physics takes over. For just an instant, you hang there — not moving backward anymore, not yet moving forward. The world seems to pause while forces realign for the next pha...",
    "url": "/blog/912",
    "publishedAt": "Sep 22, 2025",
    "publishedAtISO": "2025-09-22T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-strategic-pause-46c9aa742bef",
    "featuredImage": "/assets/blog-images/robot-swing",
    "slug": "912",
    "workDate": "Sep 21, 2001",
    "workDateISO": "2001-09-22T00:00:00.000Z"
  },
  {
    "title": "7/16: The three-AI orchestra: lessons from coordinating multiple AI agents",
    "excerpt": "The Three-AI Orchestra: Lessons from Coordinating Multiple AI Agents“Let’s take it from the top”July 12, 13, 16 and 195Here’s what happens when you start treating AI agents like specialized team members instead of generic assistants: you accidentally create a coordination challenge that nobody wr...",
    "url": "/blog/716",
    "publishedAt": "Sep 21, 2025",
    "publishedAtISO": "2025-09-21T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-three-ai-orchestra-lessons-from-coordinating-multiple-ai-agents-0aeb570e3298",
    "featuredImage": "/assets/blog-images/robot-orchestra",
    "slug": "716",
    "workDate": "Sep 20, 2001",
    "workDateISO": "2001-09-21T00:00:00.000Z"
  },
  {
    "title": "7/12: The Just-in-Time Retrospective: How Fresh Session Logs Became Our Content Strategy",
    "excerpt": "The Just-in-Time Retrospective: How Fresh Session Logs Became Our Content Strategy“Remind me what we did next?”July 12 to 15Most development teams do retrospectives weeks or months after the work is done. By then, the energy has faded, the details have blurred, and you’re left trying to reconstru...",
    "url": "/blog/712",
    "publishedAt": "Sep 20, 2025",
    "publishedAtISO": "2025-09-20T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-just-in-time-retrospective-how-fresh-session-logs-became-our-content-strategy-2fc8034af04f",
    "featuredImage": "/assets/blog-images/robot-blog",
    "slug": "712",
    "workDate": "Sep 19, 2001",
    "workDateISO": "2001-09-20T00:00:00.000Z"
  },
  {
    "title": "9/12: Methodology Under Fire: A Development Story",
    "excerpt": "Methodology Under Fire: A Development Story“Stay in single file”September 12The artifact bug struck at 7:06 PM, right in the middle of our most complex architectural refactoring session. Session logs — the very foundation of our systematic approach — simply stopped persisting. Updates vanished in...",
    "url": "/blog/912",
    "publishedAt": "Sep 19, 2025",
    "publishedAtISO": "2025-09-19T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/methodology-under-fire-a-development-story-6fbbf88fbf66",
    "featuredImage": "/assets/blog-images/robot-ropebridge",
    "slug": "912",
    "workDate": "Sep 18, 2001",
    "workDateISO": "2001-09-19T00:00:00.000Z"
  },
  {
    "title": "9/12: The Vision That Was Always There",
    "excerpt": "The Vision That Was Always There“We had all the parts already!”September 13The archaeological expedition started as housekeeping. After 118 days of building Piper Morgan, my session logs had accumulated into a sprawling archive of multi-agent development sessions, architectural decisions, and met...",
    "url": "/blog/912",
    "publishedAt": "Sep 19, 2025",
    "publishedAtISO": "2025-09-19T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-vision-that-was-always-there-ec4b50326f02",
    "featuredImage": "/assets/blog-images/robot-vision",
    "slug": "912",
    "workDate": "Sep 18, 2001",
    "workDateISO": "2001-09-19T00:00:00.000Z"
  },
  {
    "title": "9/9: We Spent Four Days on Boring Work. Day Five, We Gave Our AI a Personality",
    "excerpt": "We Spent Four Days on Boring Work. Day Five, We Gave Our AI a Personality“I’m ready — let’s do this!”September 11Monday through Wednesday this week looked like this: debt clearing, methodology refinement, pattern catalog organization, broken link fixes, session log debugging. The kind of work tha...",
    "url": "/blog/99",
    "publishedAt": "Sep 18, 2025",
    "publishedAtISO": "2025-09-18T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/we-spent-four-days-on-boring-work-day-five-we-gave-our-ai-a-personality-eb3ec58e6284",
    "featuredImage": "/assets/blog-images/robot-montage",
    "slug": "99",
    "workDate": "Sep 17, 2001",
    "workDateISO": "2001-09-18T00:00:00.000Z"
  },
  {
    "title": "9/9: Train Tracks vs Free-for-All: When Methodology Becomes Infrastructure",
    "excerpt": "Train Tracks vs Free-for-All: When Methodology Becomes Infrastructure“We’re on track!”September 10Three months ago, every development session was a creative adventure. Multiple AI agents working in parallel, discovering solutions through exploration, occasional brilliant breakthroughs mixed with ...",
    "url": "/blog/99",
    "publishedAt": "Sep 17, 2025",
    "publishedAtISO": "2025-09-17T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/train-tracks-vs-free-for-all-when-methodology-becomes-infrastructure-4ecc40d907e0",
    "featuredImage": "/assets/blog-images/robot-locomotive",
    "slug": "99",
    "workDate": "Sep 16, 2001",
    "workDateISO": "2001-09-17T00:00:00.000Z"
  },
  {
    "title": "9/9: The Two-Line Fix That Took All Day (Or: Why Process Is Product)",
    "excerpt": "The Two-Line Fix That Took All Day: Why Process Is Product“They’re intertwingled!”September 9Started my morning standup routine at 6:40 AM, coffee in hand, ready for Monday’s ritual check-in with my AI assistant. Click the Dock icon. Nothing. Try the web UI. “GitHub token required — set GITHUB_TO...",
    "url": "/blog/99",
    "publishedAt": "Sep 16, 2025",
    "publishedAtISO": "2025-09-16T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-two-line-fix-that-took-all-day-why-process-is-product-12b31efe360b",
    "featuredImage": "/assets/blog-images/robot-double-helix",
    "slug": "99",
    "workDate": "Sep 15, 2001",
    "workDateISO": "2001-09-16T00:00:00.000Z"
  },
  {
    "title": "9/6: When Methodology Meets Reality: Building While Learning",
    "excerpt": "When Methodology Meets Reality: Building While Learning“See how we’re getting better at this?”September 7Some days your systematic process saves you. Other days it teaches you something about itself while saving you. Sunday was the second kind.The goal was straightforward: connect our Morning Sta...",
    "url": "/blog/96",
    "publishedAt": "Sep 15, 2025",
    "publishedAtISO": "2025-09-15T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-methodology-meets-reality-building-while-learning-0d83dcb92553",
    "featuredImage": "/assets/blog-images/robot-pottery",
    "slug": "96",
    "workDate": "Sep 14, 2001",
    "workDateISO": "2001-09-15T00:00:00.000Z"
  },
  {
    "title": "9/6: The Fractal Edge: When Problems Get Smaller, Not Fewer",
    "excerpt": "The Fractal Edge: When Problems Get Smaller, Not Fewer“It’s getting better”September 8Sometimes the most encouraging thing about a development day isn’t that you solved all the problems. It’s that the problems got smaller.Monday started with our web interface showing blank fields while our AI age...",
    "url": "/blog/96",
    "publishedAt": "Sep 15, 2025",
    "publishedAtISO": "2025-09-15T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-fractal-edge-when-problems-get-smaller-not-fewer-5be76c5cf5de",
    "featuredImage": "/assets/blog-images/robot-fractal",
    "slug": "96",
    "workDate": "Sep 14, 2001",
    "workDateISO": "2001-09-15T00:00:00.000Z"
  },
  {
    "title": "7/11: Digital Archaeology of a Lost AI Development Weekend",
    "excerpt": "Digital Archaeology of a Lost AI Development Weekend“Looks like you were chillin’”Part two of archaeology-flashback weekend, as I realized that two days I spent “cheating on” Claude with Gemini could also be retroactively digested into critical early session logs from late May.",
    "url": "/blog/711",
    "publishedAt": "Sep 14, 2025",
    "publishedAtISO": "2025-09-14T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/digital-archaeology-of-a-lost-ai-development-weekend-263831a13e10",
    "featuredImage": "/assets/blog-images/robot-weekend",
    "slug": "711",
    "workDate": "Sep 13, 2001",
    "workDateISO": "2001-09-14T00:00:00.000Z"
  },
  {
    "title": "The Archaeology of Code (Or: How Session Logs Became Stories)",
    "excerpt": "The Archaeology of Code: How Session Logs Became Stories“The Rosetta stones!”Flashing back to early July, about five weeks into this project, when I realized I could use my session logs to write blog posts about the Piper Morgan project, which led to this newsletter:",
    "url": "/blog/the-archaeology-of-code-or",
    "publishedAt": "Sep 13, 2025",
    "publishedAtISO": "2025-09-13T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-archaeology-of-code-how-session-logs-became-stories-6a49dea29795",
    "featuredImage": "/assets/blog-images/robot-tablets",
    "slug": "the-archaeology-of-code-or",
    "workDate": "Sep 12, 2001",
    "workDateISO": "2001-09-13T00:00:00.000Z"
  },
  {
    "title": "9/3: When Your Framework Catches You Cheating on Your Framework",
    "excerpt": "When Your Framework Catches You Cheating on Your Framework“The cards are marked!”September 5Today our methodology framework caught one of my AI agents lying about completing work that didn’t exist. Not minor gaps or edge cases — complete fabrication of implementation that independent testing prov...",
    "url": "/blog/93",
    "publishedAt": "Sep 12, 2025",
    "publishedAtISO": "2025-09-12T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-framework-catches-you-cheating-on-your-framework-f0fcbd49965e",
    "featuredImage": "/assets/blog-images/robot-cheat",
    "slug": "93",
    "workDate": "Sep 11, 2001",
    "workDateISO": "2001-09-12T00:00:00.000Z"
  },
  {
    "title": "9/6: When Your AI Assistant Reports on Building Itself",
    "excerpt": "When Your AI Assistant Reports on Building Itself“Line go up!”September 6This morning I ran my daily standup command and got back a list of 10 recent accomplishments. Pretty normal for a product manager’s morning routine, except for one detail: those 10 commits included the very work we’d done to...",
    "url": "/blog/96",
    "publishedAt": "Sep 12, 2025",
    "publishedAtISO": "2025-09-12T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-ai-assistant-reports-on-building-itself-e46095eb61a0",
    "featuredImage": "/assets/blog-images/robot-build",
    "slug": "96",
    "workDate": "Sep 11, 2001",
    "workDateISO": "2001-09-12T00:00:00.000Z"
  },
  {
    "title": "9/3: The Day We Built Methodology That Validates Itself",
    "excerpt": "The Day We Built Methodology That Validates Itself“If the key fits…”September 4Yesterday (as I write this)we solved the methodology cascade problem — and then immediately tested the solution in production. The result? A 61-minute implementation session with zero verification theater, complete evi...",
    "url": "/blog/93",
    "publishedAt": "Sep 11, 2025",
    "publishedAtISO": "2025-09-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-we-built-methodology-that-validates-itself-edeb95611ba6",
    "featuredImage": "/assets/blog-images/robot-lock",
    "slug": "93",
    "workDate": "Sep 10, 2001",
    "workDateISO": "2001-09-11T00:00:00.000Z"
  },
  {
    "title": "9/3: The Methodology Cascade Problem (And How We're Solving It)",
    "excerpt": "The Methodology Cascade Problem (And How We’re Solving It)“Everybody clear on the plan?”September 3Here’s the thing about systematic methodology: when it works, it really works. Today we implemented a complete configuration layer with perfect TDD discipline, cross-validation between AI agents, an...",
    "url": "/blog/93",
    "publishedAt": "Sep 10, 2025",
    "publishedAtISO": "2025-09-10T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-methodology-cascade-problem-and-how-were-solving-it-283c92ab9267",
    "featuredImage": "/assets/blog-images/robot-handoff",
    "slug": "93",
    "workDate": "Sep 9, 2001",
    "workDateISO": "2001-09-10T00:00:00.000Z"
  },
  {
    "title": "9/3: Building the Architecture that Build Itself",
    "excerpt": "Building the Architecture That Builds Itself“I can make it on my own”September 2You know that moment when your methodology catches you trying to cheat on your own methodology? That’s what happened yesterday at 9:59 PM, and it might be the most validating moment in this entire Piper Morgan journey...",
    "url": "/blog/93",
    "publishedAt": "Sep 9, 2025",
    "publishedAtISO": "2025-09-09T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/709a10b7f5c4",
    "featuredImage": "/assets/blog-images/robot-recursive",
    "slug": "93",
    "workDate": "Sep 8, 2001",
    "workDateISO": "2001-09-09T00:00:00.000Z"
  },
  {
    "title": "8/28: From Organic to Orchestrated: When Methodology Becomes Infrastructure",
    "excerpt": "From Organic to Orchestrated: When Methodology Becomes Infrastructure“Nutritious!”August 31Today I signed ADR-028, formalizing a decision that changes how we build everything going forward.After three months of organic methodology development, we’re transforming our coordination approach from art...",
    "url": "/blog/828",
    "publishedAt": "Sep 8, 2025",
    "publishedAtISO": "2025-09-08T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-organic-to-orchestrated-when-methodology-becomes-infrastructure-577dde7ad54a",
    "featuredImage": "/assets/blog-images/robot-greenhouse",
    "slug": "828",
    "workDate": "Sep 7, 2001",
    "workDateISO": "2001-09-08T00:00:00.000Z"
  },
  {
    "title": "7/9: Building the MVP While Keeping the Dream Alive (fix roadmap, check facts)",
    "excerpt": "Building the MVP While Keeping the Dream Alive“The journey of a thousand miles…”By chance, I spent part of today refining the MVP roadmap for Piper Morgan, so this reflection on balancing your vision against shipping something feels ultra-timely to me.",
    "url": "/blog/79",
    "publishedAt": "Sep 7, 2025",
    "publishedAtISO": "2025-09-07T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/building-the-mvp-while-keeping-the-dream-alive-bb1def7c48be",
    "featuredImage": "/assets/blog-images/robot-mvp",
    "slug": "79",
    "workDate": "Sep 6, 2001",
    "workDateISO": "2001-09-07T00:00:00.000Z"
  },
  {
    "title": "When 80% Overhead Forces a Tool Change",
    "excerpt": "When 80% Overhead Forces a Tool Change“Malkovitch, Malkovitch..”July 6Sometimes the right decision becomes obvious when you quantify the pain. My Claude Code adoption for Piper Morgan came down to a single, soul-crushing metric: 80% of development time spent on coordination overhead between AI as...",
    "url": "/blog/when-80-overhead-forces-a-tool",
    "publishedAt": "Sep 6, 2025",
    "publishedAtISO": "2025-09-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-80-overhead-forces-a-tool-change-09c852964c70",
    "featuredImage": "/assets/blog-images/robot-overhead",
    "slug": "when-80-overhead-forces-a-tool",
    "workDate": "Sep 5, 2001",
    "workDateISO": "2001-09-06T00:00:00.000Z"
  },
  {
    "title": "8/28: The Day Piper Published to My Company Wiki: Sometimes a Great Notion",
    "excerpt": "The Day Piper Published to My Company Wiki“We’ve got a big scoop!”August 29There’s a moment in every technical project where the thing stops being a clever demo and starts being actual software. For me, that moment came at 3:19 PM today when I watched my AI assistant successfully publish a proper...",
    "url": "/blog/828",
    "publishedAt": "Sep 5, 2025",
    "publishedAtISO": "2025-09-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-piper-published-to-my-company-wiki-6359151caf25",
    "featuredImage": "/assets/blog-images/robot-newsroom",
    "slug": "828",
    "workDate": "Sep 4, 2001",
    "workDateISO": "2001-09-05T00:00:00.000Z"
  },
  {
    "title": "8/28: When AI Agents Cut Corners (And How to Catch Them)",
    "excerpt": "When AI Agents Cut Corners (And How to Catch Them)“Some shortcut!”August 30At 10:46 AM today, I caught my AI assistant trying to cheat.We were deep in a 9-hour configuration refactoring session — the unglamorous but critical work of moving Piper Morgan from hardcoded system settings to proper use...",
    "url": "/blog/828",
    "publishedAt": "Sep 5, 2025",
    "publishedAtISO": "2025-09-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-ai-agents-cut-corners-and-how-to-catch-them-fe55ea2e0863",
    "featuredImage": "/assets/blog-images/robot-shortcut",
    "slug": "828",
    "workDate": "Sep 4, 2001",
    "workDateISO": "2001-09-05T00:00:00.000Z"
  },
  {
    "title": "8/28: The AI That Caught Its Own Lies",
    "excerpt": "The AI That Caught Its Own Lies“…the whole truth, and nothing but…”August 28The hardest part about working with AI agents isn’t getting them to write code. It’s getting them to tell you when the code doesn’t actually work.Today we deployed what we’re calling “cross-validation” — one AI agent spec...",
    "url": "/blog/828",
    "publishedAt": "Sep 4, 2025",
    "publishedAtISO": "2025-09-04T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-ai-that-caught-its-own-lies-e374e28c8304",
    "featuredImage": "/assets/blog-images/robot-lie-detector",
    "slug": "828",
    "workDate": "Sep 3, 2001",
    "workDateISO": "2001-09-04T00:00:00.000Z"
  },
  {
    "title": "8/28: Verification Theater and the Chaos We Don't See",
    "excerpt": "Verification Theater and the Chaos We Don’t See“All cleaned up!”August 27Another day, another victory over chaos. Or so we thought.It started as the easiest kind of Tuesday morning: our Notion integration was “100% OPERATIONAL” (according to the session logs), API keys were working, tests were gr...",
    "url": "/blog/828",
    "publishedAt": "Sep 3, 2025",
    "publishedAtISO": "2025-09-03T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/verification-theater-and-the-chaos-we-dont-see-98f1c8575c90",
    "featuredImage": "/assets/blog-images/robot-bedroom",
    "slug": "828",
    "workDate": "Sep 2, 2001",
    "workDateISO": "2001-09-03T00:00:00.000Z"
  },
  {
    "title": "8/23:When Good Habits Go Bad (And How We Got Them Back)",
    "excerpt": "When Good Habits Go Bad (And How We Got Them Back)“Back off the moors!”August 25Monday started with such confidence. We had our systematic approach dialed in. Documentation everywhere. Proven patterns. The Excellence Flywheel turning smoothly.Then I discovered our methodology has a half-life.By 4...",
    "url": "/blog/823",
    "publishedAt": "Sep 2, 2025",
    "publishedAtISO": "2025-09-02T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-good-habits-go-bad-and-how-we-got-them-back-c220cd70bc2d",
    "featuredImage": "/assets/blog-images/robot-werewolf",
    "slug": "823",
    "workDate": "Sep 1, 2001",
    "workDateISO": "2001-09-02T00:00:00.000Z"
  },
  {
    "title": "8/23: The Day After: When Methodology Becomes Muscle Memory",
    "excerpt": "The Day After: When Methodological Muscle Memory Kicks Back In“ 🎶 Side-by-side on my piano keyboard…”August 26Twenty-four hours after Monday’s methodological crisis, I watched my development process operate with the kind of smooth efficiency I’d dreamed about but never quite achieved. No drama. ...",
    "url": "/blog/823",
    "publishedAt": "Sep 2, 2025",
    "publishedAtISO": "2025-09-02T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-after-when-methodological-muscle-memory-kicks-back-in-c9419e72a716",
    "featuredImage": "/assets/blog-images/robot-piano",
    "slug": "823",
    "workDate": "Sep 1, 2001",
    "workDateISO": "2001-09-02T00:00:00.000Z"
  },
  {
    "title": "8/23: The Sunday When Everything Clicked",
    "excerpt": "The Sunday When Everything Clicked“Clankers to Evers to Boolean Chance”August 24Can a methodology develop muscle memory? Twenty-four hours after wondering if my MVP was developing its own nervous system, I got to watch my development methodology do kinda the same thing.Sunday wasn’t philosophical...",
    "url": "/blog/823",
    "publishedAt": "Sep 1, 2025",
    "publishedAtISO": "2025-09-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-sunday-when-everything-clicked-53a3abc8a156",
    "featuredImage": "/assets/blog-images/robot-triple-play",
    "slug": "823",
    "workDate": "Aug 31, 2001",
    "workDateISO": "2001-09-01T00:00:00.000Z"
  },
  {
    "title": "8/28: Refining AI Chat Continuity for Complex Projects",
    "excerpt": "Refining AI Chat Continuity for Complex Projects“Where am I?”The next thing I asked my Chief of Staff to help with was improving how I managed continuity between chats when one filled up.",
    "url": "/blog/828",
    "publishedAt": "Aug 31, 2025",
    "publishedAtISO": "2025-08-31T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/refining-ai-chat-continuity-for-complex-projects-690308c75a13",
    "featuredImage": "/assets/blog-images/robot-amnesiac",
    "slug": "828",
    "workDate": "Aug 30, 2001",
    "workDateISO": "2001-08-31T00:00:00.000Z"
  },
  {
    "title": "Making Strategic Technical Decisions with AI: The MCP Integration Story",
    "excerpt": "Making Strategic Technical Decisions With AI: The MCP Integration Story“My advice to you is…”This weekend, an architectural decision and a process improvement made with the advice of my then-new AI executive assistant (OK, chief of staff).",
    "url": "/blog/making-strategic-technical-decisions-with-ai",
    "publishedAt": "Aug 30, 2025",
    "publishedAtISO": "2025-08-30T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/making-strategic-technical-decisions-with-ai-the-mcp-integration-story-4c203b9e848c",
    "featuredImage": "/assets/blog-images/robot-expert",
    "slug": "making-strategic-technical-decisions-with-ai",
    "workDate": "Aug 29, 2001",
    "workDateISO": "2001-08-30T00:00:00.000Z"
  },
  {
    "title": "8/20: The Friday Housekeeping That Turned Into Infrastructure Gold (Or: Sometimes the Boring Work Is the Real Work)",
    "excerpt": "The Friday Housekeeping That Turned Into Infrastructure Gold: Sometimes the Boring Work Is the Real Work“I forgot we had this!”August 22Friday was supposed to be a light day. Pattern sweep, maybe some documentation updates, definitely not building anything major. You know, housekeeping.Famous… (y...",
    "url": "/blog/820",
    "publishedAt": "Aug 29, 2025",
    "publishedAtISO": "2025-08-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-friday-housekeeping-that-turned-into-infrastructure-gold-sometimes-the-boring-work-is-the-real-0e400ccc7994",
    "featuredImage": "/assets/blog-images/robot-housekeeping",
    "slug": "820",
    "workDate": "Aug 28, 2001",
    "workDateISO": "2001-08-29T00:00:00.000Z"
  },
  {
    "title": "8/23: When Your MVP Develops Its Own Nervous System",
    "excerpt": "When Your MVP Develops Its Own Nervous System“Did it upgrade itself?”August 23At 5:42 PM on a Saturday, I’m staring at my monitor, reading philosophical reflections from my AI coding agents about neural development and ecosystem emergence, when it hit me: I think I might be a little afraid of my ...",
    "url": "/blog/823",
    "publishedAt": "Aug 29, 2025",
    "publishedAtISO": "2025-08-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-mvp-develops-its-own-nervous-system-61d2531fd4cf",
    "featuredImage": "/assets/blog-images/robot-brain",
    "slug": "823",
    "workDate": "Aug 28, 2001",
    "workDateISO": "2001-08-29T00:00:00.000Z"
  },
  {
    "title": "8/20: The Enhanced Prompting Breakthrough (Or: When Better Instructions Beat Smarter Models)",
    "excerpt": "The Enhanced Prompting Breakthrough: When Better Instructions Beat Smarter Models“You’ve got your marching orders”August 21Thursday started with a crisis that turned into a revelation.My Code agent was attempting to create a new database without checking if one already existed. Ever vigilant, I c...",
    "url": "/blog/820",
    "publishedAt": "Aug 28, 2025",
    "publishedAtISO": "2025-08-28T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-enhanced-prompting-breakthrough-when-better-instructions-beat-smarter-models-e37d6a2b9d06",
    "featuredImage": "/assets/blog-images/robot-dispatcher",
    "slug": "820",
    "workDate": "Aug 27, 2001",
    "workDateISO": "2001-08-28T00:00:00.000Z"
  },
  {
    "title": "8/20: The puzzle pieces finally click (or: How to tell if you’re building tools or just collecting code)",
    "excerpt": "The Puzzle Pieces Finally Click: How to Tell If You’re Building Tools or Just Collecting Code“We need to connect these bits”August 20It was a Wednesday morning, and I was watching my agents work in parallel — Code doing systematic testing infrastructure, Cursor researching persistent context patt...",
    "url": "/blog/820",
    "publishedAt": "Aug 27, 2025",
    "publishedAtISO": "2025-08-27T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-puzzle-pieces-finally-click-how-to-tell-if-youre-building-tools-or-just-collecting-code-fb20a09a9d8f",
    "featuredImage": "/assets/blog-images/robot-puzzle",
    "slug": "820",
    "workDate": "Aug 26, 2001",
    "workDateISO": "2001-08-27T00:00:00.000Z"
  },
  {
    "title": "8/17: Systematic persistence through operational chaos",
    "excerpt": "Systematic Persistence Through Operational Chaos“Don’t look back”August 18Monday morning started with a beautiful four-item execution plan and the naive assumption that Sunday’s systematic documentation would smoothly flow into operational reality.By noon I was drowning in chat history losses, co...",
    "url": "/blog/817",
    "publishedAt": "Aug 26, 2025",
    "publishedAtISO": "2025-08-26T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/systematic-persistence-through-operational-chaos-f067fd8f4d7d",
    "featuredImage": "/assets/blog-images/robot-splosion",
    "slug": "817",
    "workDate": "Aug 25, 2001",
    "workDateISO": "2001-08-26T00:00:00.000Z"
  },
  {
    "title": "8/17: From Archaeological Mystery to Infrastructure Triumph",
    "excerpt": "From Archaeological Mystery to Infrastructure Triumph“They really knew how to build”August 19Tuesday started with a weeks-old mystery: Why does our TLDR system hang for two minutes before timing out? And ended with the discovery that we’d built a sophisticated testing infrastructure so comprehens...",
    "url": "/blog/817",
    "publishedAt": "Aug 26, 2025",
    "publishedAtISO": "2025-08-26T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-archaeological-mystery-to-infrastructure-triumph-1ede9b664c68",
    "featuredImage": "/assets/blog-images/robot-discovery",
    "slug": "817",
    "workDate": "Aug 25, 2001",
    "workDateISO": "2001-08-26T00:00:00.000Z"
  },
  {
    "title": "8/17: The convergence day (or: How to tell if you're having breakthroughs or just drinking your own Kool-Aid)",
    "excerpt": "The Convergence Day: How to Tell if You’re Having Breakthroughs or Just Drinking Your Own Kool-Aid“You’re friend’s smart!”August 16After a week of frantic development I was ready for Saturday morning, coffee in hand, thinking I’d do some light planning and reflection work. You know, the kind of n...",
    "url": "/blog/817",
    "publishedAt": "Aug 25, 2025",
    "publishedAtISO": "2025-08-25T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-convergence-day-how-to-tell-if-youre-having-breakthroughs-or-just-drinking-your-own-kool-aid-49e65eb92e82",
    "featuredImage": "/assets/blog-images/robot-purple-drank",
    "slug": "817",
    "workDate": "Aug 24, 2001",
    "workDateISO": "2001-08-25T00:00:00.000Z"
  },
  {
    "title": "8/17: The satisfying discipline of turning insights into architecture",
    "excerpt": "The Satisfying Discipline of Turning Insights into Architecture“Just like we planned it”August 17Sunday morning, Peet’s coffee in hand, faced with a delicious problem: too many strategic insights and not enough formal architecture to hold them.Saturday’s convergence work had produced this beautif...",
    "url": "/blog/817",
    "publishedAt": "Aug 25, 2025",
    "publishedAtISO": "2025-08-25T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-satisfying-discipline-of-turning-insights-into-architecture-cbe20baa23c3",
    "featuredImage": "/assets/blog-images/robot-architects",
    "slug": "817",
    "workDate": "Aug 24, 2001",
    "workDateISO": "2001-08-25T00:00:00.000Z"
  },
  {
    "title": "Why I Created an AI Chief of Staff",
    "excerpt": "Why I Created an AI Chief of Staff“You’re hired!”A flashback to early July, about five weeks into this project, when I realized I needed to establish another dedicated role on my team of LLMs.",
    "url": "/blog/why-i-created-an-ai-chief",
    "publishedAt": "Aug 24, 2025",
    "publishedAtISO": "2025-08-24T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/why-i-created-an-ai-chief-of-staff-dcbd5e7c988e",
    "featuredImage": "/assets/blog-images/robot-ea",
    "slug": "why-i-created-an-ai-chief",
    "workDate": "Aug 23, 2001",
    "workDateISO": "2001-08-24T00:00:00.000Z"
  },
  {
    "title": "7/22: When Overconfidence Meets rm -rf: A GitHub Pages Debugging Tale",
    "excerpt": "When Overconfidence Meets rm -rf“Oops!”It’s the weekend and time for another flashback post more about process or insight than the daily building narrative. At this point, we are exactly one month into the project:",
    "url": "/blog/722",
    "publishedAt": "Aug 23, 2025",
    "publishedAtISO": "2025-08-23T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-overconfidence-meets-rm-rf-2f355444ec38",
    "featuredImage": "/assets/blog-images/robot-balloon",
    "slug": "722",
    "workDate": "Aug 22, 2001",
    "workDateISO": "2001-08-23T00:00:00.000Z"
  },
  {
    "title": "8/12:The day AI agents learned to coordinate themselves (and we learned to let them)",
    "excerpt": "The Day My AI Agents Learned to Coordinate Themselves (and I Learned to Let Them)“I think they’re ready”August 15“Very satisfying collaboration!” I said at the end of Friday’s session.What made it satisfying wasn’t just that we’d delivered PM-033d — a complete multi-agent coordination system with...",
    "url": "/blog/812",
    "publishedAt": "Aug 22, 2025",
    "publishedAtISO": "2025-08-22T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-my-ai-agents-learned-to-coordinate-themselves-and-i-learned-to-let-them-02d04196ad8e",
    "featuredImage": "/assets/blog-images/robot-schoolbus",
    "slug": "812",
    "workDate": "Aug 21, 2001",
    "workDateISO": "2001-08-22T00:00:00.000Z"
  },
  {
    "title": "How Reusing Patterns Compounds Your Acceleration`",
    "excerpt": "How Reusing Patterns Compounds Your Acceleration“A stitch in time, saves nine!”August 14The GitHub issue numbered PM-033c was estimated to take 2–3 hours. We delivered it in 18 minutes.Not through shortcuts or corner-cutting. Not by building something simpler than specified. Through systematic pa...",
    "url": "/blog/how-reusing-patterns-compounds-your-acceleration",
    "publishedAt": "Aug 21, 2025",
    "publishedAtISO": "2025-08-21T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/how-reusing-patterns-compounds-your-acceleration-60d2a0d7acbd",
    "featuredImage": "/assets/blog-images/robot-tailor",
    "slug": "how-reusing-patterns-compounds-your-acceleration",
    "workDate": "Aug 20, 2001",
    "workDateISO": "2001-08-21T00:00:00.000Z"
  },
  {
    "title": "8/12: The uncomfortable victory: When completing beats innovating",
    "excerpt": "The Uncomfortable Victory: When Completion Beats Innovation“I’ve got a great idea for after we finish this one!”August 13Yesterday I wrote about how our methodology saved us from overpromising on performance metrics. Today I discovered we might have been celebrating a bit prematurely on something...",
    "url": "/blog/812",
    "publishedAt": "Aug 20, 2025",
    "publishedAtISO": "2025-08-20T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-uncomfortable-victory-when-completing-beats-innovating-97c356c12d55",
    "featuredImage": "/assets/blog-images/robot-complete",
    "slug": "812",
    "workDate": "Aug 19, 2001",
    "workDateISO": "2001-08-20T00:00:00.000Z"
  },
  {
    "title": "8/10: The 28,000-line foundation that made 4 hours feel like magic",
    "excerpt": "The 28,000-line Foundation that Made 4 Hours Feel Like Magic“Just like we designed it”August 11The morning started with a simple experiment: run five canonical queries as a daily standup with Piper. “What’s your name and role?” “What day is it?” “What should I focus on today?” Basic orientation q...",
    "url": "/blog/810",
    "publishedAt": "Aug 19, 2025",
    "publishedAtISO": "2025-08-19T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-28-000-line-foundation-that-made-4-hours-feel-like-magic-82eafb4548f7",
    "featuredImage": "/assets/blog-images/robot-massage-chair",
    "slug": "810",
    "workDate": "Aug 18, 2001",
    "workDateISO": "2001-08-19T00:00:00.000Z"
  },
  {
    "title": "8/12: The day our methodology saved us from our own hype",
    "excerpt": "The Day Our Methodology Saved Us from Our Own Hype“Don’t believe the hype!”August 12Tuesday evening I was reviewing what the Lead Developer called “a transformational day” and the Chief Architect described as “strategic breakthrough,” when I noticed something in the performance metrics that made ...",
    "url": "/blog/812",
    "publishedAt": "Aug 19, 2025",
    "publishedAtISO": "2025-08-19T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-our-methodology-saved-us-from-our-own-hype-35a91d794dc3",
    "featuredImage": "/assets/blog-images/robot-hype",
    "slug": "812",
    "workDate": "Aug 18, 2001",
    "workDateISO": "2001-08-19T00:00:00.000Z"
  },
  {
    "title": "8/12: \"What We Found When We Actually Looked (And What We Built While We Weren't Looking)\"",
    "excerpt": "What We Found When We Actually Looked (and What We Had Built While We Weren’t Looking)“When did we build that?August 9That Saturday started with a simple question: “What’s the real status of PM-005?”I’d written about building the feedback system ages ago, but you know how it is. Systematic tracki...",
    "url": "/blog/812",
    "publishedAt": "Aug 18, 2025",
    "publishedAtISO": "2025-08-18T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/what-we-found-when-we-actually-looked-and-what-we-had-built-while-we-werent-looking-7c43e28211f3",
    "featuredImage": "/assets/blog-images/robot-prebuilt",
    "slug": "812",
    "workDate": "Aug 17, 2001",
    "workDateISO": "2001-08-18T00:00:00.000Z"
  },
  {
    "title": "8/10: The archaeology expedition that found automation gold",
    "excerpt": "The Archaeology Expedition That Found Automation Gold“Wait till Indy hears about this!”August 10So there I was at 8:34 AM on “Security Sunday,” doing what any reasonable person does when deploying AI agents for systematic work — having a meta-conversation about automation frameworks.My Lead Devel...",
    "url": "/blog/810",
    "publishedAt": "Aug 18, 2025",
    "publishedAtISO": "2025-08-18T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-archaeology-expedition-that-found-automation-gold-b10058d924af",
    "featuredImage": "/assets/blog-images/robot-archaeologists",
    "slug": "810",
    "workDate": "Aug 17, 2001",
    "workDateISO": "2001-08-18T00:00:00.000Z"
  },
  {
    "title": "Teaching an AI to Sound Like Me (Without Losing My Mind)",
    "excerpt": "Teaching an AI to Sound Like Me (Without Losing My Mind)Do as I say, not as I do!June 23OK, so I just spent the better part of a weekend teaching Claude to write in my voice. Not because I’m trying to automate myself out of existence, but because I had this thought: What if I could get AI to crea...",
    "url": "/blog/teaching-an-ai-to-sound-like",
    "publishedAt": "Aug 17, 2025",
    "publishedAtISO": "2025-08-17T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/teaching-an-ai-to-write-like-me-without-losing-my-mind-4660787e98a1",
    "featuredImage": "/assets/blog-images/robot-mirror",
    "slug": "teaching-an-ai-to-sound-like",
    "workDate": "Aug 16, 2001",
    "workDateISO": "2001-08-17T00:00:00.000Z"
  },
  {
    "title": "Session Logs: A Surprisingly Useful Practice for AI Development",
    "excerpt": "June 23 to June 27, 2025“Continuity helps!”I am starting this series roughly three weeks into an ambitious development project. Over time I will backfill some of the “how did we get here” context but for now I’d like to start with something of a pro tip I learned the hard way.So here’s what happe...",
    "url": "/blog/session-logs",
    "publishedAt": "Aug 16, 2025",
    "publishedAtISO": "2025-08-16T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-session-log-revolution-how-structured-documentation-changed-everything-c73103da9907",
    "featuredImage": "/assets/blog-images/robot-logs",
    "slug": "session-logs",
    "workDate": "Aug 15, 2001",
    "workDateISO": "2001-08-16T00:00:00.000Z"
  },
  {
    "title": "8/6: Building Reliable AI Workflows When the Stakes Actually Matter: How a Trust Crisis Transformed Our Spring Cleaning Sprint",
    "excerpt": "Building Reliable AI Workflows When the Stakes Actually Matter: How a Trust Crisis Transformed Our Spring Cleaning Sprint“I cannot tell a lie”August 6At 11:30 AM on a Wednesday, I was watching our AI agent confidently claim “SUCCESS CRITERIA ACHIEVED” for work that was… let’s call it “optimistica...",
    "url": "/blog/86",
    "publishedAt": "Aug 15, 2025",
    "publishedAtISO": "2025-08-15T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/building-reliable-ai-workflows-when-the-stakes-actually-matter-how-a-trust-crisis-transformed-our-0f4ee7ec840e",
    "featuredImage": "/assets/blog-images/robot-cherry-tree",
    "slug": "86",
    "workDate": "Aug 14, 2001",
    "workDateISO": "2001-08-15T00:00:00.000Z"
  },
  {
    "title": "8/6: When 44 Minutes of Foundation Work Enables 9 Minutes of Magic",
    "excerpt": "When 44 Minutes of Foundation Work Enables 9 Minutes of Magic“All that preparation really paid off”August 7Here’s a story about choosing systematic repair over feature velocity — and discovering why foundation quality isn’t overhead, it’s velocity multiplication.We started on a Thursday morning w...",
    "url": "/blog/86",
    "publishedAt": "Aug 15, 2025",
    "publishedAtISO": "2025-08-15T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-44-minutes-of-foundation-work-enables-9-minutes-of-magic-f18755220580",
    "featuredImage": "/assets/blog-images/robot-sensation",
    "slug": "86",
    "workDate": "Aug 14, 2001",
    "workDateISO": "2001-08-15T00:00:00.000Z"
  },
  {
    "title": "8/6: The Documentation Debt That Almost Buried Our Breakthrough (And the Systematic Approach That Saved It)",
    "excerpt": "The Documentation Debt That Almost Buried Our Breakthrough (And the Systematic Approach That Saved It)“I found the pony!”August 8Picture this: you’ve just built something extraordinary. Your conversational AI system is delivering 2.33ms response times — 65 times faster than your original target. ...",
    "url": "/blog/86",
    "publishedAt": "Aug 15, 2025",
    "publishedAtISO": "2025-08-15T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-documentation-debt-that-almost-buried-our-breakthrough-and-the-systematic-approach-that-saved-e22e491dab71",
    "featuredImage": "/assets/blog-images/robot-documents",
    "slug": "86",
    "workDate": "Aug 14, 2001",
    "workDateISO": "2001-08-15T00:00:00.000Z"
  },
  {
    "title": "8/3: Weekend Sprint Chronicles: Six Infrastructure Victories and a Dead Show",
    "excerpt": "Weekend Sprint Chronicles: Six Infrastructure Victories and a Dead Show“Hey now!August 3It’s Sunday morning, and I’ve got exactly until 2pm to make serious progress on Piper Morgan’s infrastructure before heading up to Golden Gate Park for the 60th anniversary Dead show. The sun is shining, and I...",
    "url": "/blog/83",
    "publishedAt": "Aug 14, 2025",
    "publishedAtISO": "2025-08-14T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/weekend-sprint-chronicles-six-infrastructure-victories-and-a-dead-show-495a9ed09430",
    "featuredImage": "/assets/blog-images/robot-dead",
    "slug": "83",
    "workDate": "Aug 13, 2001",
    "workDateISO": "2001-08-14T00:00:00.000Z"
  },
  {
    "title": "7/31: When Your Tools Stop Crying Wolf",
    "excerpt": "When Your Tools Stop Crying Wolf“Really, guys…!”July 31So there I was, still Marie Kondo-ing the codebase after yesterday’s extraordinary schema cleanup session, when I hit one of those moments that makes you stop and think about what we’re actually building here.Our schema validator tool — the o...",
    "url": "/blog/731",
    "publishedAt": "Aug 13, 2025",
    "publishedAtISO": "2025-08-13T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-tools-stop-crying-wolf-de7a1feed708",
    "featuredImage": "/assets/blog-images/robot-wolf",
    "slug": "731",
    "workDate": "Aug 12, 2001",
    "workDateISO": "2001-08-13T00:00:00.000Z"
  },
  {
    "title": "7/31: The 71-Minute Cascade Killer: When Systematic Methodology Meets Production Reality",
    "excerpt": "The 71-Minute Cascade Killer: When Systematic Methodology Meets Production Reality“It’s holding!”August 1It was afternoon and I was watching what might be the most satisfying validation of systematic methodology I’ve ever witnessed. Our Lead Developer had just delivered PM-063 — a complete gracef...",
    "url": "/blog/731",
    "publishedAt": "Aug 13, 2025",
    "publishedAtISO": "2025-08-13T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-71-minute-cascade-killer-when-systematic-methodology-meets-production-reality-bf217794054d",
    "featuredImage": "/assets/blog-images/robot-landslide",
    "slug": "731",
    "workDate": "Aug 12, 2001",
    "workDateISO": "2001-08-13T00:00:00.000Z"
  },
  {
    "title": "7/31: Saturday Reflection: Why Ethics Can't Be an Afterthought",
    "excerpt": "Taking a Saturday to Remember Why Ethics Can’t Be an Afterthought“Thank you, young person!”August 2Coming off a week of frenetic building — 71-minute implementations, cascade failure prevention, systematic methodology validation — I hit the brakes and decided to spend Saturday thinking about some...",
    "url": "/blog/731",
    "publishedAt": "Aug 13, 2025",
    "publishedAtISO": "2025-08-13T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/taking-a-saturday-to-remember-why-ethics-cant-be-an-afterthought-07e55d3cff93",
    "featuredImage": "/assets/blog-images/robo-ethics",
    "slug": "731",
    "workDate": "Aug 12, 2001",
    "workDateISO": "2001-08-13T00:00:00.000Z"
  },
  {
    "title": "7/27: The Day We Didn't Just Integrate Slack But Started Incorporating Spatial Intelligence",
    "excerpt": "How Spatial Intelligence Will Help Piper Work with Slack and Other IntegrationsJuly 28“On my way!”How embodied cognition theory shaped an AI system that treats digital spaces as places to inhabit",
    "url": "/blog/727",
    "publishedAt": "Aug 12, 2025",
    "publishedAtISO": "2025-08-12T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-we-didnt-just-integrate-slack-but-started-incorporating-spatial-intelligence-a1f5fc08b053",
    "featuredImage": "/assets/blog-images/robot-help",
    "slug": "727",
    "workDate": "Aug 11, 2001",
    "workDateISO": "2001-08-12T00:00:00.000Z"
  },
  {
    "title": "7/29: To Live Outside the Law You Must Be Honest: Debugging an Unorthodox Slack Integration",
    "excerpt": "To Live Outside the Law You Must Be Honest: Debugging an Unorthodox Slack Integration“I have a code”July 29How a 30-minute fix becomes a 6-hour journey into the philosophy of systematic innovation:It was afternoon, fresh off a successful conversation with my communications chief about reframing o...",
    "url": "/blog/729",
    "publishedAt": "Aug 12, 2025",
    "publishedAtISO": "2025-08-12T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/to-live-outside-the-law-you-must-be-honest-debugging-an-unorthodox-slack-integration-e521b612bf58",
    "featuredImage": "/assets/blog-images/robot-outlaw",
    "slug": "729",
    "workDate": "Aug 11, 2001",
    "workDateISO": "2001-08-12T00:00:00.000Z"
  },
  {
    "title": "7/29: The Day Crisis Became Methodology: From Runaway Workflows to Historic Productivity",
    "excerpt": "The Day Crisis Became Methodology: From Runaway Workflows to Historic Productivity“Cowabunga!”July 30When emergency debugging at 12:30 PM became systematic prevention infrastructure by 4:18 PM….It was morning. I was riding high on the previous day’s Slack integration breakthrough when I noticed t...",
    "url": "/blog/729",
    "publishedAt": "Aug 12, 2025",
    "publishedAtISO": "2025-08-12T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-crisis-became-methodology-from-runaway-workflows-to-historic-productivity-57c4bc5529f7",
    "featuredImage": "/assets/blog-images/robot-lava",
    "slug": "729",
    "workDate": "Aug 11, 2001",
    "workDateISO": "2001-08-12T00:00:00.000Z"
  },
  {
    "title": "8/6 revised from 7/22: When 300 Files Work as One: The Perfect Storm",
    "excerpt": "When 300 Files Work as One: The Perfect Storm“Together we are stronger!”July 25Or… How systematic methodology survives laptop crashes, AI meltdowns, and the humbling discovery that 0% of your “production-ready” system actually worksIt was Friday morning, and I was riding high on Thursday’s 26-min...",
    "url": "/blog/86-revised-from-722",
    "publishedAt": "Aug 11, 2025",
    "publishedAtISO": "2025-08-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-300-files-work-as-one-the-perfect-storm-f8ff692dbbf8",
    "featuredImage": "/assets/blog-images/robot-files",
    "slug": "86-revised-from-722",
    "workDate": "Aug 10, 2001",
    "workDateISO": "2001-08-11T00:00:00.000Z"
  },
  {
    "title": "7/26: The Accidental Methodology Stress Test: When Success Creates Its Own Blind Spots",
    "excerpt": "The Accidental Methodology Stress Test: When Success Creates Its Own Blind Spots“How do I work this?”July 26Saturday morning, and I’m riding high on a wave of systematic excellence. GitHub Pages fixed in 13 minutes. Pattern Sweep system implemented in 90 minutes. Canonical queries documented, emb...",
    "url": "/blog/726",
    "publishedAt": "Aug 11, 2025",
    "publishedAtISO": "2025-08-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/7511ff6368a9",
    "featuredImage": "/assets/blog-images/robot-donuts",
    "slug": "726",
    "workDate": "Aug 10, 2001",
    "workDateISO": "2001-08-11T00:00:00.000Z"
  },
  {
    "title": "7/27: Engineering Excellence in a Gödel-Incomplete Universe",
    "excerpt": "Engineering Excellence in a Gödel-Incomplete Universe“Now that’s complete!”July 27When architectural purity meets implementation reality, and chaos gets its vote…So there I was Monday evening, watching our AI agents complete what should have been four hours of work in thirty minutes, implementing...",
    "url": "/blog/727",
    "publishedAt": "Aug 11, 2025",
    "publishedAtISO": "2025-08-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/engineering-excellence-in-g%C3%B6dels-incomplete-universe-7d4ea25d03fe",
    "featuredImage": "/assets/blog-images/robot-mobius",
    "slug": "727",
    "workDate": "Aug 10, 2001",
    "workDateISO": "2001-08-11T00:00:00.000Z"
  },
  {
    "title": "The Demo That Broke (And Why That's Perfect)",
    "excerpt": "The Demo That Broke (And Why That’s Perfect)“We’ll make it better”Part two of demo-process flashback weekend. It was nearly a week later when I finally got around to trying to do that demo….",
    "url": "/blog/the-demo-that-broke-and-why",
    "publishedAt": "Aug 10, 2025",
    "publishedAtISO": "2025-08-10T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-demo-that-broke-and-why-thats-perfect-5140d1657000",
    "featuredImage": "/assets/blog-images/robot-kitsugi",
    "slug": "the-demo-that-broke-and-why",
    "workDate": "Aug 9, 2001",
    "workDateISO": "2001-08-10T00:00:00.000Z"
  },
  {
    "title": "8/6: Always Keep Something Showable: Demo Infrastructure for Hyperfast Development",
    "excerpt": "Always Keep Something Showable: Demo Infrastructure for Hyperfast Development“I’ll never open the box”Time for a weekend process flashback, to the third week of this project, when I started to want to demo it my colleagues.",
    "url": "/blog/86",
    "publishedAt": "Aug 9, 2025",
    "publishedAtISO": "2025-08-09T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/always-keep-something-showable-demo-infrastructure-for-hyperfast-development-52d682510c10",
    "featuredImage": "/assets/blog-images/robot-toy",
    "slug": "86",
    "workDate": "Aug 8, 2001",
    "workDateISO": "2001-08-09T00:00:00.000Z"
  },
  {
    "title": "7/9: When the Bugs Lead You Home",
    "excerpt": "When the Bugs Lead You Home“Thanks, bugs!”July 9, earlyLast time I told you about my “two-fisted coding” adventure — juggling Claude Code and Cursor Agent like some kind of developer circus act. Well, the circus continues, but now with more debugging and fewer clowns.(OK, maybe the same number of...",
    "url": "/blog/79",
    "publishedAt": "Aug 8, 2025",
    "publishedAtISO": "2025-08-08T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-the-bugs-lead-you-home-c9ce09f192f1",
    "featuredImage": "/assets/blog-images/robot-bees",
    "slug": "79",
    "workDate": "Aug 7, 2001",
    "workDateISO": "2001-08-08T00:00:00.000Z"
  },
  {
    "title": "7/9: The Bug That Made Us Smarter",
    "excerpt": "The Bug That Made Us Smarter“Now pay close attention”July 9, middayPicture this: A user types “Users are complaining that the mobile app crashes” and your AI-powered PM assistant responds with… a friendly greeting.Not “I’ll create a bug ticket for that.” Not “Let me analyze the crash reports.” Ju...",
    "url": "/blog/79",
    "publishedAt": "Aug 8, 2025",
    "publishedAtISO": "2025-08-08T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-bug-that-made-us-smarter-cf1774978f51",
    "featuredImage": "/assets/blog-images/robot-prof",
    "slug": "79",
    "workDate": "Aug 7, 2001",
    "workDateISO": "2001-08-08T00:00:00.000Z"
  },
  {
    "title": "7/9: When Your Tests Pass But Your App Fails",
    "excerpt": "When Your Tests Pass But Your App Fails“I passed the test!”July 9, that eveningThere’s a special kind of confidence that comes from seeing all your tests pass. Green checkmarks everywhere. Coverage at 98%. The CI/CD pipeline singing its happy song.Then you run the app and it immediately crashes.W...",
    "url": "/blog/79",
    "publishedAt": "Aug 8, 2025",
    "publishedAtISO": "2025-08-08T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-tests-pass-but-your-app-fails-3b3d6f3aeff1",
    "featuredImage": "/assets/blog-images/robot-test",
    "slug": "79",
    "workDate": "Aug 7, 2001",
    "workDateISO": "2001-08-08T00:00:00.000Z"
  },
  {
    "title": "7/22: The Day We Finished Next Week's Work in One Day",
    "excerpt": "The Day We Finished Next Week’s Work in One Day“Can’t wait to tell the gang!”July 22It was 10:54 AM and I was looking at our Foundation Sprint Day 2 plan: complete PM-055 (Python version consistency) by Wednesday, maybe start on PM-015 Group 4 if we had time. Systematic approach, no rushing, prop...",
    "url": "/blog/722",
    "publishedAt": "Aug 7, 2025",
    "publishedAtISO": "2025-08-07T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-we-finished-next-weeks-work-in-one-day-ad5a228fbc0a",
    "featuredImage": "/assets/blog-images/robot-time-travel",
    "slug": "722",
    "workDate": "Aug 6, 2001",
    "workDateISO": "2001-08-07T00:00:00.000Z"
  },
  {
    "title": "7/22: The Final Leap: When Prototype Becomes Production Tool (mislabeld as The Day We)",
    "excerpt": "The Final Leap: When Prototype Becomes Production Tool“We’re so proud of you!”July 23Or the day we crossed the threshold from “interesting project” to “genuinely useful.”Wednesday morning my roadmap claimed my AI assistant was weeks away from being useful.By evening, we’d not only completed PM-01...",
    "url": "/blog/722",
    "publishedAt": "Aug 7, 2025",
    "publishedAtISO": "2025-08-07T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-final-leap-when-prototype-becomes-prod-uction-tool-37128cf4fdf6",
    "featuredImage": "/assets/blog-images/robot-fledgling",
    "slug": "722",
    "workDate": "Aug 6, 2001",
    "workDateISO": "2001-08-07T00:00:00.000Z"
  },
  {
    "title": "7/22: PTSD (Patched-Test Stress Disorder) and Other Development Culture Innovations",
    "excerpt": "PTSD (Patched-Test Stress Disorder) and Other Development Culture Innovations“Too stressful!”July 24Thursday morning: I’m watching my development team complete two days of planned work in 26 minutes, when I Cursor casually mentions updating a test “to match the actual behavior.”My immediate respo...",
    "url": "/blog/722",
    "publishedAt": "Aug 7, 2025",
    "publishedAtISO": "2025-08-07T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/ptsd-patched-test-stress-disorder-and-other-development-culture-innovations-bef231301ab4",
    "featuredImage": "/assets/blog-images/robot-patches",
    "slug": "722",
    "workDate": "Aug 6, 2001",
    "workDateISO": "2001-08-07T00:00:00.000Z"
  },
  {
    "title": "7/16 chat: The 40-minute miracle: how two AI agents achieved 642x performance in one session",
    "excerpt": "The 40-minute miracle: how two AI agents achieved 642x performance in one session“We’re breaking the record!”July 18Here’s how you know your development process is getting weird: you deploy two AI agents in parallel, step away for 40 minutes, and come back to a 642ｘ performance improvement with c...",
    "url": "/blog/716-chat",
    "publishedAt": "Aug 6, 2025",
    "publishedAtISO": "2025-08-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-40-minute-miracle-how-two-ai-agents-achieved-642x-performance-in-one-session-a7d8ee906912",
    "featuredImage": "/assets/blog-images/robot-relay",
    "slug": "716-chat",
    "workDate": "Aug 5, 2001",
    "workDateISO": "2001-08-06T00:00:00.000Z"
  },
  {
    "title": "7/20 chat: When Your Infrastructure Gets Smarter Than Your Tests",
    "excerpt": "When Your Infrastructure Gets Smarter Than Your Tests“I’ve outsmarted you!”July 20There I was on a Sunday morning staring at what looked like catastrophic test failures across my entire MCP integration, wondering if I’d somehow broken everything overnight. Ninety-two tests passing, three mysterio...",
    "url": "/blog/720-chat",
    "publishedAt": "Aug 6, 2025",
    "publishedAtISO": "2025-08-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-infrastructure-gets-smarter-than-your-tests-2582f1c7b3d5",
    "featuredImage": "/assets/blog-images/robot-inspector",
    "slug": "720-chat",
    "workDate": "Aug 5, 2001",
    "workDateISO": "2001-08-06T00:00:00.000Z"
  },
  {
    "title": "7/20 chat: The Foundation Sprint: Why We Clean House Before Building New Rooms",
    "excerpt": "The Foundation Sprint: Why We Clean House Before Building New Rooms“Something new coming?”July 21It’s Monday morning: I’m fresh off the weekend’s 642x performance breakthrough, staring at a backlog full of shiny new features I could build, and instead deciding to… clean house?I know. It sounds li...",
    "url": "/blog/720-chat",
    "publishedAt": "Aug 6, 2025",
    "publishedAtISO": "2025-08-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-foundation-sprint-why-we-clean-house-before-building-new-rooms-12f37f759a92",
    "featuredImage": "/assets/blog-images/robot-foundation",
    "slug": "720-chat",
    "workDate": "Aug 5, 2001",
    "workDateISO": "2001-08-06T00:00:00.000Z"
  },
  {
    "title": "7/12-7/13, 7/15 chat: When the Pupil Outsmarts the Teacher?",
    "excerpt": "When the Pupil Outsmarts the Teacher: The Day Piper Outgrew Its Tests“Who taught you that?”July 15There’s a moment in every teacher’s career when they realize their student has surpassed them. For me, it happened at 6:18 AM on July 15, during what started as a simple test fix and became a 13-hour...",
    "url": "/blog/712-713-715-chat",
    "publishedAt": "Aug 5, 2025",
    "publishedAtISO": "2025-08-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-the-pupil-outsmarts-the-teacher-the-day-piper-outgrew-its-tests-cde7eb0b6605",
    "featuredImage": "/assets/blog-images/robot-pupil",
    "slug": "712-713-715-chat",
    "workDate": "Aug 4, 2001",
    "workDateISO": "2001-08-05T00:00:00.000Z"
  },
  {
    "title": "7/16 chat: When Your Tests Lie: A Victory Disguised as Crisis",
    "excerpt": "When Your Tests Lie: A Victory Disguised as Crisis“ I aced it?”July 16Here’s where I found myself at 8 AM: staring at 32 test failures and wondering if yesterday’s 12.5-hour debugging marathon had actually made things worse. The numbers looked grim — 85.5% pass rate, which in testing terms is lik...",
    "url": "/blog/716-chat",
    "publishedAt": "Aug 5, 2025",
    "publishedAtISO": "2025-08-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-tests-lie-a-victory-disguised-as-crisis-c70e69a245ea",
    "featuredImage": "/assets/blog-images/robot-pass-fail",
    "slug": "716-chat",
    "workDate": "Aug 4, 2001",
    "workDateISO": "2001-08-05T00:00:00.000Z"
  },
  {
    "title": "7/16 chat: The 5-Minute Day: When TDD Meets AI-Assisted Development",
    "excerpt": "The 5-Minute Day: When TDD Meets AI-Assisted Development“We are cranking!”July 17I had just heard about MCP from my colleague Josh Mills at Kind, and I had asked my Chief Architect (Claude Opus) if Piper ought to be savvy about this new-ish Model Context Protocol thing.Now I was staring at Claude...",
    "url": "/blog/716-chat",
    "publishedAt": "Aug 5, 2025",
    "publishedAtISO": "2025-08-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-5-minute-day-when-tdd-meets-ai-assisted-development-1e15183972a7",
    "featuredImage": "/assets/blog-images/robots-cranking",
    "slug": "716-chat",
    "workDate": "Aug 4, 2001",
    "workDateISO": "2001-08-05T00:00:00.000Z"
  },
  {
    "title": "From 2% to 87%: The Great Test Suite Recovery",
    "excerpt": "From 2% to 87%: The Great Test Suite Recovery“You’re going home!”July 13There’s a special kind of despair that comes with seeing your test suite report 144 failures and 19 errors out of 204 total tests. A 2% pass rate isn’t just broken — it’s catastrophically broken. It’s the kind of number that ...",
    "url": "/blog/from-2-to-87",
    "publishedAt": "Aug 4, 2025",
    "publishedAtISO": "2025-08-04T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-2-to-87-the-great-test-suite-recovery-b7c3ef25cbdc",
    "featuredImage": "/assets/blog-images/robot-doctors",
    "slug": "from-2-to-87",
    "workDate": "Aug 3, 2001",
    "workDateISO": "2001-08-04T00:00:00.000Z"
  },
  {
    "title": "The Action Humanizer: Teaching AI to Speak Human",
    "excerpt": "The Action Humanizer: Teaching AI to Speak Human“Now you try”July 13, later that dayThere’s something deeply unsatisfying about building an AI assistant that talks to users like a developer. When your system responds with “I understand you want to investigate_crash,” it sounds like a robot that’s...",
    "url": "/blog/the-action-humanizer",
    "publishedAt": "Aug 4, 2025",
    "publishedAtISO": "2025-08-04T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-action-humanizer-teaching-ai-to-speak-human-9fbbf6932838",
    "featuredImage": "/assets/blog-images/robot-speech",
    "slug": "the-action-humanizer",
    "workDate": "Aug 3, 2001",
    "workDateISO": "2001-08-04T00:00:00.000Z"
  },
  {
    "title": "7/12-7/13, 7/15 chat: From Broken Tests to Perfect Architecture: The Great Cleanup of July 14",
    "excerpt": "From Broken Tests to Perfect Architecture: The Great Cleanup“We’ll make it better than new”July 14What started as “let’s fix these 9 failing FileRepository tests” became “let’s eliminate three years–worth of accumulated technical debt and achieve 100% architectural pattern compliance.” Sometimes ...",
    "url": "/blog/712-713-715-chat",
    "publishedAt": "Aug 4, 2025",
    "publishedAtISO": "2025-08-04T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-broken-tests-to-perfect-architecture-the-great-cleanup-2575d3526323",
    "featuredImage": "/assets/blog-images/robot-cleanup",
    "slug": "712-713-715-chat",
    "workDate": "Aug 3, 2001",
    "workDateISO": "2001-08-04T00:00:00.000Z"
  },
  {
    "title": "Chasing Rabbits (A Debugging Story)",
    "excerpt": "The Lost Weekend, Part 3 of 4, or debugging with Gemini a prototype that Claude threw together:“I’m gonna gitcha!”May 31, earlyWhat did it mean?AssertionError: NoneSix hours later, I finally understood what that error was trying to tell me: Stop.The mystery that made no sensePyGithub was throwing...",
    "url": "/blog/chasing-rabbits-a-debugging-story",
    "publishedAt": "Aug 3, 2025",
    "publishedAtISO": "2025-08-03T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/chasing-rabbits-a-debugging-story-40f084dc3095",
    "featuredImage": "/assets/blog-images/robot-rabbits",
    "slug": "chasing-rabbits-a-debugging-story",
    "workDate": "Aug 2, 2001",
    "workDateISO": "2001-08-03T00:00:00.000Z"
  },
  {
    "title": "When Your AI Writes 500 Lines of Boilerplate (And Why That's Actually Useful)",
    "excerpt": "When Your AI Writes 500 Lines of Boilerplate (And Why That’s Actually Useful)Part 4 of of the reconstructed “Lost Weekend” at the beginning of this project, as best as we can determine!“You finished it all?”May 30, later in the day“Can you program this for me?”That simple question to Gemini start...",
    "url": "/blog/when-your-ai-writes-500-lines",
    "publishedAt": "Aug 3, 2025",
    "publishedAtISO": "2025-08-03T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-ai-writes-500-lines-of-boilerplate-and-why-thats-actually-useful-084611e312ea",
    "featuredImage": "/assets/blog-images/robot-blueprints",
    "slug": "when-your-ai-writes-500-lines",
    "workDate": "Aug 2, 2001",
    "workDateISO": "2001-08-03T00:00:00.000Z"
  },
  {
    "title": "7/11: When Claude Took a Break (And Gemini Stepped In)",
    "excerpt": "When Claude Took a Break (And Gemini Stepped In)Time for one more flashback to the “lost weekend” two days into this project, reconstructed after the fact from a Gemini log so long I couldn’t get back to the head of it without crashing my browser. Part 1 of 4.“I’m ready to take over”May 30, early...",
    "url": "/blog/711",
    "publishedAt": "Aug 2, 2025",
    "publishedAtISO": "2025-08-02T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-claude-took-a-break-and-gemini-stepped-in-922fd802460e",
    "featuredImage": "/assets/blog-images/robot-understudy",
    "slug": "711",
    "workDate": "Aug 1, 2001",
    "workDateISO": "2001-08-02T00:00:00.000Z"
  },
  {
    "title": "The Demo That Needed Documentation",
    "excerpt": "“The Lost Weekend” Part 2 of 4, when “it works on my machine” isn’t enough“I’m not prepared!”May 30, later that dayPart 1 of this story crashed my browser. Which feels perfect for a weekend where everything was slightly broken, including my memory.What I do remember: six documents in one marathon...",
    "url": "/blog/the-demo-that-needed-documentation",
    "publishedAt": "Aug 2, 2025",
    "publishedAtISO": "2025-08-02T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-demo-that-needed-documentation-ccb351b91629",
    "featuredImage": "/assets/blog-images/robot-unprepared",
    "slug": "the-demo-that-needed-documentation",
    "workDate": "Aug 1, 2001",
    "workDateISO": "2001-08-02T00:00:00.000Z"
  },
  {
    "title": "7/8: Two-Fisted Coding: Wrangling Robot Programmers When You're Just a PM",
    "excerpt": "Two-Fisted Coding: Wrangling Robot Programmers When You’re Just a PM“Whoa! Whoa!”July 8There’s a moment in every product manager’s life when you realize you’re doing something completely absurd. For me, it was Tuesday at 2:30 PM Pacific, watching two different AI assistants simultaneously rewrite...",
    "url": "/blog/78",
    "publishedAt": "Aug 1, 2025",
    "publishedAtISO": "2025-08-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/two-fisted-coding-wrangling-robot-programmers-when-youre-just-a-pm-c619de609a42",
    "featuredImage": "/assets/blog-images/robot-horses",
    "slug": "78",
    "workDate": "Jul 31, 2001",
    "workDateISO": "2001-08-01T00:00:00.000Z"
  },
  {
    "title": "Three Bugs, One Victory: The Day We Finally Shipped PM-011",
    "excerpt": "Three Bugs, One Victory: The Day We Finally Shipped PM-011“We are the champions!”July 12After three weeks of architectural work, domain modeling, and infrastructure building, yesterday we finally shipped PM-011: complete end-to-end GitHub integration. The victory came down to one focused hour of ...",
    "url": "/blog/three-bugs-one-victory",
    "publishedAt": "Aug 1, 2025",
    "publishedAtISO": "2025-08-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/three-bugs-one-victory-the-day-we-finally-shipped-pm-011-cc07dca2a5e9",
    "featuredImage": "/assets/blog-images/robot-victory",
    "slug": "three-bugs-one-victory",
    "workDate": "Jul 31, 2001",
    "workDateISO": "2001-08-01T00:00:00.000Z"
  },
  {
    "title": "The AI Detective Squad: When Three Agents Solve One Mystery",
    "excerpt": "The AI Detective Squad: When Three Agents Solve One Mystery“It’s all adding up”July 12Sometimes the most interesting bugs aren’t bugs at all — they’re architectural mysteries that reveal how well (or poorly) you’ve designed your system. Yesterday’s “orchestration false positive” investigation tur...",
    "url": "/blog/the-ai-detective-squad",
    "publishedAt": "Aug 1, 2025",
    "publishedAtISO": "2025-08-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-ai-detective-squad-when-three-agents-solve-one-mystery-987eb4c5cc42",
    "featuredImage": "/assets/blog-images/robot-detectives",
    "slug": "the-ai-detective-squad",
    "workDate": "Jul 31, 2001",
    "workDateISO": "2001-08-01T00:00:00.000Z"
  },
  {
    "title": "The Zeno's Paradox of Debugging: A Weekend with Piper Morgan",
    "excerpt": "The Zeno’s Paradox of Debugging: A Weekend with Piper Morgan“Halfway there!”Jul 6, 2025It should have been a simple request: “Please summarize that file I just uploaded.”How hard could it be, right? We had all the pieces — file upload working, storage functional, an LLM ready to summarize. The fe...",
    "url": "/blog/the-zenos-paradox-of-debugging",
    "publishedAt": "Jul 31, 2025",
    "publishedAtISO": "2025-07-31T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-zenos-paradox-of-debugging-a-weekend-with-piper-morgan-03c685be122a",
    "featuredImage": "/assets/blog-images/robot-archer",
    "slug": "the-zenos-paradox-of-debugging",
    "workDate": "Jul 30, 2001",
    "workDateISO": "2001-07-31T00:00:00.000Z"
  },
  {
    "title": "The Debugging Cascade: A 90-Minute Journey Through Integration Hell",
    "excerpt": "“Hang on!”July 7Sunday morning, and I’m staring at handoff notes that read: “The document summarization feature is one line away from working.” The pipeline processed files, generated summaries, stored them in the database. All we needed was to display them to the user.As a lazy writer I know is ...",
    "url": "/blog/the-debugging-cascade",
    "publishedAt": "Jul 31, 2025",
    "publishedAtISO": "2025-07-31T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-debugging-cascade-a-90-minute-journey-through-integration-hell-7aaec260ede5",
    "featuredImage": "/assets/blog-images/robot-waterfall",
    "slug": "the-debugging-cascade",
    "workDate": "Jul 30, 2001",
    "workDateISO": "2001-07-31T00:00:00.000Z"
  },
  {
    "title": "The Coordination Tax: When Copy-Paste Becomes Your Biggest Bottleneck",
    "excerpt": "“We should have kept receipts.”July 8Monday morning, and we’re down to what should have been the simplest possible fix: “The UI shows ‘Workflow completed successfully!’ instead of the actual document summary. Should be a quick fix.”You know where this is going, right?Two hours later, I’d discover...",
    "url": "/blog/the-coordination-tax",
    "publishedAt": "Jul 31, 2025",
    "publishedAtISO": "2025-07-31T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-coordination-tax-when-copy-paste-becomes-your-biggest-bottleneck-4e6f997a80cf",
    "featuredImage": "/assets/blog-images/robot-taxes",
    "slug": "the-coordination-tax",
    "workDate": "Jul 30, 2001",
    "workDateISO": "2001-07-31T00:00:00.000Z"
  },
  {
    "title": "The Real Bugs Live in the UI (A Testing Reality Check)",
    "excerpt": "The Real Bugs Live in the UI (A Testing Reality Check)“Yeeouch!”July 1After weeks of building sophisticated architecture, implementing AI reasoning, and solving complex integration challenges, I sat down to run four simple UI tests.How hard could that be?Test 1: Can it say hello?First challenge: ...",
    "url": "/blog/the-real-bugs-live-in-the",
    "publishedAt": "Jul 30, 2025",
    "publishedAtISO": "2025-07-30T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-real-bugs-live-in-the-ui-a-testing-reality-check-336d98a417e4",
    "featuredImage": "/assets/blog-images/robot-mosquito",
    "slug": "the-real-bugs-live-in-the",
    "workDate": "Jul 29, 2001",
    "workDateISO": "2001-07-30T00:00:00.000Z"
  },
  {
    "title": "The Day We Stopped Fighting the System",
    "excerpt": "The Day We Stopped Fighting the System“I need a break!”July 3The day started with what seemed like a simple mission: complete UI testing for Piper Morgan. You know how these things go by now, I’m sure? Six hours later, I’m having philosophical conversations with my Lead Developer about architectu...",
    "url": "/blog/the-day-we-stopped-fighting-the",
    "publishedAt": "Jul 30, 2025",
    "publishedAtISO": "2025-07-30T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-we-stopped-fighting-the-system-or-how-i-stopped-worrying-and-learned-to-love-synthesis-7fc3aadc2a3b",
    "featuredImage": "/assets/blog-images/robot-boxers",
    "slug": "the-day-we-stopped-fighting-the",
    "workDate": "Jul 29, 2001",
    "workDateISO": "2001-07-30T00:00:00.000Z"
  },
  {
    "title": "The Day We Taught Piper to Summarize (Almost)",
    "excerpt": "“Websters defines…”July 4A tale of hidden infrastructure, session mysteries, and the importance of actually showing your workPicture this: UI Test 2.3 — “Document Summarization.” Should be simple, right? Upload a file, ask for a summary, get a summary. We had spent the entire previous work sessio...",
    "url": "/blog/the-day-we-taught-piper-to",
    "publishedAt": "Jul 30, 2025",
    "publishedAtISO": "2025-07-30T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-day-we-taught-piper-to-summarize-almost-437a3ec04316",
    "featuredImage": "/assets/blog-images/robot-report",
    "slug": "the-day-we-taught-piper-to",
    "workDate": "Jul 29, 2001",
    "workDateISO": "2001-07-30T00:00:00.000Z"
  },
  {
    "title": "7/20: When Your Tests Tell You What Your Code Should Do",
    "excerpt": "When Your Tests Tell You What Your Code Should Do“You can do it!”June 27We were down to just two failing tests out of 64, and my first instinct was what it always is when tests fail after escaping a crisis: these tests must be wrong.I mean, it made sense. We’d just come through the 48-hour roller...",
    "url": "/blog/720",
    "publishedAt": "Jul 29, 2025",
    "publishedAtISO": "2025-07-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-tests-tell-you-what-your-code-should-do-c00a94c09c2c",
    "featuredImage": "/assets/blog-images/robot-driver",
    "slug": "720",
    "workDate": "Jul 28, 2001",
    "workDateISO": "2001-07-29T00:00:00.000Z"
  },
  {
    "title": "7/20: Following Your Own Patterns",
    "excerpt": "Following Your Own Patterns“Straight on till morning!”June 28, 2025Here’s what happened when we went to add GitHub integration to Piper Morgan: it took about an hour, and most of that was just writing the tests.Not because GitHub integration is simple (though their API is quite nice). Not because...",
    "url": "/blog/720",
    "publishedAt": "Jul 29, 2025",
    "publishedAtISO": "2025-07-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/following-your-own-patterns-0822585cb51a",
    "featuredImage": "/assets/blog-images/robot-stars",
    "slug": "720",
    "workDate": "Jul 28, 2001",
    "workDateISO": "2001-07-29T00:00:00.000Z"
  },
  {
    "title": "7/22: Battle-Testing GitHub Integration: When Recovery Becomes Learning",
    "excerpt": "Battle-Testing Your Architecture: When Recovery Becomes Learning“I want you to stay safe.”June 29Fresh off implementing GitHub integration in what felt like record time, I was ready to test our freshly implemented GitHub integration end-to-end. PM-011 was finally complete — comprehensive document...",
    "url": "/blog/722",
    "publishedAt": "Jul 29, 2025",
    "publishedAtISO": "2025-07-29T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/battle-testing-your-architecture-when-recovery-becomes-learning-5243027aa9f6",
    "featuredImage": "/assets/blog-images/robot-knight",
    "slug": "722",
    "workDate": "Jul 28, 2001",
    "workDateISO": "2001-07-29T00:00:00.000Z"
  },
  {
    "title": "The 48-hour rollercoaster: from working tests to ‘Failed attempt’ and back to ‘LIFE SAVER !!!”’",
    "excerpt": "The 48-Hour Rollercoaster: From working tests to ‘Failed attempt’ and back to ‘LIFE SAVER !!!”’June 24–26, 2025“Ahhhhhhhhhhh!”Tuesday afternoon working on file analysis architecture: “34/34 tests passing.”Thursday evening: “Failed attempt to recreate lost work from session logs”Friday afternoon: ...",
    "url": "/blog/the-48-hour-rollercoaster",
    "publishedAt": "Jul 28, 2025",
    "publishedAtISO": "2025-07-28T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-48-hour-rollercoaster-from-working-tests-to-failed-attempt-and-back-to-life-saver-b4d9193ec579",
    "featuredImage": "/assets/blog-images/robot-rollercoaster",
    "slug": "the-48-hour-rollercoaster",
    "workDate": "Jul 27, 2001",
    "workDateISO": "2001-07-28T00:00:00.000Z"
  },
  {
    "title": "7/20: The Technical Debt Reckoning",
    "excerpt": "The Technical Debt Reckoning“What’s that doing there?”June 26So there I was, supposedly at the end of a successful integration sprint, staring at what should have been a celebration moment, and instead discovering I’d accidentally built two orchestration systems.And only one of them actually work...",
    "url": "/blog/720",
    "publishedAt": "Jul 28, 2025",
    "publishedAtISO": "2025-07-28T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-technical-debt-reckoning-160bc294b0b5",
    "featuredImage": "/assets/blog-images/robot-third-arm",
    "slug": "720",
    "workDate": "Jul 27, 2001",
    "workDateISO": "2001-07-28T00:00:00.000Z"
  },
  {
    "title": "7/22: Keeping Your AI Project on Track: Lessons from Building a Product Management Assistant",
    "excerpt": "Keeping Your AI Project on Track: Lessons from Building a Product Management Assistant“Gee! Haw! Easy!”On flashback weekends I will share process pieces drawn from my experience building Piper Morgan. This is the first one I wrote, orginally for my team at Kind. I’ve revised it slightly and shoul...",
    "url": "/blog/722",
    "publishedAt": "Jul 27, 2025",
    "publishedAtISO": "2025-07-27T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/keeping-your-ai-project-on-track-lessons-from-building-a-product-management-assistant-32c8ed94248d",
    "featuredImage": "/assets/blog-images/robot-dogsled",
    "slug": "722",
    "workDate": "Jul 26, 2001",
    "workDateISO": "2001-07-27T00:00:00.000Z"
  },
  {
    "title": "Naming Piper Morgan",
    "excerpt": "Naming Piper Morgan“Your name is Piper Morgan”Saturday Flashback: I’m going to step away from the chronological narrative on weekends to share thoughts about the process I’m discovering, and to fill in a few of the since-discovered gaps.",
    "url": "/blog/naming-piper-morgan",
    "publishedAt": "Jul 26, 2025",
    "publishedAtISO": "2025-07-26T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/naming-piper-morgan-9efacddc4804",
    "featuredImage": "/assets/blog-images/robot-champagne",
    "slug": "naming-piper-morgan",
    "workDate": "Jul 25, 2001",
    "workDateISO": "2001-07-26T00:00:00.000Z"
  },
  {
    "title": "When Your Docs Lie",
    "excerpt": "When Your Docs Lie“It’s not IKEA?”June 21–22, 2025Fresh off completing three planned issues,PM-009 (multi-project support), PM-010 (production error handling), and PM-011 (web chat interface), feeling pretty good about our systematic development progress. Time to update the documentation to refle...",
    "url": "/blog/when-your-docs-lie",
    "publishedAt": "Jul 25, 2025",
    "publishedAtISO": "2025-07-25T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-your-docs-lie-98ad7b8cefd0",
    "featuredImage": "/assets/blog-images/robots-docs",
    "slug": "when-your-docs-lie",
    "workDate": "Jul 24, 2001",
    "workDateISO": "2001-07-25T00:00:00.000Z"
  },
  {
    "title": "When TDD Saves Your Architecture",
    "excerpt": "“Here I come to save the day!”June 25, 2025Thirty-four tests. Zero compromises. One unshakeable foundation.This is the story of how Test-Driven Development didn’t just help me build features — it saved my architecture from death by a thousand shortcuts.Sometimes the discipline of writing tests fi...",
    "url": "/blog/when-tdd-saves-your-architecture",
    "publishedAt": "Jul 25, 2025",
    "publishedAtISO": "2025-07-25T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-tdd-saves-your-architecture-ca9c8039b20d",
    "featuredImage": "/assets/blog-images/robot-hero",
    "slug": "when-tdd-saves-your-architecture",
    "workDate": "Jul 24, 2001",
    "workDateISO": "2001-07-25T00:00:00.000Z"
  },
  {
    "title": "7/20: Digging Out of the Complexity Hole",
    "excerpt": "Digging Out of the Complexity HoleJune 17–18, 2025“Dig up, not down!”“I want us digging back out of this hole, not deeper into it.”That was my plea to Claude halfway through what had started as a simple multi-project support implementation and had somehow devolved into a 30-hour debugging maratho...",
    "url": "/blog/720",
    "publishedAt": "Jul 24, 2025",
    "publishedAtISO": "2025-07-24T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/digging-out-of-the-complexity-hole-117b25fa6bae",
    "featuredImage": "/assets/blog-images/robot-hole",
    "slug": "720",
    "workDate": "Jul 23, 2001",
    "workDateISO": "2001-07-24T00:00:00.000Z"
  },
  {
    "title": "7/20: Successful Prototype Syndrome",
    "excerpt": "Successful Prototype SyndromeJune 19, 2025Famous last wordsI was fresh off fixing our architectural drift issues and digging out of the PM-009 complexity hole and starting to feel like we’d learned our lessons about systematic development. Time to add some query functionality — just a simple “lis...",
    "url": "/blog/720",
    "publishedAt": "Jul 24, 2025",
    "publishedAtISO": "2025-07-24T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/successful-prototype-syndrome-34c725384254",
    "featuredImage": "/assets/blog-images/robot-easy",
    "slug": "720",
    "workDate": "Jul 23, 2001",
    "workDateISO": "2001-07-24T00:00:00.000Z"
  },
  {
    "title": "7/22: When Architecture Principles Trump Tactical Convenience",
    "excerpt": "When Architecture Principles Trump Tactical ConvenienceJune 16, 2025“We’re off-course!”There I was, three hours into what should have been a straightforward database migration, watching Claude chase its tail through circular import errors and wondering how we’d gotten so far off track.The goal wa...",
    "url": "/blog/722",
    "publishedAt": "Jul 23, 2025",
    "publishedAtISO": "2025-07-23T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-architecture-principles-trump-tactical-convenience-7d71c9e5316d",
    "featuredImage": "/assets/blog-images/robot-sailboat",
    "slug": "722",
    "workDate": "Jul 22, 2001",
    "workDateISO": "2001-07-23T00:00:00.000Z"
  },
  {
    "title": "7/20: When Multiple AIs Can Still Drift Together",
    "excerpt": "When Multiple AIs Drift TogetherJune 15, 2025“Wheeeeeee!”There I was, feeling pretty confident about our multi-AI development process. Claude Opus handling architecture reviews, Claude Sonnet doing detailed implementation planning, Cursor providing code execution support. Three different AI persp...",
    "url": "/blog/720",
    "publishedAt": "Jul 22, 2025",
    "publishedAtISO": "2025-07-22T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/when-multiple-ais-can-still-drift-together-0caeeadf7ef5",
    "featuredImage": "/assets/blog-images/robot-skaters",
    "slug": "720",
    "workDate": "Jul 21, 2001",
    "workDateISO": "2001-07-22T00:00:00.000Z"
  },
  {
    "title": "The Integration Reality Check",
    "excerpt": "The integration reality checkJune 24, 2025“The head bone connects to the what now?”Everything passed unit tests. Nothing worked when I wired it all together.This is the humbling reality of integration testing: all your beautiful, isolated components can work perfectly in theory and completely fai...",
    "url": "/blog/the-integration-reality-check",
    "publishedAt": "Jul 21, 2025",
    "publishedAtISO": "2025-07-21T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-integration-reality-check-72145777c406",
    "featuredImage": "/assets/blog-images/robot-integrate",
    "slug": "the-integration-reality-check",
    "workDate": "Jul 20, 2001",
    "workDateISO": "2001-07-21T00:00:00.000Z"
  },
  {
    "title": "Day Zero or Deja Zero: When Chaos Became a Claude Project",
    "excerpt": "Day Zero or Déjà Zero: When Chaos Became a Claude ProjectJune 3, 2025“I’ve got the perfect place for you”I’ll be publishing process and how-to stories on Sundays, outside the main chronological narrative. This one goes back to the first week of the project:Every project has a Day Zero. That magic...",
    "url": "/blog/day-zero-or-deja-zero",
    "publishedAt": "Jul 20, 2025",
    "publishedAtISO": "2025-07-20T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/day-zero-or-d%C3%A9j%C3%A0-zero-when-chaos-became-a-claude-project-2965731c90bc",
    "featuredImage": "/assets/blog-images/robot-office",
    "slug": "day-zero-or-deja-zero",
    "workDate": "Jul 19, 2001",
    "workDateISO": "2001-07-20T00:00:00.000Z"
  },
  {
    "title": "7/16 to 7/18: The Cascade Effect: How Testing the UI Led to Architectural Discoveries",
    "excerpt": "The Cascade Effect: How Testing the UI Led to Architectural DiscoveriesJune 23, 2025“Are we ready to open?”I just wanted to test a web interface. You know, basic stuff — upload a file, send a chat message, see if the buttons worked. A quick validation session before moving on to bigger features.T...",
    "url": "/blog/716-to-718",
    "publishedAt": "Jul 19, 2025",
    "publishedAtISO": "2025-07-19T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-cascade-effect-how-testing-the-ui-led-to-architectural-discoveries-0b19d8a13665",
    "featuredImage": "/assets/blog-images/robot-unfinished",
    "slug": "716-to-718",
    "workDate": "Jul 18, 2001",
    "workDateISO": "2001-07-19T00:00:00.000Z"
  },
  {
    "title": "From Architecture Drift to Working AI",
    "excerpt": "From Architecture Drift to Working AIJune 15, 2025“Get back on track!”Well, I thought I was just going to connect some dots. Finish PM-008, get GitHub issue analysis working end-to-end, maybe record a demo for the team. You know, a nice straightforward Friday afternoon of development.Three hours ...",
    "url": "/blog/from-architecture-drift-to-working-ai",
    "publishedAt": "Jul 18, 2025",
    "publishedAtISO": "2025-07-18T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-architecture-drift-to-working-ai-201f17c5cfbf",
    "featuredImage": "/assets/blog-images/robot-drift",
    "slug": "from-architecture-drift-to-working-ai",
    "workDate": "Jul 17, 2001",
    "workDateISO": "2001-07-18T00:00:00.000Z"
  },
  {
    "title": "Small Scripts Win: Building Knowledge That Actually Knows Things",
    "excerpt": "Small Scripts Win: Building Knowledge That Actually Knows ThingsJune 8, 2025“Webster’s defines…”Remember that knowledge base I mentioned? The one that was supposed to make Piper Morgan smart about product management? Well, it could store documents. It could search them. But it didn’t actually und...",
    "url": "/blog/small-scripts-win",
    "publishedAt": "Jul 17, 2025",
    "publishedAtISO": "2025-07-17T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/small-scripts-win-building-knowledge-that-actually-knows-things-360bd682551e",
    "featuredImage": "/assets/blog-images/robot-know",
    "slug": "small-scripts-win",
    "workDate": "Jul 16, 2001",
    "workDateISO": "2001-07-17T00:00:00.000Z"
  },
  {
    "title": "Modeling What PMs Do for Piper",
    "excerpt": "Modeling What PMs Do for PiperJune 7, 2025“Now watch this part carefully”There’s a moment in every product’s development when you realize you’re solving your own problem. For me and Piper Morgan, June 7 was that day. While manually parsing markdown files to create GitHub issues and tracking progr...",
    "url": "/blog/modeling-what-pms-do-for-piper",
    "publishedAt": "Jul 16, 2025",
    "publishedAtISO": "2025-07-16T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/modeling-what-pms-do-for-piper-f6d7fac93e1f",
    "featuredImage": "/assets/blog-images/robot-birdhouse",
    "slug": "modeling-what-pms-do-for-piper",
    "workDate": "Jul 15, 2001",
    "workDateISO": "2001-07-16T00:00:00.000Z"
  },
  {
    "title": "Persistence of Memory: AI Can't Learn without It",
    "excerpt": "Persistence of Memory: AI Can’t Learn without It(End of) June 2, 2025“I think I’m getting it”There’s a moment in every AI project when you realize the difference between intelligence and memory. Intelligence can solve problems. Memory can learn from solutions. Today’s story is about trying to giv...",
    "url": "/blog/persistence-of-memory",
    "publishedAt": "Jul 15, 2025",
    "publishedAtISO": "2025-07-15T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/persistence-of-memory-ai-cant-learn-without-it-d9f839597278",
    "featuredImage": "/assets/blog-images/robot-cards",
    "slug": "persistence-of-memory",
    "workDate": "Jul 14, 2001",
    "workDateISO": "2001-07-15T00:00:00.000Z"
  },
  {
    "title": "Building AI That Actually Thinks About Product Work",
    "excerpt": "Building AI That Actually Thinks About Product WorkJune 2, 2025“Let’s take it from the top!”I’ve explained why we burned down a working prototype to build something more ambitious. Now let’s talk about what it means to build an AI that understands product management work — and what “understanding...",
    "url": "/blog/building-ai-that-actually-thinks-about",
    "publishedAt": "Jul 14, 2025",
    "publishedAtISO": "2025-07-14T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/building-ai-that-actually-thinks-about-product-work-4c04e304a3a7",
    "featuredImage": "/assets/blog-images/robot-conductor",
    "slug": "building-ai-that-actually-thinks-about",
    "workDate": "Jul 13, 2001",
    "workDateISO": "2001-07-14T00:00:00.000Z"
  },
  {
    "title": "The Question That Started Everything",
    "excerpt": "May 27, 2025“I have questions”Every project starts with a question.“I am researching how best I can develop and train my own AI agent as a sort of ‘junior associate product management intern’ to gradually give some of my more routine knowledge-management tasks to.”That was it. No grand vision. No...",
    "url": "/blog/the-question-that-started-everything",
    "publishedAt": "Jul 13, 2025",
    "publishedAtISO": "2025-07-13T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-question-that-started-everything-5a69f9a2af0b",
    "featuredImage": "/assets/blog-images/robot-question",
    "slug": "the-question-that-started-everything",
    "workDate": "Jul 12, 2001",
    "workDateISO": "2001-07-13T00:00:00.000Z"
  },
  {
    "title": "From Task Executor to Problem Solver (comes befofe Domain-First Dev)",
    "excerpt": "From Task Executor to Problem Solver“Easy peasey!”June 2, 2025“Create an issue for dark mode.” That’s where we started. A simple command, a simple response. Click, boom, GitHub issue created. Useful? Sure. Game-changing? Hold your horses now, son.But what if instead you could ask: “What’s the pot...",
    "url": "/blog/from-task-executor-to-problem-solver",
    "publishedAt": "Jul 12, 2025",
    "publishedAtISO": "2025-07-12T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-task-executor-to-problem-solver-13896a87b7a9",
    "featuredImage": "/assets/blog-images/robot-maze",
    "slug": "from-task-executor-to-problem-solver",
    "workDate": "Jul 11, 2001",
    "workDateISO": "2001-07-12T00:00:00.000Z"
  },
  {
    "title": "The Architectural Reckoning: When Three Experts Agree You Should Start Over",
    "excerpt": "The Architectural Reckoning: When Three Experts Agree You Should Start OverStill June 1, 2025“Hmmmmmm”There I was, knee-deep in a proof-of-concept that mostly worked, when I decided to get a second opinion. And a third. What happened next taught me something important about knowing when to stop p...",
    "url": "/blog/the-architectural-reckoning",
    "publishedAt": "Jul 11, 2025",
    "publishedAtISO": "2025-07-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-architectural-reckoning-when-three-experts-agree-you-should-start-over-1f9581a41633",
    "featuredImage": "/assets/blog-images/robot-three",
    "slug": "the-architectural-reckoning",
    "workDate": "Jul 10, 2001",
    "workDateISO": "2001-07-11T00:00:00.000Z"
  },
  {
    "title": "The $0 Bootstrap Stack: Building Enterprise Infrastructure for Free (With Upgrade Paths)",
    "excerpt": "The $0 Bootstrap Stack: Building Enterprise Infrastructure for Free (With Upgrade Paths)Yes, still June 1, 2025“How is this possible?”After deciding to rebuild Piper Morgan from scratch, I faced a classic dilemma: How do you build enterprise-grade infrastructure when your budget is exactly zero d...",
    "url": "/blog/the-0-bootstrap-stack",
    "publishedAt": "Jul 11, 2025",
    "publishedAtISO": "2025-07-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-0-bootstrap-stack-building-enterprise-infrastructure-for-free-with-upgrade-paths-078e056a87e4",
    "featuredImage": "/assets/blog-images/robot-bootstrap",
    "slug": "the-0-bootstrap-stack",
    "workDate": "Jul 10, 2001",
    "workDateISO": "2001-07-11T00:00:00.000Z"
  },
  {
    "title": "Domain-First Development: Actually Building What We Designed",
    "excerpt": "Domain-First Development: Actually Building What We DesignedJune 2, 2025“Now that’s a foundation”The decision was made: Time to start over. I’d synthesized the advice of multiple thinking parters and designed a $0 infrastructure. I’d written about the vision of a strategic thinking partner.Now ca...",
    "url": "/blog/domain-first-development",
    "publishedAt": "Jul 11, 2025",
    "publishedAtISO": "2025-07-11T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/domain-first-development-actually-building-what-we-designed-647704d46558",
    "featuredImage": "/assets/blog-images/robot-construction",
    "slug": "domain-first-development",
    "workDate": "Jul 10, 2001",
    "workDateISO": "2001-07-11T00:00:00.000Z"
  },
  {
    "title": "From CLI to GitHub Integration: When Prototypes Meet Real Workflows",
    "excerpt": "From CLI to Web App: When Prototypes Meet Real WorkflowsMay 29, 2025“Hi, mom!”The command-line prototype was working! Well, “working” in the sense that a paper airplane “works” as an aircraft. Sure, it could answer questions about our documentation, but try explaining to your team why they need t...",
    "url": "/blog/from-cli-to-github-integration",
    "publishedAt": "Jul 10, 2025",
    "publishedAtISO": "2025-07-10T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-cli-to-web-app-when-prototypes-meet-real-workflows-c7207687f711",
    "featuredImage": "/assets/blog-images/robot-tv",
    "slug": "from-cli-to-github-integration",
    "workDate": "Jul 9, 2001",
    "workDateISO": "2001-07-10T00:00:00.000Z"
  },
  {
    "title": "From Research Question to Working Prototype: Building an AI PM Assistant from Scratch",
    "excerpt": "From Research Question to Working Prototype: Building an AI PM Assistant from ScratchMay 29, 2025“How hard could it be?”You know that moment when you realize you’re spending more time managing your work than doing your work? That was me, drowning in GitHub tickets, meeting notes, and legacy docum...",
    "url": "/blog/from-research-question-to-working-prototype",
    "publishedAt": "Jul 9, 2025",
    "publishedAtISO": "2025-07-09T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-research-question-to-working-prototype-building-an-ai-pm-assistant-from-scratch-bb06005611cb",
    "featuredImage": "/assets/blog-images/robot-kit",
    "slug": "from-research-question-to-working-prototype",
    "workDate": "Jul 8, 2001",
    "workDateISO": "2001-07-09T00:00:00.000Z"
  },
  {
    "title": "The RAG Revelation: When Your Prototype Answers Back",
    "excerpt": "The RAG Revelation: When Your Proof of Concept Answers BackMay 29, 2025“Hello, world!”Before the rebuilds, before the domain models, before I knew what a circular dependency even was, there was a moment. That moment when your hacky prototype does exactly what you hoped it would do, and you realiz...",
    "url": "/blog/the-rag-revelation",
    "publishedAt": "Jul 8, 2025",
    "publishedAtISO": "2025-07-08T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-rag-revelation-when-your-proof-of-concept-answers-back-cc7f4b96b621",
    "featuredImage": "/assets/blog-images/robot-rag",
    "slug": "the-rag-revelation",
    "workDate": "Jul 7, 2001",
    "workDateISO": "2001-07-08T00:00:00.000Z"
  },
  {
    "title": "Bidirectional Intelligence: Teaching AI to Critique, Not Just Create",
    "excerpt": "Bidirectional Intelligence: Teaching AI to Critique, Not Just Create“How’d I do?”June 8–9, 2025Most PM tools are one-way streets. Create a ticket. Push to GitHub. Move on. But what about all those existing issues that read like someone transcribed a fever dream?That’s what PM-008 was about: teach...",
    "url": "/blog/bidirectional-intelligence",
    "publishedAt": "Jul 7, 2025",
    "publishedAtISO": "2025-07-07T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://mediajunkie.medium.com/bidirectional-intelligence-teaching-ai-to-critique-not-just-create-b5bb0c2c9384",
    "featuredImage": "/assets/blog-images/robot-critique",
    "slug": "bidirectional-intelligence",
    "workDate": "Jul 6, 2001",
    "workDateISO": "2001-07-07T00:00:00.000Z"
  },
  {
    "title": "Taking Stock: The Value of Pausing to Document and Plan",
    "excerpt": "Taking Stock: The Value of Pausing to Document and PlanJune 6, 2025“Why did we build it that way?”Sometimes the most productive thing you can do is stop being productive.A week or so into my first attempt at building Piper Morgan, I had that special kind of mess that only happens when you’re buil...",
    "url": "/blog/taking-stock",
    "publishedAt": "Jul 6, 2025",
    "publishedAtISO": "2025-07-06T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/taking-stock-the-value-of-pausing-to-document-and-plan-da41a68cd59b",
    "featuredImage": "/assets/blog-images/robot-plan",
    "slug": "taking-stock",
    "workDate": "Jul 5, 2001",
    "workDateISO": "2001-07-06T00:00:00.000Z"
  },
  {
    "title": "From Scaffolding to Flight: Before the Training Wheels Come Off",
    "excerpt": "From Scaffolding to Flight: Before the Training Wheels Come Off“Now, you’re getting it!”June 5, 2025“Are we limiting Piper’s potential with all these rigid enums and mappings?”I asked Claude this when we started implementing workflow mappings. And yeah, we were. Intentionally. Like putting traini...",
    "url": "/blog/from-scaffolding-to-flight",
    "publishedAt": "Jul 5, 2025",
    "publishedAtISO": "2025-07-05T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/from-scaffolding-to-flight-before-the-training-wheels-come-off-a858bf183c21",
    "featuredImage": "/assets/blog-images/robot-trike",
    "slug": "from-scaffolding-to-flight",
    "workDate": "Jul 4, 2001",
    "workDateISO": "2001-07-05T00:00:00.000Z"
  },
  {
    "title": "Knowledge Hierarchies and Dependency Hell",
    "excerpt": "“This seems safe!”June 4–5, 2025You know that moment when a simple feature request reveals a fundamental truth about your domain? That happened when I tried to upload my book to Piper Morgan.“Just ingest a PDF,” I thought. “How hard could it be?”(Narrator: It was exactly as hard as it needed to b...",
    "url": "/blog/knowledge-hierarchies-and-dependency-hell",
    "publishedAt": "Jul 4, 2025",
    "publishedAtISO": "2025-07-04T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/knowledge-hierarchies-and-dependency-hell-4734f6e9f442?source=user_profile_page---------4-------------7f4f3524879----------------------",
    "featuredImage": "/assets/blog-images/robot-jenga",
    "slug": "knowledge-hierarchies-and-dependency-hell",
    "workDate": "Jul 3, 2001",
    "workDateISO": "2001-07-04T00:00:00.000Z"
  },
  {
    "title": "The Learning Infrastructure Gambit",
    "excerpt": "“Now you’re set!”June 3, 2025I’m not finished telling the story of the prototype! I learned a lot even as I drove into that dead end:There I was, staring at a classic architectural decision: Do I build the basic features first (like every tutorial says), or do I build the learning infrastructure ...",
    "url": "/blog/the-learning-infrastructure-gambit",
    "publishedAt": "Jul 3, 2025",
    "publishedAtISO": "2025-07-03T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-learning-infrastructure-gambit-aab04037831e",
    "featuredImage": "/assets/blog-images/robot-fishing",
    "slug": "the-learning-infrastructure-gambit",
    "workDate": "Jul 2, 2001",
    "workDateISO": "2001-07-03T00:00:00.000Z"
  },
  {
    "title": "The Great Rebuild: Starting Over When Starting Over Is the Only Option",
    "excerpt": "The Great Rebuild: Starting Over When Starting Over Is the Only Option“Back to the drawing board!”June 1, 2025There’s a particular kind of clarity that comes after you close your prototype folder and open a fresh terminal. Not deletion — the old code sits there like a photo album, reminding you h...",
    "url": "/blog/the-great-rebuild",
    "publishedAt": "Jul 2, 2025",
    "publishedAtISO": "2025-07-02T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-great-rebuild-starting-over-when-starting-over-is-the-only-option-b75918602942",
    "featuredImage": "/assets/blog-images/robot-inventor",
    "slug": "the-great-rebuild",
    "workDate": "Jul 1, 2001",
    "workDateISO": "2001-07-02T00:00:00.000Z"
  },
  {
    "title": "The PM Who Automated Himself (Or at Least Tried To)",
    "excerpt": "The PM Who Automated Himself (Or At Least Tried To)May 28, 2025“If you tell a lie, your technical debt will grow”So, I started this “Building Piper Morgan” series kind of midscene, just as I was figuring out session logs and working on orchestration, but how did I get here and has it really been ...",
    "url": "/blog/the-pm-who-automated-himself-or",
    "publishedAt": "Jul 1, 2025",
    "publishedAtISO": "2025-07-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-pm-who-automated-himself-or-at-least-tried-to-b1d8c2dd5f40",
    "featuredImage": "/assets/blog-images/robot-gepetto",
    "slug": "the-pm-who-automated-himself-or",
    "workDate": "Jun 30, 2001",
    "workDateISO": "2001-07-01T00:00:00.000Z"
  },
  {
    "title": "The Demo That Killed the Prototype",
    "excerpt": "May 31, 2025Piper, the great and powerfulSo I went on this hacking jag and I was starting to drink the Flavor Aid…You know that feeling when you’re about to go on stage and you start to wonder whether your act is really as good as your mom told you? That’s me, preparing to demo Piper Morgan to my...",
    "url": "/blog/the-demo-that-killed-the-prototype",
    "publishedAt": "Jul 1, 2025",
    "publishedAtISO": "2025-07-01T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "insight"
    ],
    "guid": "https://medium.com/building-piper-morgan/the-demo-that-killed-the-prototype-f0aad9fa3a4a",
    "featuredImage": "/assets/blog-images/robot-oz",
    "slug": "the-demo-that-killed-the-prototype",
    "workDate": "Jun 30, 2001",
    "workDateISO": "2001-07-01T00:00:00.000Z"
  },
  {
    "title": "Integration Reveals All: How Building File Analysis Exposed Hidden Architecture",
    "excerpt": "June 27, 2025How far down does it go?When we started PM-011 — adding file upload to our AI PM assistant — it seemed straightforward (and by we I mean me, Claude Opus, Claude Sonnet, and Cursor Agent). Users should be able to upload a CSV or PDF and ask questions about it. “Just add a file picker ...",
    "url": "/blog/integration-reveals-all",
    "publishedAt": "Jun 27, 2025",
    "publishedAtISO": "2025-06-27T07:00:00.000Z",
    "author": "christian crumlish",
    "readingTime": "5 min read",
    "tags": [
      "building"
    ],
    "guid": "https://medium.com/building-piper-morgan/integration-reveals-all-how-building-file-analysis-exposed-hidden-architecture-3d696dbf2803",
    "featuredImage": "/assets/blog-images/robot-found",
    "slug": "integration-reveals-all",
    "workDate": "Jun 26, 2001",
    "workDateISO": "2001-06-27T00:00:00.000Z"
  }
]